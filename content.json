[{"title":"Git入门","date":"2019-08-28T09:03:45.000Z","path":"2019/08/28/Git入门/","text":"what is git 是一个免费开源的分布式版本控制工具； 书籍-Pro Git：有关git的一切可阅读此书获取； why use it 既可以进行本地版本控制，又可以进行分布式版本控制； 不存在集中式版本控制工具的单点故障问题； 具有强大的分支管理； 由于是Linus开发，天然可以使用Linux命令； Git分支 假设有三个目录，并做了提交; 12$ git add README test.rb LICENSE$ git commit -m &apos;The initial commit of my project&apos; Git会对每个子目录进行校验，并将它们作为树对象存储在Git存储库中;然后Git创建一个提交对象，该对象具有元数据和指向根项目树的指针，因此它可以在需要时重新创建该快照。 ; 如果进行一些更改并再次提交，则下一个提交会存储指向紧接其之前的提交的指针。 ； Git中的一个分支只是一个指向其中一个提交的轻量级可移动指针。Git中的默认分支名称是master。当你开始提交时，你会得到一个master指向你最后一次提交的分支。每次提交时，master分支指针都会自动向前移动。 ; Git中的“主”分支不是特殊分支。它与任何其他分支完全一样。几乎每个存储库都有一个的唯一原因是该git init命令默认创建它，并且大多数人都不愿意更改它。 how to use it 安装 Linux说明; macOS下载地址; Windows下载地址; 首次配置 1234567# 安装Git时应该做的第一件事是设置用户名和电子邮件地址# --system：指定系统级别，--global：指定用户级别$ git config --global user.name &quot;John Doe&quot;$ git config --global user.email johndoe@example.com# 使用以下方法查看所有设置及其来源$ git config --list --show-origin 获取帮助 123456$ git help &lt;verb&gt;$ git &lt;verb&gt; --help$ man git-&lt;verb&gt;# 如果您不需要完整的联机帮助页面帮助，但只需要快速了解Git命令的可用选项，您可以使用-h或--help,如：$ git add -h 常用命令 $ git init：在现有目录中初始化存储库； $ git add xxx：将xxx文件从工作区添加到暂存区；untrace-stage； $ git commit -m &#39;initial project version&#39;：从暂存区永久提交到当前分支；stage-unmodified； $ git clone https://github.com/libgit2/libgit2 mylibgit：克隆存储库到本地并修改存储库的目录名； $ git status：查看文件状态，主要查看文件内容是否发生了变化； $ git diff：查看工作区与暂存区的更改； $ git diff --cached：查看暂存区与上次提交的更改； $ git log [--pretty=oneline]：查看提交历史，用于回退过去； $ git reflog：查看命令历史，用于追溯未来； $ git reset --hard commitID：切换版本； $ git rm --cached README：删除暂存区文件； $ git checkout xxx：同步到工作区； $ git commit --amend：重做提交； $ git remote -v：查看远程时要使用的短名称存储的URL； $ git remote add &lt;shortname&gt; &lt;url&gt;：为远程库添加一个新的短名称； $ git fetch &lt;remote&gt;：从远处库抓取数据； $ git push &lt;remote&gt; &lt;branch&gt;：推送当前分支到远程库 $ git remote rename pb paul：更改远程库别名pb为paul； $ git remote remove paul：删除一个远程库url； $ git push &lt;remote&gt;：抓取并合并到本地； $ git branch testing：创建一个testing分支； $ git checkout testing:切换分支； $ git merge hotfix：合并hotfix分支到当前分支上； $ git branch -d hotfix：删除分支； $ git branch -v：查看每个分支上的最后一次提交； $ git branch --merged：查看已经合并了的分支，不带星号的分支可以删除； $ git push &lt;remote&gt; &lt;branch&gt;：将本地分支推送到一个名称不同的远程分支； $ git checkout -b sf origin/serverfix：设置名称与远程分支不同的本地分支； git branch -u origin/serverfix：更新当前分支为远程分支； $ git push origin --delete serverfix：完成合并删除远程分支； 参考文献 书籍-Pro Git; 博客园-Git命令总结; 廖雪峰-Git教程;","tags":[{"name":"git","slug":"git","permalink":"https://jmzc4j.github.io/tags/git/"}]},{"title":"Redis命令","date":"2019-08-28T09:01:17.000Z","path":"2019/08/28/Redis命令/","text":"what is Redis全称为 Remote Dictionary Server; Redis是一个遵守BSD协议的开源的基于内存的数据结构存储服务；可以用做数据库、缓存和消息中间件；（官方） Redis是意大利人用C语言编写的一个高性能的（key/value）分布式的NoSQL数据库，支持多种数据类型并支持持久化； how to use it通用命令 dbsize select dbIndex flushdb flushall keys * exists key move key dbIndex expire key：设置key的存活时间（秒单位） ttl key：查看key的剩余存活时长，返回值含义（-1，永恒；-2，过期），过期就会被从内存中删除该key persist key：去掉有效期设置 type key string 常用 set/get/del/append/strlen key incr/decr key incrby/decrby key increment getrange/setrange key startIndex endIndex：获取key对应的指定范围的value，第一个索引为0，最后一个索引为-1 setex(with expire) key second value setnx(if not exist) key value mset/mget/msetnx key ：添加、获取多个kv getset list 常用 lpush/rpush/lrange lpop/rpop lIndex key lrem key count value ltrim key start end ；截取start到end的元素再赋值给原来的key rpoplpush srcList targetList：当scr与target相同就构成了一个循环 lInsert key before/after v1 v2 lset key index value set 常用 sadd smembers key sismember key v1 scard：获取元素个数 srem key value srandmember key num：随机取出num个元素 spop key smove key1 key2 value-in-key1：将key1中的某个值移动到key的集合中 sdiff key1 key2：获取在key1集合但不在key2集合的元素 sinter key1 key2 sunion key1 key2 hash 常用 hset/hget/hdel/hmset/hmget/hgetall hlen hexists key in-key hkeys/hvals hincrby/hincrbyfloat hsetnx zset 常用 zadd/zrange：zadd zset1 60 v1 70 v2 80 v3 90 v4 100 v5 zrangebyscore key startScore endScore：默认取左闭右闭区间，可以使用左小括号来更改为开区间 zcard/zcount key score1 score2 zrank key value：获取value在key集合中的排名，即获取下标 zscore key value zrevrange zrevrank key value zrevrangebyscore key endScore startScore","tags":[{"name":"redis","slug":"redis","permalink":"https://jmzc4j.github.io/tags/redis/"}]},{"title":"Maven入门","date":"2019-08-28T08:40:39.000Z","path":"2019/08/28/Maven入门/","text":"what is maven 是 apache软件基金会的一个产品； maven 是一个将模型应用于工程的管理系统； maven 是 一个Java项目的构建和管理工具，包括项目生命周期的管理和项目依赖的管理； why use it 简化项目构建，缩短了开发周期； 将代码与架包分离，仅仅在POM中提供依赖的引用即可； 统一的目录结构和约定，有利于开发者理解开发原则； how to config it 配置本地仓库路径 12345&lt;settings&gt; ... &lt;localRepository&gt;D:\\Repository\\mvnRepo&lt;/localRepository&gt; ...&lt;/settings&gt; 配置远程镜像仓库 123456789101112&lt;settings&gt; ... &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;/mirrors&gt;...&lt;/settings&gt; 配置JDK版本（也可以使用编译插件） 12345678910111213141516171819&lt;settings&gt; ... &lt;profiles&gt; &lt;!--定义工程的JDK版本--&gt; &lt;profile&gt; &lt;id&gt;jdk-1.8&lt;/id&gt; &lt;activation&gt; &lt;activeteByDefault&gt;true&lt;/activeteByDefault&gt; &lt;jdk&gt;1.8&lt;/jdk&gt; &lt;/activation&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;/profiles&gt; ...&lt;/settings&gt; how to use it maven的基本工作单元就是POM，POM中包含着项目的部分描述信息，所有的maven操作都是从POM开始的； maven的指令代表着生命周期中的不同阶段，这些指令仅仅是一个抽象层的定义，真实的操作都有由相应的插件来处理的； maven项目创建,使用原型（模板）创建不同的项目，过程中默认选择模板7（快速版）和默认1.0-snapshot版本； 1234mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DgroupId=com.mycompany.app -DartifactId=my-app 创建结果如下： 12345678910111213141516171819202122232425262728293031323334353637383940&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;!-- 指定模型的版本，一般不会变，统一版本可以确保稳定性 --&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!-- 指定坐标和打包方式： groupId：组织和项目唯一标识； artifactId：工程基础名称； version：版本号和类型； packaging：打包方式，默认jar，同时约束了生命周期的最终阶段； --&gt; &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt; &lt;artifactId&gt;my-app&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;!-- Maven生成的文档相关： name:项目的显示名称; url:项目站点的位置; description:项目的基本描述; --&gt; &lt;name&gt;my-app&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;！-- 自定义的属性，EL方式引用 --&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 目录结构如下：(使用IDE创建的还会有resource目录) 123456789101112131415my-app|-- pom.xml`-- src |-- main | `-- java | `-- com | `-- mycompany | `-- app | `-- App.java `-- test `-- java `-- com `-- mycompany `-- app `-- AppTest.java 其他maven指令： mvn compile：编译源代码； mvn test：编译测试源代码并指定命名约定的单元测试； mvn test-compile：仅编译吃源代码； mvn package：打包到target目录中； mvn install：打包到本地仓库中； mvn site：生成项目的web站点； mvn clean：清理target的目录； mvn eclipse:eclipse：生成eclispe项目； mvn idea:idea：生成idea项目； mvn eclipse:clean：清楚eclispe配置； mvn dependency:list：列出所有依赖； mvn deploy：上传到私服； mvn test -skipping compile -skipping test-compile：不编译仅测试； mvn -version/-v：查看maven版本； mvn jetty:run：jetty上运行； mvn -e：显示错误信息； mvn validate：验证工程是否正确，所有需要的资源是否可用； mvn verify：运行任何检查，验证包是否有效且达到质量标准； mvn dependency:tree：输出依赖树； mvn tomcat:run：在tomcat6上运行； mvn help:describe -Dplugin=pluginName -Dgoal(或-Dmojo)=goalName：列出某个插件的goal信息； mvn tomcat7:run -Dmaven.test.skip=true：跳过测试； mvn eclipse:eclipse -DskipTests：生成导入Eclipse中的项目列表。一般在项目导入之前使用； mvn install:install-file -DgroupId=com -DartifactId=client -Dversion=0.1.0 -Dpackaging=jar -Dfile=d:\\client-0.1.0.jar：打包jar到本地库； 其他配置 如何发布jar到远程仓库1234567&lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;mycompany-repository&lt;/id&gt; &lt;name&gt;MyCompany Repository&lt;/name&gt; &lt;url&gt;scp://repository.mycompany.com/repository/maven2&lt;/url&gt; &lt;/repository&gt;&lt;/distributionManagement&gt; 12345678910111213141516&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; ... &lt;servers&gt; &lt;server&gt; &lt;id&gt;mycompany-repository&lt;/id&gt; &lt;username&gt;jvanzyl&lt;/username&gt; &lt;!-- Default value is ~/.ssh/id_dsa --&gt; &lt;privateKey&gt;/path/to/identity&lt;/privateKey&gt; (default is ~/.ssh/id_dsa) &lt;passphrase&gt;my_key_passphrase&lt;/passphrase&gt; &lt;/server&gt; &lt;/servers&gt; ...&lt;/settings&gt; 编译插件 12345678910111213&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.7.0&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 测试插件: 123456789&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.18.1&lt;/version&gt; &lt;!-- 同样实现跳过生命周期中的测试阶段 --&gt; &lt;configuration&gt; &lt;skipTests&gt;true&lt;/skipTests&gt; &lt;/configuration&gt;&lt;/plugin&gt; 资源文件插件 1234567891011121314151617181920212223242526272829303132333435&lt;project&gt; ... &lt;build&gt; ... &lt;resources&gt; &lt;!-- 资源插件默认行为只是将项目主资源文件复制到主代码编译输出目录中，将测试资源文件复制到测试代码编译输出目录中。 --&gt; &lt;resource&gt; &lt;!-- 指定资源文件目录 --&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;!-- 开启资源过滤 ：（默认false） filtering：作用是用环境变量，pom文件里定义的属性和指定文件里的属性替换属性文件的占位符。 --&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;!-- includes之中的也会被过滤 --&gt; &lt;includes&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;!-- excludes之外的不会被过滤 --&gt; &lt;excludes&gt; &lt;exclude&gt;**/*.xml&lt;/exclude&gt; &lt;/excludes&gt; &lt;/resource&gt; ... &lt;/resources&gt; ... &lt;/build&gt; ... &lt;/project&gt; mybatis逆向工程插件 1234567891011&lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.7&lt;/version&gt; &lt;configuration&gt; &lt;configurationFile&gt;$&#123;basedir&#125;/src/main/resources/generatorConfig.xml&lt;/configurationFile&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;/configuration&gt;&lt;/plugin&gt;goal：mybatis-generator:generate Maven中的属性 内置属性： ${basedir}：项目的根目录(包含pom.xml文件的目录； ${version}：项目版本； POM属性： ${project.build.sourceDirectory}：项目的主源码目录，默认为src/main/java； ${project.build.testSourceDirectory}：项目的测试源码目录，默认为src/test/java； ${project.build.directory}：项目构件输出目录，默认为target/； ${project.outputDirectory}：项目主代码编译输出目录，默认为target/classes/； ${project.testOutputDirectory}：项目测试代码编译输出目录，默认为target/test-classes/； ${project.groupId}：项目的groupId； ${project.artifactId}：项目的artifactId； ${project.version}：项目的version，与${version}等价； ${project.build.fianlName}：项目打包输出文件的名称，默认为${project.artifactId}-${project.version}； 自定义属性：用户可以在POM的元素下自定义Maven属性； Settings属性：用户使用settings.开头的属性引用settings.xml文件中XML元素的值； Java系统属性：所有Java系统属性都可以使用Maven属性引用； 环境变量属性：所有环境变量都可以使用以env.开头的Maven属性引用； 聚合工程12345678910111213141516&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt; &lt;artifactId&gt;app&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;modules&gt; &lt;module&gt;my-app&lt;/module&gt; &lt;module&gt;my-webapp&lt;/module&gt; &lt;/modules&gt;&lt;/project&gt; 12345678910&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt; &lt;artifactId&gt;app&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; ... 参考文献 Apache官方-快速入门 博客园-Maven属性、profile和资源过滤 博客园-Maven常用命令 CSDN-30个常用的 Maven 命令 CSDN-maven-surefire-plugin简介","tags":[{"name":"maven","slug":"maven","permalink":"https://jmzc4j.github.io/tags/maven/"}]},{"title":"使用Hexo搭建博客系统","date":"2019-08-27T22:29:42.000Z","path":"2019/08/28/使用Hexo搭建博客系统/","text":"Hexo是什么 Hexo是Node编写的一个基于markdown引擎的用来快速开发静态博客系统的框架； 官方网站：hexo.io; Hexo怎么用 准备环境 安装node.js,下载地址; 安装git,下载地址; 安装 hexo-cli 打开GitBash，执行$ npm install -g hexo-cli; 创建一个hexo的工作目录，进入目录执行hexo init &lt;folder&gt;; 进入初始化的那个目录，执行npm install来构建hexo并安装相应依赖; 配置_config.yml文件; 12345678910111213141516171819202122# Sitetitle: Jmzc&apos;s Blogsubtitle:description: Java,Study,Notes,Daily Life,keywords:author: Jmzclanguage: zh-CNtimezone:# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://jmzc4j.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:jmzc4j/jmzc4j.github.io.git branch: master 执行hexo new &lt;title&gt; 新建一个blog； 在hexo根目录的source/_posts/找到title.md文件进行博客编辑; 执行hexo g 或 hexo generate 生成html静态页面（该页面在pubic文件夹下） 执行hexo s 或 hexo server 启动hexo服务在本地进行测试； 执行hexo d 或 hexo devlop 将生成的静态页发布到github上; 推送源码到github git init ssh-keygen -C &#39;jmzc-blog&#39;,然后将家目录中的公钥复制到github上 git remote add hexo-ssh git@github.com:jmzc4j/jmzc4j.github.io.git git checkout -b source git add . git commit -m &#39;hexo init&#39; git push hexo-ssh source","tags":[{"name":"hexo","slug":"hexo","permalink":"https://jmzc4j.github.io/tags/hexo/"}]}]