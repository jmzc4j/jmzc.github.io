spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.url= jdbc:mysql://192.168.157.128:3306/jmzc?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true
spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=${password}
#数据库密码加密
# java –cp druid-.jar com.alibaba.druid.filter.config.ConfigTools 你的密码
# privateKey:MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAhrYFHZDUfzkzCI4XOXvP9xZhHDejqQmjOCNoc5iRbUtFJ6ZwES6MYYc7JwGJNMpA21hKTTnuooJRJDTEPrVGtwIDAQABAkA3bKRmKbSEM7B/kJaVnA9QhfCmf23imoiBDHBpPxh2cqhRQpud/g8GWv4eGQVKXJ6CrkQPOrXM69nafB7CDgRhAiEA7Hq9kAs2hWeR3HPmwLR5PgvwDciPVVFRfL9Yxg5zuB0CIQCR1LgkkLgkGbnHu4FwjaqDcYWQ9sJ587b5eZNobSAJ4wIhANOJ5IKzFR13DWq4HyYpCv/u69lYnKdEa/F8tavOB8QdAiA/DNh8vrFOsmy3ZWNmdWmmoPtdnMKilXOj0yOff6bdfwIhAOC5Ky2VsYxk9CIqPlUp/B98YNFI22GPi+02OYbjUzKW
publicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIa2BR2Q1H85MwiOFzl7z/cWYRw3o6kJozgjaHOYkW1LRSemcBEujGGHOycBiTTKQNtYSk057qKCUSQ0xD61RrcCAwEAAQ==
password=akYjd0dTr9hMWaqtDxxIttsggzAU27tMHz8nZuc5rr1n6NJixmZRR4teaSdBNfhpGCbbaN/U49xkbCeqgRhppQ==
# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=10
# 配置获取连接等待超时的时间
spring.datasource.maxWait=10000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒 
spring.datasource.minEvictableIdleTimeMillis=300000
# 检验连接是否有效的查询语句。如果数据库Driver支持ping()方法，则优先使用ping()方法进行检查，否则使用validationQuery查询进行检查。(Oracle jdbc Driver目前不支持ping方法) 
spring.datasource.validationQuery=SELECT 1
# 从连接池获取连接时是否检查连接有效性，true时，如果连接空闲时间超过minEvictableIdleTimeMillis进行检查，否则不检查;false时，不检查
spring.datasource.testWhileIdle=true
# 从连接池获取连接时是否检查连接有效性，true时，每次都检查;false时，不检查 
spring.datasource.testOnBorrow=false
# 往连接池归还连接时是否检查连接有效性，true时，每次都检查;false时，不检查
spring.datasource.testOnReturn=false
# 增强timeBetweenEvictionRunsMillis的周期性连接检查，minIdle内的空闲连接，每次检查强制验证连接有效性
spring.datasource.keepAlive=true
# 连接泄露检查，打开removeAbandoned功能 , 连接从连接池借出后，长时间不归还，将触发强制回连接。
spring.datasource.removeAbandoned=true
# 超时时间，秒
spring.datasource.removeAbandonedTimeout=80
# 关闭abanded连接时输出错误日志，这样出现连接泄露时可以通过错误日志定位忘记关闭连接的位置
spring.datasource.logAbandoned=true
# 打开PSCache，并且指定每个连接上PSCache的大小 ,Oracle等支持游标的数据库，打开此开关，会以数量级提升性能
spring.datasource.poolPreparedStatements=true
# PSCache缓存大小
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙 ,config可以用于密码解密
# stat,wall,log4j,config
spring.datasource.filters=wall,config  
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录，config.decrypt=true;config.decrypt.key=${publicKey}和上面的config过滤器一起解密
spring.datasource.connectionProperties=config.decrypt=true;config.decrypt.key=${publicKey}
# 配置监控统计日志的输出间隔，单位毫秒，每次输出所有统计数据会重置，酌情开启 
spring.datasource.timeBetweenLogStatsMillis=120000

spring.datasource.statementExecutableSqlLogEnable=true
spring.datasource.mergeSql=true
spring.datasource.logSlowSql=true
spring.datasource.slowSqlMillis=10000