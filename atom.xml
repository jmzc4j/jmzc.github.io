<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jmzc&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jmzc4j.github.io/"/>
  <updated>2019-08-31T01:11:31.269Z</updated>
  <id>https://jmzc4j.github.io/</id>
  
  <author>
    <name>Jmzc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis源码分析</title>
    <link href="https://jmzc4j.github.io/2019/08/30/Mybatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://jmzc4j.github.io/2019/08/30/Mybatis源码分析/</id>
    <published>2019-08-30T15:15:41.000Z</published>
    <updated>2019-08-31T01:11:31.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Mybatis架构"><a href="#Mybatis架构" class="headerlink" title="Mybatis架构"></a>Mybatis架构</h3><ul><li>轻量级的半自动ORM框架，大致可分四层：<ol><li>引导层：基本配置，通过Xml配置方式或者是Java API方式；</li><li>框架层：环境管理，通过配置文件对各种环境初始化，如连接池管理、事务管理、sql语句管理、缓存管理；</li><li>接口层：通过接口调用的方式实现对数据的增删改查，如Mapper接口、配置维护接口、数据增加接口、删除接口、添加接口、查询接口；</li><li>数据处理层： 完成sql的解析、sql的执行、参数的映射、返回结果处理和映射，分别对应SqlSource、Executor、ParameterHandler和ResultSethandler；</li></ol></li><li>不多说，来一张架构图<img src="/2019/08/30/Mybatis源码分析/mybatis架构.png"></li></ul><h3 id="Mybatis参数封装"><a href="#Mybatis参数封装" class="headerlink" title="Mybatis参数封装"></a>Mybatis参数封装</h3><ol><li><p>对于单个参数：</p><ul><li>可以不进行任何处理</li><li>使用Param注解</li><li>useActuaParamName=true</li><li>对于Collection、List、Array类型使用collection、list、array作为key</li></ul></li><li><p>对于多个参数：</p><ul><li>封装成一个TO</li><li>封装成一个Map</li><li>使用多个Param注解</li><li>取值时使用param1、param2…或者0、1…作为key</li><li>useActuaParamName=true时直接使用形参作为key</li></ul></li><li><p>对于返回值为Map时，需要添加MapKey注解；</p></li><li><p>来一个简单的源码分析</p><img src="/2019/08/30/Mybatis源码分析/source05.png"></li><li><p>若看不清图，请看planUML源码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">scale 2/3</span><br><span class="line">autonumber</span><br><span class="line">title 输入参数包装过程</span><br><span class="line"></span><br><span class="line">MapperMethod-&gt;MapperMethod: convertArgsToSqlCommandParam(Object[] args)</span><br><span class="line">MapperMethod-&gt;ParamNameResolver: paramNameResolver.getNamedParams(args)</span><br><span class="line">ParamNameResolver-&gt;ParamNameResolver: new ParamNameResolver(config, method)</span><br><span class="line">ParamNameResolver-&gt;ParamNameResolver: 为SortedMap&lt;Integer, String&gt; names初始化</span><br><span class="line">note right</span><br><span class="line">初始化过程：</span><br><span class="line">1. SortedMap&lt;Integer, String&gt; map = new TreeMap&lt;&gt;();</span><br><span class="line">2. 是否有@Param注解，有就用注解指定的值；</span><br><span class="line">3. 是否在全局配置中配置了&lt;setting name=&quot;useActualParamName&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">配置了就直接使用形参的值（需要JDK8以上，因为使用了Stream API和方法引用）</span><br><span class="line">4. 如果上述两种都不存在，就使用Map集合的size()作为值</span><br><span class="line">总结： key的取值：从0开始；value的值可能是注解的值、形参的值或者是size(）的值;</span><br><span class="line">end note</span><br><span class="line"></span><br><span class="line">ParamNameResolver-&gt;ParamNameResolver: getNamedParams(Object[] args)</span><br><span class="line">note right</span><br><span class="line">参数封装过程：</span><br><span class="line">1. args==null或者names集合中没有值，返回null；</span><br><span class="line">2. 没有@Param注解并且只有一个形参时，直接从names集合中取值；</span><br><span class="line">3. 其他情况都会将形参列表封装到一个Map中，将names集合的key作为args的索引，然后将每个形参作为值添加到Map中</span><br><span class="line">那么Map的key有这几种情况：</span><br><span class="line">1. 以names集合的value作为Map的key</span><br><span class="line">- 存在@Param：key就是注解的值</span><br><span class="line">- 开启useActualParamName：key就是形参的值</span><br><span class="line">- 其他情况，使用形参的索引作为key</span><br><span class="line">2. 以param作为前置，后面从1开始递增，即param1、param2...</span><br><span class="line"></span><br><span class="line">end note</span><br><span class="line"></span><br><span class="line">note left</span><br><span class="line">在DefaultSqlSession中存在  Object wrapCollection(final Object object)也会对特殊形参包装</span><br><span class="line">1. 对于Colection、List和Array类型的形参同样是会被封装到一个Map中；</span><br><span class="line">- Collection类型的key： collection</span><br><span class="line">- List类型的key: list</span><br><span class="line">- Array类型的key：array</span><br><span class="line">2. 其他类型不进行处理；</span><br><span class="line"></span><br><span class="line">当我们的查询返回的是一个Map的时候，需要使用@MapKey注解来指定使用哪个属性来作为key</span><br><span class="line">end note</span><br><span class="line"></span><br><span class="line">center footer 即 MapperMethod.convertArgsToSqlCommandParam(Object[] args)分析</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></li></ol><h3 id="Mybatis获取SqlSessionFactory"><a href="#Mybatis获取SqlSessionFactory" class="headerlink" title="Mybatis获取SqlSessionFactory"></a>Mybatis获取SqlSessionFactory</h3><ol><li><p>使用Resources工具加载配置资源文件到文件流中</p></li><li><p>使用SqlSessionFactoryBuilder创建一个DefaultSqlSessionFactory；</p></li><li><p>在2的过程中会使用XmlConifgBuilder和XmlMapperBuilder分别解析资源文件，从而进行Configuration的初始化；</p></li><li><p>用一张图来看下具体流程</p><img src="/2019/08/30/Mybatis源码分析/source01.png"></li><li><p>若看不清图，请看planUML源码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">scale 2/3</span><br><span class="line">autonumber</span><br><span class="line">title DefaultSqlSessionFactory初始化过程</span><br><span class="line"></span><br><span class="line">SqlSessionFactoryBuilder-&gt;SqlSessionFactoryBuilder: new SqlSessionFactoryBuilder()</span><br><span class="line">SqlSessionFactoryBuilder-&gt;XMLConfigBuilder: build(reader)</span><br><span class="line">SqlSessionFactoryBuilder-&gt;XMLConfigBuilder: build(reader,  environment, properties)</span><br><span class="line">XMLConfigBuilder-&gt;XMLConfigBuilder: new XMLConfigBuilder(reader, environment, properties)</span><br><span class="line">XMLConfigBuilder-&gt;XMLConfigBuilder: parse()开始解析配置文件</span><br><span class="line">XMLConfigBuilder-&gt;Configuration: 最终通过parseConfiguration(parser.evalNode(&quot;/configuration&quot;))初始化Configuration中全局配置</span><br><span class="line">XMLConfigBuilder-&gt;XMLMapperBuilder: mapperElement(root.evalNode(&quot;mappers&quot;)</span><br><span class="line">XMLMapperBuilder-&gt;XMLMapperBuilder: new XMLMapperBuilder()</span><br><span class="line">XMLMapperBuilder-&gt;XMLMapperBuilder: parse()开始解析映射文件</span><br><span class="line">XMLMapperBuilder-&gt;Configuration: 最终通过configurationElement(parser.evalNode(&quot;/mapper&quot;))初始化Configuration映射配置</span><br><span class="line">Configuration--&gt;XMLConfigBuilder: 返回configuration</span><br><span class="line">XMLConfigBuilder-&gt;DefaultSqlSessionFactory: build(configuration)创建了DefaultSqlSessionFactory</span><br><span class="line">DefaultSqlSessionFactory--&gt;SqlSessionFactoryBuilder: 返回DefaultSqlSessionFactory</span><br><span class="line"></span><br><span class="line">center footer 需要Configuration对象的参与，dom解析使用的是xPath</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></li></ol><h3 id="Mybatis获取SqlSession"><a href="#Mybatis获取SqlSession" class="headerlink" title="Mybatis获取SqlSession"></a>Mybatis获取SqlSession</h3><ol><li><p>使用SqlSessionFactory创建一个DefaultSqlSession；</p></li><li><p>在1的过程中会通过TransactionFactory创建tx，然后将tx作为参数创建Executor（默认情况下是SimpleExecutor）；</p></li><li><p>具体过程如下图：</p><img src="/2019/08/30/Mybatis源码分析/source02.png"></li><li><p>若看不清图，请看planUML源码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">scale 2/3</span><br><span class="line">autonumber</span><br><span class="line">title DefaultSqlSession初始化过程</span><br><span class="line"></span><br><span class="line">DefaultSqlSessionFactory-&gt;Configuration: open()</span><br><span class="line">DefaultSqlSessionFactory-&gt;Configuration: openSessionFromDataSource(execType, level, autoCommit)</span><br><span class="line">Configuration-&gt;TransactionFactory: getTransactionFactoryFromEnvironment(environment)</span><br><span class="line">TransactionFactory-&gt;Transaction: newTransaction(dataSource, level, autoCommit)</span><br><span class="line">Transaction--&gt;TransactionFactory: 返回Transaction</span><br><span class="line">TransactionFactory-&gt;Executor: newExecutor(tx, execType)创建默认的SimpleExecutor</span><br><span class="line">TransactionFactory-&gt;Executor: 如果开启二级缓存创建CachingExecutor</span><br><span class="line">Executor-&gt;DefaultSqlSession: new DefaultSqlSession(configuration, executor, autoCommit)</span><br><span class="line">DefaultSqlSession--&gt;DefaultSqlSessionFactory: 返回一个关闭自动提交的DefaultSqlSession</span><br><span class="line"></span><br><span class="line">center footer 需要Configuration和Executor对象的参与</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></li></ol><h3 id="Mybatis获取MapperProxy"><a href="#Mybatis获取MapperProxy" class="headerlink" title="Mybatis获取MapperProxy"></a>Mybatis获取MapperProxy</h3><ol><li><p>使用SqlSession的getMapper方法，最终是调用MapperProxyFactory的newInstance方式完成MapperProxy的创建；</p></li><li><p>具体过程如下图：</p><img src="/2019/08/30/Mybatis源码分析/source03.png"></li><li><p>若看不清图，请看planUML源码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">scale 2/3</span><br><span class="line">autonumber</span><br><span class="line">title MapperProxy初始化过程</span><br><span class="line"></span><br><span class="line">DefaultSqlSession-&gt;Configuration: getMapper(type)</span><br><span class="line">Configuration-&gt;MapperRegistry: getMapper(type, sqlSession)</span><br><span class="line">MapperRegistry-&gt;MapperRegistry: getMapper(type, sqlSession)</span><br><span class="line">MapperRegistry-&gt;MapperProxyFactory: 根据接口类型创建MapperProxyFactory</span><br><span class="line">MapperProxyFactory-&gt;MapperProxy: newInstance(sqlSession)</span><br><span class="line">MapperProxy-&gt;MapperProxy: new MapperProxy&lt;&gt;(sqlSession, mapperInterface, methodCache)</span><br><span class="line">MapperProxy--&gt;DefaultSqlSession: 返回MapperProxy</span><br><span class="line"></span><br><span class="line">center footer 需要Configuration和DefaultSqlSession的参与</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></li></ol><h3 id="Mybatis查询流程"><a href="#Mybatis查询流程" class="headerlink" title="Mybatis查询流程"></a>Mybatis查询流程</h3><ol><li><p>执行MapperProxyinvoke方法</p></li><li><p>执行DefaultSqlSession的selectList方法</p></li><li><p>执行Executor的quary方法</p></li><li><p>通过ParameterHandler处理输入参数，最终调用的TypeHandler的setParameter方法</p></li><li><p>通过StatmentHandler创建Statment，执行execute方法</p></li><li><p>通过ResultSetHandler处理返回结果，最终调用TypeHandler的getParameter方法</p></li><li><p>给出具体流程图：</p><img src="/2019/08/30/Mybatis源码分析/source04.png"></li><li><p>若看不清图，请看planUML源码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">scale 2/3</span><br><span class="line">autonumber</span><br><span class="line">title 根据主键查询过程</span><br><span class="line"></span><br><span class="line">MapperProxy-&gt;MapperMethod: invoke(proxy, method, args)</span><br><span class="line">MapperMethod-&gt;MapperMethod: execute(sqlSession, args)</span><br><span class="line">MapperMethod-&gt;MapperMethod: sqlCommand.getType()== SELECT</span><br><span class="line">MapperMethod-&gt;MapperMethod: 根据返回类型做不同处理（这里返回单个对象）</span><br><span class="line">MapperMethod-&gt;MapperMethod: convertArgsToSqlCommandParam(args)入参包装</span><br><span class="line">MapperMethod-&gt;DefaultSqlSession: sqlSession.selectOne(command.getName(), param)</span><br><span class="line">DefaultSqlSession-&gt;DefaultSqlSession: selectOne(statement, parameter)</span><br><span class="line">DefaultSqlSession-&gt;DefaultSqlSession: selectList(statement, parameter)，返回list.get(0)</span><br><span class="line">DefaultSqlSession-&gt;DefaultSqlSession: selectList(statement, parameter, rowBounds)</span><br><span class="line">DefaultSqlSession-&gt;Configuration: 获取MappedStatement</span><br><span class="line">Configuration-&gt;Configuration: getMappedStatement(id, true)</span><br><span class="line">Configuration--&gt;DefaultSqlSession: mappedStatements.get(id)</span><br><span class="line">DefaultSqlSession-&gt;CachingExecutor: executor.query(ms, parameter, rowBounds, resultHandler)</span><br><span class="line">CachingExecutor-&gt;CachingExecutor: query(ms, parameterObject, rowBounds, resultHandler)</span><br><span class="line">CachingExecutor-&gt;CachingExecutor: 获取BoundSql,创建缓存key</span><br><span class="line">CachingExecutor-&gt;CachingExecutor: query(ms, parameterObject, rowBounds, resultHandler, key, boundSql)</span><br><span class="line">CachingExecutor-&gt;BaseExecutor: executor.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql)</span><br><span class="line">BaseExecutor-&gt;BaseExecutor: query(ms, parameter, rowBounds, resultHandler, key, boundSql)</span><br><span class="line">BaseExecutor-&gt;BaseExecutor: localCache.getObject(key)</span><br><span class="line">BaseExecutor-&gt;BaseExecutor: resultHandler为null偶从localCache中取</span><br><span class="line">BaseExecutor-&gt;BaseExecutor: 否则，queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql)</span><br><span class="line">BaseExecutor-&gt;SimpleExecutor: baseExcutor.doQuery(ms, parameter, rowBounds, resultHandler, boundSql)</span><br><span class="line">SimpleExecutor-&gt;SimpleExecutor: doQuery(ms, parameter, rowBounds, resultHandler, boundSql)</span><br><span class="line">SimpleExecutor-&gt;Configuration: ms.getConfiguration()</span><br><span class="line">Configuration-&gt;RoutingStatementHandler: newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql)</span><br><span class="line">RoutingStatementHandler-&gt;RoutingStatementHandler: new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql)</span><br><span class="line">RoutingStatementHandler-&gt;PreparedStatementHandler: ms.getStatementType()根据类型判断获取StatementHandler</span><br><span class="line">PreparedStatementHandler-&gt;PreparedStatementHandler: new PreparedStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql)</span><br><span class="line">PreparedStatementHandler-&gt;PreparedStatementHandler: 在构建PreparedStatementHandler过程中还创建了ParameterHandler和ResultSetHandler</span><br><span class="line">PreparedStatementHandler--&gt;SimpleExecutor: 返回PreparedStatementHandler</span><br><span class="line">SimpleExecutor--&gt;SimpleExecutor: prepareStatement(handler, statementLog)</span><br><span class="line">SimpleExecutor--&gt;SimpleExecutor: PreparedStatementHandler创建了PrepareStatement</span><br><span class="line">SimpleExecutor--&gt;SimpleExecutor: DefaultParameterHandler处理sql的输入参数</span><br><span class="line">SimpleExecutor--&gt;SimpleExecutor: 最终使用TypeHandler的setParameter(ps, i, parameter, jdbcType)</span><br><span class="line">SimpleExecutor--&gt;PreparedStatementHandler: statmentHandler.query(stmt, resultHandler)</span><br><span class="line">PreparedStatementHandler--&gt;PreparedStatementHandler: query(statement, resultHandler)</span><br><span class="line">PreparedStatementHandler--&gt;PreparedStatementHandler: 通过PreparedStatement执行ps.execute()</span><br><span class="line">PreparedStatementHandler--&gt;PreparedStatementHandler: 通过DefaultResultSetHandler出来结果集</span><br><span class="line">PreparedStatementHandler--&gt;PreparedStatementHandler: 最终使用TypeHandler的getResult(rs, column)</span><br><span class="line"></span><br><span class="line">center footer 需要MapperedStatment、Executor、Statmenthandler、ParameterHandler、ResultSetHandler、TypeHandler参与</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="mybatis" scheme="https://jmzc4j.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Http协议</title>
    <link href="https://jmzc4j.github.io/2019/08/30/Http%E5%8D%8F%E8%AE%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/30/Http协议/</id>
    <published>2019-08-30T10:20:15.000Z</published>
    <updated>2019-08-30T11:02:46.333Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="what-is"><a href="#what-is" class="headerlink" title="what is"></a>what is</h3><ul><li>HTTP是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网服务器传输超文本到本地浏览器的传送协议；</li><li>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）；</li><li>连接时需要3次握手、断开时需要4次挥手；</li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>HTTP是无连接：<br>  无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间；</li><li>HTTP是媒体独立的：<br>  只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型；</li><li>HTTP是无状态：<br>  无状态是指协议对于事务处理没有记忆能力；<br>  缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大；<br>  在服务器不需要先前信息时它的应答就较快；</li></ul><h3 id="消息结构"><a href="#消息结构" class="headerlink" title="消息结构"></a>消息结构</h3><ul><li>Http消息包括请求消息和响应消息两部分；</li><li>HTTP请求报文由请求行（request line）、请求头（header）、空行和请求数据4个部分组成；<ul><li>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成；<br>  HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法；<br>  HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法；</li><li>请求头部由关键字/值对组成，每行一对，关键字和值用英文冒号“:”分隔；</li><li>请求数据POST方法中使用。POST方法适用于需要客户填写表单的场合。与请求数据相关的最常使用的请求头是Content-Type和Content-Length；</li></ul></li><li>HTTP响应也由三个部分组成，分别是：状态行、响应头、空行、响应正文；<ul><li>在响应中唯一真正的区别在于第一行中用状态信息代替了请求信息，状态行通过提供一个状态码来说明所请求的资源情况。<ul><li>状态代码由三位数字组成，第一个数字定义了响应的类别；<br>  1xx：指示信息–表示请求已接收，继续处理。<br>  2xx：成功–表示请求已被成功接收、理解、接受。<br>  3xx：重定向–要完成请求必须进行更进一步的操作。<br>  4xx：客户端错误–请求有语法错误或请求无法实现。<br>  5xx：服务器端错误–服务器未能实现合法的请求。</li><li>常见的状态码：<br>  200 OK：客户端请求成功。<br>  400 Bad Request：客户端请求有语法错误，不能被服务器所理解。<br>  401 Unauthorized：请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。<br>  403 Forbidden：服务器收到请求，但是拒绝提供服务。<br>  404 Not Found：请求资源不存在，举个例子：输入了错误的URL。<br>  500 Internal Server Error：服务器发生不可预期的错误。<br>  503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常，举个例子：HTTP/1.1 200 OK（CRLF）。<h4 id="通用头部"><a href="#通用头部" class="headerlink" title="通用头部"></a>通用头部</h4></li></ul></li></ul></li><li>Request URL:请求的URL地址；</li><li>Request Method: 请求方法，get/post/put/delete……；</li><li>Status Code：状态码，200 为请求成功；</li><li>Remote Address：路由地址；<h4 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h4></li><li>Accept：告诉WEB服务器自己接受什么介质类型，<em>/</em> 表示任何类型，type/* 表示该类型下的所有子类型；</li><li>Accept-Charset：浏览器申明自己接收的字符集；</li><li>Accept-Encoding：浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法 （gzip，deflate）；</li><li>Accept-Language：浏览器申明自己接收的语言。语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等；</li><li>Authorization：当客户端接收到来自WEB服务器的 WWW-Authenticate 响应时，该头部来回应自己的身份验证信息给WEB服务器；</li><li>Connection：表示是否需要持久连接（close、keep-alive）；</li><li>Referer：发送请求页面URL。浏览器向 WEB 服务器表明自己是从哪个 网页/URL 获得/点击 当前请求中的网址/URL；</li><li>User-Agent: 浏览器表明自己的身份（是哪种浏览器）；</li><li>Host： 发送请求页面所在域；</li><li>Cache-Control：浏览器应遵循的缓存机制：<br>  no-cache（不要缓存的实体，要求现在从WEB服务器去取）；<br>  max-age：（只接受 Age 值小于 max-age 值，并且没有过期的对象）；<br>  max-stale：（可以接受过去的对象，但是过期时间必须小于 max-stale 值）；<br>  min-fresh：（接受其新鲜生命期大于其当前 Age 跟 min-fresh 值之和的缓存对象）；</li><li>Pramga：主要使用 Pramga: no-cache，相当于 Cache-Control： no-cache；</li><li>Range：浏览器（比如 Flashget 多线程下载时）告诉 WEB 服务器自己想取对象的哪部分；</li><li>Form：一种请求头标，给定控制用户代理的人工用户的电子邮件地址；</li><li>Cookie：这是最重要的请求头信息之一；</li></ul><h4 id="响应头部"><a href="#响应头部" class="headerlink" title="响应头部"></a>响应头部</h4><ul><li>Age：当代理服务器用自己缓存的实体去响应请求时，用该头部表明该实体从产生到现在经过多长时间了。</li><li>Accept-Ranges：WEB服务器表明自己是否接受获取其某个实体的一部分（比如文件的一部分）的请求。bytes：表示接受，none：表示不接受。</li><li>Cache-Control：服务器应遵循的缓存机制。<br>   public(可以用 Cached 内容回应任何用户)<br>   private（只能用缓存内容回应先前请求该内容的那个用户）<br>   no-cache（可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端）<br>   max-age：（本响应包含的对象的过期时间）<br>   ALL:  no-store（不允许缓存）  </li><li>Connection： 是否需要持久连接<br>  close（连接已经关闭）。<br>  keepalive（连接保持着，在等待本次连接的后续请求）。<br>  Keep-Alive：如果浏览器请求保持连接，则该头部表明希望 WEB 服务器保持连接多长时间（秒）。例如：Keep-Alive：300</li><li>Content-Encoding：WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。 例如：Content-Encoding：gzip </li><li>Content-Language：WEB 服务器告诉浏览器自己响应的对象的语言。</li><li>Content-Length：WEB 服务器告诉浏览器自己响应的对象的长度。例如：Content-Length: 26012</li><li>Content-Range：WEB 服务器表明该响应包含的部分对象为整个对象的哪个部分。例如：Content-Range: bytes 21010-47021/47022</li><li>Content-Type：WEB 服务器告诉浏览器自己响应的对象的类型。例如：Content-Type：application/xml</li><li>Expired：WEB服务器表明该实体将在什么时候过期，对于过期了的对象，只有在跟WEB服务器验证了其有效性后，才能用来响应客户请求。</li><li>Last-Modified：WEB 服务器认为对象的最后修改时间，比如文件的最后修改时间，动态页面的最后产生时间等等。</li><li>Location：WEB 服务器告诉浏览器，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。</li><li>Proxy-Authenticate： 代理服务器响应浏览器，要求其提供代理身份验证信息。</li><li>Server: WEB 服务器表明自己是什么软件及版本等信息。</li><li>Refresh：表示浏览器应该在多少时间之后刷新文档，以秒计。</li></ul><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><a href="/2019/08/30/Http协议/HTTP协议.pdf" title="HTTP协议.pdf">HTTP协议.pdf</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="http" scheme="https://jmzc4j.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Idea常用配置</title>
    <link href="https://jmzc4j.github.io/2019/08/30/Idea%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/30/Idea常用配置/</id>
    <published>2019-08-30T07:29:27.000Z</published>
    <updated>2019-08-30T09:54:42.678Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="IntelliJ-IDEA常用配置"><a href="#IntelliJ-IDEA常用配置" class="headerlink" title="IntelliJ IDEA常用配置"></a>IntelliJ IDEA常用配置</h3><ol><li>View-&gt;勾选Tool Bar与Tool Buttons ；设置显示常见的视图,调出工具条和按钮组；</li><li>File-&gt;Settings：打开设置视口；<ol><li>Appearance &amp; Behavior-&gt;Theme ：设置主题；</li><li>Keymap-&gt;选择eclispe模式 ：设置快捷为 Eclipse；或者 File Import Settings ：导入已有的快捷键设置；</li><li>Editor-&gt;General-&gt;勾选Change font size(Zoom)… ：设置Ctrl + 鼠标滚轮修改字体大小；</li><li>Editor-&gt;General-&gt;勾选Show quick document on mouse… ：设置鼠标悬浮提示；</li><li>Editor-&gt;General-&gt;Auto Imporp-&gt;勾选Add unambigous import…和Optimize imports… ：设置自动导包；</li><li>Editor-&gt;General-&gt;Appearance-&gt;勾选Show line number和Show method seperators ：设置显示行号和方法间的分隔符;</li><li>Editor-&gt;General-&gt;Code Completion-&gt;Case sensitive completion-&gt;none ：忽略大小写提示；</li><li>Editor-&gt;General-&gt;Editor Tabs-&gt;取消勾选Show tabs in single row ：取消单行显示tabs；</li><li>Editor-&gt;Font ：设置字体；</li><li>Editor-&gt;File and Code Templates-&gt;Includes-&gt;File Header : 修改类头的文档注释信息;</li><li>Editor-&gt;File Encodings-encoding相关全部改为utf-8，并勾选Transparent native-to-ascii conversion ： 设置项目文件编码；</li><li>Editor-&gt;Live Templates ；自定义模板；</li><li>Build,Execution,Deployment-&gt;勾选build project auto..和Compile independent.. ：设置自动编译；</li><li>Build,Execution,Deployment-&gt;Build Tools-&gt;Maven : 配置maven；</li><li>Build,Execution,Deployment-&gt;Application Server-&gt;’+’号，添加配置tomcat；</li><li>Version Control-&gt;Git ： 配置git；<h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3></li></ol></li></ol><ul><li>.ignore : git忽略文件；</li><li>CamelCase ：驼峰式命名和下划线命名交替变化；</li><li>CheckStyle-IDEA ： 代码样式检查；</li><li>Statistic : 代码统计；</li><li>Eclipse Code Formatter ： Eclispe风格格式化；</li><li>Maven Helper ： Maven辅助；</li><li>GsonFormat : 把 JSON 字符串直接实例化成类；</li><li>FindBugs-IDEA ： 代码 Bug 检查；</li><li>Lombok ；Lombok支持；</li><li>PlanUML intergration ：UML插件；</li></ul><h3 id="如何删除模块"><a href="#如何删除模块" class="headerlink" title="如何删除模块"></a>如何删除模块</h3><ul><li>选中模块-&gt;右键Open Module Settings-&gt;点击’-‘号-&gt;将module从project移除-&gt;delete;</li></ul><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><a href="/2019/08/30/Idea常用配置/idea.pdf" title="idea配置详解">idea配置详解</a><a href="/2019/08/30/Idea常用配置/keymap-shkstart.jar" title="快捷键定制包">快捷键定制包</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="IDE工具" scheme="https://jmzc4j.github.io/categories/IDE%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="idea" scheme="https://jmzc4j.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Hexo插入音乐或视频</title>
    <link href="https://jmzc4j.github.io/2019/08/29/Hexo%E6%8F%92%E5%85%A5%E9%9F%B3%E4%B9%90%E6%88%96%E8%A7%86%E9%A2%91/"/>
    <id>https://jmzc4j.github.io/2019/08/29/Hexo插入音乐或视频/</id>
    <published>2019-08-29T10:50:33.000Z</published>
    <updated>2019-08-30T00:14:49.030Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="使用hexo-tag-aplayer插件"><a href="#使用hexo-tag-aplayer插件" class="headerlink" title="使用hexo-tag-aplayer插件"></a>使用hexo-tag-aplayer插件</h3><ul><li><p>官网地址：<a href="https://github.com/grzhan/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a>;</p></li><li><p>安装命令：<code>npm install --save hexo-tag-aplayer</code>;</p></li><li><p>语法格式：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure></li><li><p>语法参数说明：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title : 曲目标题;</span><br><span class="line">author: 曲目作者</span><br><span class="line">url: 音乐文件 URL 地址;</span><br><span class="line">picture_url: (可选) 音乐对应的图片地址;</span><br><span class="line">narrow: （可选）播放器袖珍风格;</span><br><span class="line">autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能;</span><br><span class="line">width:xxx: (可选) 播放器宽度 (默认: 100%);</span><br><span class="line">lrc:xxx: （可选）歌词文件 URL 地址;</span><br></pre></td></tr></table></figure></li><li><p>当开启Hexo的文章资源文件夹功能时可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用;</p><ol><li><p>hexo根路径配置文件中开启配置，<code>post_asset_folder: true</code>;</p></li><li><p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br><span class="line"></span><br><span class="line">例如：要引入一个图片:</span><br><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure></li><li><p>开启资源目录后，只需在歌词和路径属性中填写文件名即可，例如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;picture.jpg&quot; &quot;lrc:caffeine.txt&quot; %&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="歌词标签"><a href="#歌词标签" class="headerlink" title="歌词标签"></a>歌词标签</h4><ul><li>除了使用标签 lrc 选项来设定歌词，你也可以直接使用 aplayerlrc 标签来直接插入歌词文本在博客中;  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayerlrc &quot;title&quot; &quot;author&quot; &quot;url&quot; &quot;autoplay&quot; %&#125;</span><br><span class="line">[00:00.00]lrc here</span><br><span class="line">&#123;% endaplayerlrc %&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="播放列表"><a href="#播放列表" class="headerlink" title="播放列表"></a>播放列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayerlist %&#125;</span><br><span class="line">&#123;</span><br><span class="line">&quot;narrow&quot;: false,      // （可选）播放器袖珍风格</span><br><span class="line">&quot;autoplay&quot;: true,     // （可选) 自动播放，移动端浏览器暂时不支持此功能</span><br><span class="line">&quot;mode&quot;: &quot;random&quot;,     // （可选）曲目循环类型，有 &apos;random&apos;, &apos;single&apos;, &apos;circulation&apos;, &apos;order&apos; (列表)， 默认：&apos;circulation&apos; </span><br><span class="line">&quot;showlrc&quot;: 3,         // （可选）歌词显示配置项，可选项有：1,2,3</span><br><span class="line">&quot;mutex&quot;: true,        // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class="line">&quot;theme&quot;: &quot;#e6d0b2&quot;,  // （可选）播放器风格色彩设置，默认：#b7daff</span><br><span class="line">&quot;preload&quot;: &quot;metadata&quot;,      // （可选）音乐文件预载入模式，可选项： &apos;none&apos; &apos;metadata&apos; &apos;auto&apos;, 默认: &apos;auto&apos;</span><br><span class="line">&quot;listmaxheight&quot;: &quot;513px&quot;,   // (可选) 该播放列表的最大长度</span><br><span class="line">&quot;music&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;title&quot;: &quot;CoCo&quot;,</span><br><span class="line">&quot;author&quot;: &quot;Jeff Williams&quot;,</span><br><span class="line">&quot;url&quot;: &quot;caffeine.mp3&quot;,</span><br><span class="line">&quot;pic&quot;: &quot;caffeine.jpeg&quot;,</span><br><span class="line">&quot;lrc&quot;: &quot;caffeine.txt&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;title&quot;: &quot;アイロニ&quot;,</span><br><span class="line">&quot;author&quot;: &quot;鹿乃&quot;,</span><br><span class="line">&quot;url&quot;: &quot;irony.mp3&quot;,</span><br><span class="line">&quot;pic&quot;: &quot;irony.jpg&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure><h4 id="MeingJS-支持-3-0-新功能"><a href="#MeingJS-支持-3-0-新功能" class="headerlink" title="MeingJS 支持 (3.0 新功能)"></a>MeingJS 支持 (3.0 新功能)</h4><ul><li><p>MetingJS 是基于Meting API的APlayer衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、<br>百度等平台的音乐播放;</p></li><li><p>如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 _config.yml 中设置：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  meting: true</span><br></pre></td></tr></table></figure></li><li><p>接着就可以通过     <div id="aplayer-aVVDuMik" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="..." data-server="undefined" data-type="undefined" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div> 在文章中使用 MetingJS 播放器了(开启后似乎不能使用第一种方式):</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 简单示例 (id, server, type)  --&gt;</span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 进阶示例 --&gt;</span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure></li><li><p>有关     <div id="aplayer-uLFIYCtJ" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="undefined" data-server="undefined" data-type="undefined" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div> 的选项列表如下:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">id必须值歌曲 id / 播放列表 id / 相册 id / 搜索关键字</span><br><span class="line">server必须值音乐平台: netease, tencent, kugou, xiami, baidu</span><br><span class="line">type必须值song, playlist, album, search, artist</span><br><span class="line">fixedfalse开启固定模式</span><br><span class="line">minifalse开启迷你模式</span><br><span class="line">loopall列表循环模式：all, one,none</span><br><span class="line">orderlist列表播放模式： list, random</span><br><span class="line">volume0.7播放器音量</span><br><span class="line">lrctype0歌词格式类型</span><br><span class="line">listfoldedfalse指定音乐播放列表是否折叠</span><br><span class="line">storagenamemetingjsLocalStorage 中存储播放器设定的键名</span><br><span class="line">autoplaytrue自动播放，移动端浏览器暂时不支持此功能</span><br><span class="line">mutextrue该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class="line">listmaxheight340px播放列表的最大长度</span><br><span class="line">preloadauto音乐文件预载入模式，可选项： none, metadata, auto</span><br><span class="line">theme#ad7a86播放器风格色彩设置</span><br></pre></td></tr></table></figure></li></ul><h3 id="hexo-tag-dplayer插件-好像不太好用"><a href="#hexo-tag-dplayer插件-好像不太好用" class="headerlink" title="hexo-tag-dplayer插件(好像不太好用)"></a>hexo-tag-dplayer插件(好像不太好用)</h3><ul><li><p>官网地址：<a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer</a>;</p></li><li><p>安装命令：<code>npm install hexo-tag-dplayer --save</code>;</p></li><li><p>语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer key=value ... %&#125;</span><br></pre></td></tr></table></figure></li><li><p>语法参数说明：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">常用选项：url、loop、volume、autoplay、hotkey、logo、mutex、highlight、preload、theme;</span><br><span class="line"></span><br><span class="line">autoplayfalse视频自动播放;</span><br><span class="line">theme&apos;#b7daff&apos;主题色;</span><br><span class="line">loopfalse视频循环播放;</span><br><span class="line">hotkeytrue开启热键，支持快进、快退、音量控制、播放暂停;</span><br><span class="line">preload&apos;auto&apos;视频预加载，可选值: &apos;none&apos;, &apos;metadata&apos;, &apos;auto&apos;;</span><br><span class="line">volume0.7默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效;</span><br><span class="line">logo-在左上角展示一个 logo，你可以通过 CSS 调整它的大小和位置;</span><br><span class="line">highlight[]自定义进度条提示点;</span><br><span class="line">mutextrue互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器;</span><br><span class="line"></span><br><span class="line">url-视频链接;</span><br><span class="line">pic-视频封面;</span><br><span class="line">thumbnails-视频缩略图;</span><br><span class="line"></span><br><span class="line">type&apos;webvtt&apos;字幕类型，可选值: &apos;webvtt&apos;, &apos;ass&apos;，目前只支持 webvtt;</span><br><span class="line">fontSize&apos;20px&apos;字幕字号;</span><br><span class="line">bottom&apos;40px&apos;字幕距离播放器底部的距离，取值形如: &apos;10px&apos; &apos;10%&apos;;</span><br><span class="line">color&apos;#fff&apos;字幕颜色;</span><br><span class="line"></span><br><span class="line">idrequired弹幕池id，必须唯一;</span><br><span class="line">apirequired见[弹幕接口](http://dplayer.js.org/zh/guide.html#%E5%BC%B9%E5%B9%95%E6%8E%A5%E5%8F%A3);</span><br><span class="line">addition-额外外挂弹幕,见[bilibili 弹幕](http://dplayer.js.org/zh/guide.html#bilibili-%E5%BC%B9%E5%B9%95);</span><br><span class="line">token-弹幕后端验证 token;</span><br><span class="line">maximum-弹幕最大数量;</span><br><span class="line">unlimitedfalse海量弹幕模式;</span><br><span class="line">user&apos;DIYgod&apos;弹幕用户名;</span><br><span class="line"></span><br><span class="line">其他参数请参考[dplayer](https://github.com/MoePlayer/DPlayer);</span><br></pre></td></tr></table></figure></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer &quot;url=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.mp4&quot; &quot;addition=https://dplayer.daoapp.io/bilibili?aid=4157142&quot; &quot;api=https://api.prprpr.me/dplayer/&quot; &quot;pic=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.jpg&quot; &quot;id=9E2E3368B56CDBB4&quot; &quot;loop=yes&quot; &quot;theme=#FADFA3&quot; &quot;autoplay=false&quot; &quot;token=tokendemo&quot; %&#125;</span><br></pre></td></tr></table></figure>    <div id="aplayer-EouocNCs" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="27789126" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"http://p0e6ktyto.bkt.clouddn.com/MSN%20%E6%9C%80%E5%90%8E%E7%9A%84%E4%B8%89%E9%87%8D%E5%A5%8F_%20%E7%BB%9D%E5%94%B12017_%E9%AB%98%E6%B8%85.mp4","pic":"https://i.imgur.com/n3YAGhq.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="https://jmzc4j.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Dos命令</title>
    <link href="https://jmzc4j.github.io/2019/08/29/Dos%E5%91%BD%E4%BB%A4/"/>
    <id>https://jmzc4j.github.io/2019/08/29/Dos命令/</id>
    <published>2019-08-29T09:57:50.000Z</published>
    <updated>2019-08-29T10:02:04.683Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="dos-下查看端口"><a href="#dos-下查看端口" class="headerlink" title="dos 下查看端口"></a>dos 下查看端口</h3><ul><li><code>netstat -ano | findstr 4000</code>：查看4000端口详细信息;</li><li><code>tasklist | findstr 6068</code>：在任务列表中找到对应PID为6068的进程;</li><li><code>taskkill /F /PID 6068</code>：强制杀死6068进程;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="dos" scheme="https://jmzc4j.github.io/tags/dos/"/>
    
  </entry>
  
  <entry>
    <title>Linux之Shell初识</title>
    <link href="https://jmzc4j.github.io/2019/08/29/Linux%E4%B9%8BShell%E5%88%9D%E8%AF%86/"/>
    <id>https://jmzc4j.github.io/2019/08/29/Linux之Shell初识/</id>
    <published>2019-08-29T06:32:27.000Z</published>
    <updated>2019-08-29T06:33:16.936Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Shell概述"><a href="#Shell概述" class="headerlink" title="Shell概述"></a>Shell概述</h3><blockquote><p>Shell是一个命令解释器，为用户提供一个向内核发送请求的界面；同时它还是解释执行的脚本语言。</p></blockquote><blockquote><p>Shell分为两大类，B家族Shell和C家族Shell，可以在/etc/shells中查看系统支持哪些Shell。</p></blockquote><h3 id="Shell语言"><a href="#Shell语言" class="headerlink" title="Shell语言"></a>Shell语言</h3><h5 id="编写和执行"><a href="#编写和执行" class="headerlink" title="编写和执行"></a>编写和执行</h5><blockquote><p>脚本文件通常以”.sh”后缀标记，脚本的开头要标注Shell类型”#!/bin/bash”。</p></blockquote><blockquote><p>执行方式：赋予执行权限，也可以使用“bash xxx.sh”或者“sh xxx.sh”的方式执行。</p></blockquote><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><blockquote><p>单行注释“#”和多行注释“:!&lt;&lt;…!”</p></blockquote><h5 id="多命令的执行顺序"><a href="#多命令的执行顺序" class="headerlink" title="多命令的执行顺序"></a>多命令的执行顺序</h5><blockquote><p>“;”：使用分号连接多个命令，这些命令间没有关系，不管前面的命令是否正确执行后面的都会执行。</p></blockquote><blockquote><p>“&amp;&amp;”：使用逻辑与连接多个命令，只有前面的命令正确执行后面才执行。</p></blockquote><blockquote><p>“||”：使用逻辑或连接多个命令，只有前面的命令不正确后面才执行。</p></blockquote><h5 id="Shell中变量"><a href="#Shell中变量" class="headerlink" title="Shell中变量"></a>Shell中变量</h5><blockquote><p><code>set</code>：可以查看所有变量包括环境变量；<code>env</code>：可以查看所有环境变量。<br><code>unset 变量名</code>：可以销毁一个变量；<code>$变量名</code>：可以使用一个变量。<br><code>$(命令)</code>：可以将命令的结果当做变量的值。或者使用反引号也可以。   </p></blockquote><blockquote><p>自定义变量</p></blockquote><ul><li>格式：变量=值 （注意：等号两边没有空格）。</li><li>使用readonly关键字声明静态变量，此时该变量不能被销毁。</li><li><code>export 自定义变量</code>：可以将自定义变量提升为系统变量。</li></ul><blockquote><p>系统变量（环境变量）</p></blockquote><ul><li>系统变量名一般大写。</li><li><code>source</code>或者<code>.</code> 可以重新加载配置文件。</li></ul><blockquote><p>位置参数变量</p></blockquote><ul><li>用来接受命令中的相应位置的参数。</li><li><code>$n</code>：$0表示这条命令本身，$1-$9、$(10)、$(11)…表示第n个参数。</li><li><code>$*</code>：表示所有的参数，将所有参数作为一个整个。</li><li><code>$@</code>：也表示所有参数，将所有参数分别对待，常用在循环中。</li><li><code>$#</code>：表示所有参数的个数。</li></ul><blockquote><p>预定义变量</p></blockquote><ul><li><code>$$</code>：表示当前进程的PID。</li><li><code>$!</code>：表示后台进程中的最后一个进程的PID。</li><li><code>$?</code>：表示一个命令的执行状态，0表示正确执行。</li></ul><h5 id="键盘输入"><a href="#键盘输入" class="headerlink" title="键盘输入"></a>键盘输入</h5><blockquote><p><code>read [选项] [变量]</code><br>常用选项</p></blockquote><ul><li>-t：该命令的等待时间，单位是秒。</li><li>-p：给出提示信息。</li><li>-s：隐藏输入数据。</li><li>read -s -t 30 -p “请输入你的年龄：” age   </li></ul><h5 id="提取命令"><a href="#提取命令" class="headerlink" title="提取命令"></a>提取命令</h5><blockquote><p><code>cut -d 分隔符 -f 指定列</code> ：按指定分隔符提取指定列，通常和grep配合使用。</p></blockquote><ul><li>cat /etc/passwd | grep /bin/bash | grep -v root | cut -d “:” -f 1</li></ul><blockquote><p><code>awk &#39;条件1{动作1} 条件2{动作2}...&#39; 文件</code></p></blockquote><ul><li>还是不太懂！！！</li></ul><h5 id="sed命令（流编辑器）"><a href="#sed命令（流编辑器）" class="headerlink" title="sed命令（流编辑器）"></a>sed命令（流编辑器）</h5><blockquote><p>比vi更强大，用的不多，可以对管道符的结果进行编辑。</p></blockquote><ul><li><code>sed [选项] &#39;动作&#39; 文件</code></li><li>还是不懂！！！</li></ul><h5 id="排序命令和统计命令"><a href="#排序命令和统计命令" class="headerlink" title="排序命令和统计命令"></a>排序命令和统计命令</h5><blockquote><p><code>sort</code>与<code>wc</code></p></blockquote><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><blockquote><p><code>$((运算式))</code>或者<code>$[运算式]</code>：可以使用这样的方式取得运算式的值。</p></blockquote><h5 id="判断符"><a href="#判断符" class="headerlink" title="判断符"></a>判断符</h5><blockquote><p><code>[ 判断式 ]</code>；注意中括号与判断式中有空格。</p></blockquote><blockquote><p>文件比较</p></blockquote><ul><li><code>A -oq B</code>和<code>A -nq B</code>：判断文件A的修改时间是不是比B旧或者新。</li><li><code>-e</code>、<code>-d</code>、<code>-f</code>：判断文件是否存在，存在并且是目录、存在并且是文件。</li><li><code>A -ef B</code>：判断A文件与B文件的inode是否一致。</li></ul><blockquote><p>数值比较</p></blockquote><ul><li><code>-eq</code>、<code>-gt</code>、<code>-lt</code>、<code>ge</code>、<code>le</code>、<code>ne</code>。</li></ul><blockquote><p>字符串比较</p></blockquote><ul><li><code>str1==str2</code>或者<code>str1 = str2</code>：判断字符串相等，注意等号的空格。</li><li><code>-n</code>或者<code>-z</code>：判断是否是空串，前者非空返回真，后者空返回真。</li><li><code>str1!=str2</code>：不等判断。</li></ul><h5 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h5><blockquote><p>if结构</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件 ];then</span><br><span class="line">  程序片段</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件 ]</span><br><span class="line">  then</span><br><span class="line">    程序片段</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件 ]</span><br><span class="line">  then</span><br><span class="line">    程序片段</span><br><span class="line">  elif [ 条件 ]</span><br><span class="line">    then</span><br><span class="line">      程序片段</span><br><span class="line">  else</span><br><span class="line">    程序片段</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><p>case结构</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">case $变量名 in</span><br><span class="line">&quot;值1&quot;)</span><br><span class="line"> 等于值1的代码</span><br><span class="line">;;</span><br><span class="line">&quot;值2&quot;)</span><br><span class="line"> 等于值2的代码</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"> 不匹配的代码</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><blockquote><p>for结构</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 值1 值2 值3 ...</span><br><span class="line">do</span><br><span class="line">  程序片段</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for((初始值;条件;增量))</span><br><span class="line">do</span><br><span class="line">  程序片段</span><br><span class="line">done</span><br></pre></td></tr></table></figure><blockquote><p>while结结构</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ 条件式 ]</span><br><span class="line">do</span><br><span class="line"> 程序片段</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><blockquote><p>系统函数<br>basename [filepath] [suffix] ：取得filepath路径中的文件名并排除suffix后缀</p></blockquote><ul><li>basename /home/aaa/bbb.txt .txt   结果是bbb</li><li>basename /home/aaa/bbb.text    结果是bbb.txt</li></ul><blockquote><p>dirname [filepath] :取得filepath路径的目录部分</p></blockquote><ul><li>dirname /home/aaa/bbb.txt    结果是/home/aaa</li></ul><blockquote><p>自定义函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[function] functionname()&#123;  </span><br><span class="line"> 函数体  </span><br><span class="line"> [return xxx]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><blockquote><p>要求<br>    1. 每天凌晨2：10备份数据库mydb到/data/backup/db<br>    2. 备份开始和结束要有提示信息<br>    3. 备份后的文件以备份时间作为文件名，并打包*.tar.gz<br>    4. 备份的同时检查有10天前的备份，如果有删除</p></blockquote><blockquote><p>代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash     </span><br><span class="line"></span><br><span class="line">#定义备份目录</span><br><span class="line">BACKUP=/data/backup/db</span><br><span class="line">#获取当前系统时间</span><br><span class="line">NOWDATE=$(date +%Y_%m_%d_%H%M%S)</span><br><span class="line">#定义数据库的主机名</span><br><span class="line">DBHOST=192.168.238.133</span><br><span class="line">#定义数据库的端口</span><br><span class="line">DBPORT=3306</span><br><span class="line">#定义数据库的用户名</span><br><span class="line">DBUSER=root</span><br><span class="line">#定义数据库的密码</span><br><span class="line">DBPWD=root</span><br><span class="line">#定义要备份的数据库</span><br><span class="line">DBNAME=mydb</span><br><span class="line"></span><br><span class="line">echo &quot;=====开始备份=====&quot;</span><br><span class="line">#确保备份路径存在,路径不存在或者不是目录就创建一个目录</span><br><span class="line">if [ ! -d &quot;$DACKUP/$NOWDATE&quot; ]</span><br><span class="line">then</span><br><span class="line">  mkdir -p &quot;$DACKUP/$NOWDATE&quot;</span><br><span class="line">  echo &quot;备份文件绝对路径为 $DACKUP/$NOWDATE.tar.gz&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#进行mysql数据库的冷备份,比正常备份多了一个压缩（即 | gzip部分且不能直接使用tar）</span><br><span class="line">mysqldump -h$DBHOST -P$DBPORT -u$DBUSER -p$DBPWD $DBNAME | gzip &gt;  $DACKUP/$NOWDATE/$NOWDATE.sql.gz</span><br><span class="line">#切换到备份目录</span><br><span class="line">cd $DACKUP</span><br><span class="line">#进行打包操作</span><br><span class="line">tar -zcvf $NOWDATE.tar.gz  $NOWDATE</span><br><span class="line">#删除临时的目录</span><br><span class="line">rm -rf ./$NOWDATE</span><br><span class="line"></span><br><span class="line">#找到备份目录下最后修改时间大于10天并且以.tar.gz结尾的文件进行删除</span><br><span class="line">find $DACKUP -mtime +10 -a -name &quot;*.tar.gz&quot; -exec rm -rf &#123;&#125; \;</span><br><span class="line">echo &quot;=====备份完毕=====&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://jmzc4j.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令</title>
    <link href="https://jmzc4j.github.io/2019/08/29/Linux%E5%91%BD%E4%BB%A4/"/>
    <id>https://jmzc4j.github.io/2019/08/29/Linux命令/</id>
    <published>2019-08-29T06:32:09.000Z</published>
    <updated>2019-08-29T06:34:51.936Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><blockquote><p>命令名 [选项] [参数]</p></blockquote><ul><li>中括号“[]”代表可选。</li><li>选项可以使以减号“-”开头的缩写，还可以是以双减号“–”开头的英文全称，可以多个选项联合使用。</li><li>参数可以使0个、1个、多个。</li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h5 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h5><blockquote><p><code>man 命令名</code>：用来查看指定命令名的帮助，该命令也可以查看配置文件的帮助。</p></blockquote><blockquote><p><code>命令名 --help</code>：用来查看命令选项的帮助。</p></blockquote><blockquote><p><code>whereis 命令名</code>：可以查找命令的所在目录及该命令帮助的所在目录。</p></blockquote><h5 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h5><blockquote><p><code>ctrl+l</code>或者<code>clear</code>：清屏。<br><code>ctrl+u</code>和<code>ctrl+y</code>：剪切和粘贴命令</p></blockquote><h5 id="vi-vim编辑器"><a href="#vi-vim编辑器" class="headerlink" title="vi/vim编辑器"></a>vi/vim编辑器</h5><blockquote><p><code>vi 文件</code>：创建或打开一个文件。</p></blockquote><blockquote><p>命令行模式（一般模式）：使用vi刚刚打开文件的模式。<br>常用命令</p></blockquote><ul><li><code>gg</code>、<code>G</code>、<code>nG</code>、<code>0</code>、<code>$</code>：移动光标都第一行、最后一行、第n行、当前行行首、当前行行尾。</li><li><code>x</code>、<code>D</code>、<code>dd</code>、<code>ndd</code>、<code>dG</code>：删除当前光标处、剪切光标到行尾、当前行、当前行开始的n行、当前行到最后一行的内容。</li><li><code>yy</code>、<code>nyy</code>、<code>p</code>、<code>P</code>、<code>r</code>、<code>R</code>、：复制当前行、当前行开始的n行、粘贴到光标下一行、上一行、替换当前光标的字符、光标出开始替换直到ESC结束。</li><li><code>u</code>：撤销上一次操作。</li><li><code>ZZ</code>：退出vi。</li></ul><blockquote><p>插入模式（编辑模式）：从命令行模式输入<code>aioAIO</code>中任意一个进入的模式，使用<code>ESC</code>退出。</p></blockquote><blockquote><p>底行模式（冒号模式）：从命令行模式输入<code>:</code>进入模式。<br>常用命令</p></blockquote><ul><li><code>set nu(set nonu)</code>：设置显示或取消行号。</li><li><code>linenumber</code>：移动光标到指定的linenumber行。</li><li><code>/keyword（？keyword）</code>：按关键词从光标处向下查找或向上查找。</li><li><code>set ic(set noic)</code>：设置忽略或区分大小写。</li><li><code>n1,n2d</code>：删除n1行到n2行之间的内容。</li><li><code>%s/old/new/g</code>：使用新串全文替换旧串。</li><li><code>n1,n2s/old/new/g</code>：使用新串在指定行间进行替换旧串。</li><li><code>w</code>、<code>w 目录</code>、<code>wq</code>、<code>q!</code>、<code>wq!</code>：保存、另存、保存退出、不保存退出、强制保存退出。</li></ul><blockquote><p>小技巧</p></blockquote><ul><li><code>:map 快捷键 操作</code>：自定义快捷键，如 :map ^p I#<esc> 。</esc></li><li><code>:ab 缩写 原意</code>：为全称定义一个缩写名字，然后使用缩写名字+空格即可完成全名的输入。</li><li><code>~/.vimrc</code>：可以在此文件中定义底行模式的命令使其永久生效。</li></ul><h5 id="定义别名"><a href="#定义别名" class="headerlink" title="定义别名"></a>定义别名</h5><ul><li><code>alias 别名 命令</code>：为命令定义一个临时别名。</li><li><code>~/.bashrc</code>：编辑该文件可以永久定义别名。</li></ul><h5 id="目录与文件命令"><a href="#目录与文件命令" class="headerlink" title="目录与文件命令"></a>目录与文件命令</h5><blockquote><p><code>ls [选项] [目录或者文件]</code>：查看目录或文件的内容或属性。<br>常用选项-alh</p></blockquote><ul><li>-a：显示隐藏文件。</li><li>-l：长列表显示。</li><li>-h：人性化显示。</li><li>-i：显示i节点信息。</li><li>可以使用通配符(*、?)或者正则匹配([]、[-]、[^]…)。</li></ul><blockquote><p><code>tree [目录]</code>：列出指定目录的树状结构并统计目录和文件数量。</p></blockquote><blockquote><p><code>pwd</code>；查看当前工作目录的绝对路径。</p></blockquote><blockquote><p><code>cd [目录]</code>：切换目录。   </p></blockquote><ul><li>cd ~或者cd：切换到家目录。</li><li>cd ..：切换到上一级目录。</li></ul><blockquote><p><code>mkdir [选项] 目录</code>：创建目录。<br>常用选项-pm</p></blockquote><ul><li>-p：创建多级目录。</li><li>-m: 使用数字表示法指定目录的权限。</li></ul><blockquote><p><code>cp [选项] 目录或文件 目标目录</code>：复制目录或文件到已存在的目标目录或。<br>常用选项-ri</p></blockquote><ul><li>-r：递归复制目录内容。</li><li>-i：如果遇到同名文件会提示是否覆盖。</li></ul><blockquote><p><code>mv [选项] 目录或文件 目标目录</code>：剪切目录或文件到已存在的目标目录或者执行改名操作。<br>常用选项-if</p></blockquote><ul><li>-f：如果遇到同名文件不会提示是否覆盖。</li><li>-i：–interactive。如果遇到同名文件会提示是否覆盖.</li></ul><blockquote><p><code>rm [选项] 目录或者文件</code>：删除一个目录或者文件。<br>常用选项-rf</p></blockquote><ul><li>-r：递归删除目录及目录下的所有内容。</li><li>-f：–force，不在有提示信息强制删除。</li></ul><blockquote><p><code>touch 文件</code>：创建一个新的空白文件或者是更新一下已存在文件的修改时间。</p></blockquote><blockquote><p><code>ln -s 目录或文件 软链接文件</code>：为一个文件或目录创建一个软链接，类似于快捷方式，软连接文件的权限是777.</p></blockquote><h5 id="查看文件内容命令"><a href="#查看文件内容命令" class="headerlink" title="查看文件内容命令"></a>查看文件内容命令</h5><blockquote><p><code>cat [选项] 文件</code>：使用与浏览内容较少的文件。<br>常用选项-bn</p></blockquote><ul><li>-b：–number-nonblank，行号只标记有效行(即非空白行)。</li><li>-n：–number，带行号显示，不挑剔。</li></ul><blockquote><p><code>more 文件</code>：可以分页查看文件内容。<br>辅助命令f、b、enter、q</p></blockquote><ul><li>b：上一页。</li><li>f：下一页，也可以使用空格键。</li><li>enter：下一行。</li><li>q：退出。</li></ul><blockquote><p><code>less [选项] 文件</code>：同样是分页查看文件内容，但是可以带行号，还能搜索。<br>常用选项MN</p></blockquote><ul><li>-M：使用后类似于more的百分比。</li><li>-N：带行号显示。</li><li>辅助命令同more，可以使用“/keyword”进行搜索。</li></ul><blockquote><p><code>head [-n 数字] 文件</code>；显示到指定行号的文件内容，默认显示前10行。</p></blockquote><blockquote><p><code>tail [选项] 文件</code>；从尾部开始显示文件内容，默认显示后10行。<br>常用选项-nf</p></blockquote><ul><li>-n 数字：显示指定的后几行。</li><li>-f：–follow，跟踪显示文件的变化，常用来查看日志。</li></ul><h5 id="输出重定向与管道命令、历史命令"><a href="#输出重定向与管道命令、历史命令" class="headerlink" title="输出重定向与管道命令、历史命令"></a>输出重定向与管道命令、历史命令</h5><blockquote><p><code>&gt; 文件</code>:将一个到终端的输出重定向到文件中，即向文件中覆盖内容。<br><code>&gt;&gt; 文件</code>：同样是重定向到终端的输出，追加到文件的末尾。<br><code>&amp;&gt;&gt; 文件</code>：将错误和正确结果都追加到文件末尾。</p></blockquote><blockquote><p><code>命令A | 命令B</code>：将命令A的输出结果通过管道符作为命令B的输入参数，可以通过管道符“|”执行多个命令。</p></blockquote><blockquote><p><code>ehco 字符串</code>：输入指定内容到终端，相当于编程语言中的打印。</p></blockquote><blockquote><p><code>history [数量]</code>：可以查看历史命令列表或者查看指定数量的历史命令列表，之后可以使用“!历史命令编号”来执行指定命令。<br><code>~/.bash_history</code>：历史命令保存在该文件中，默认保存上限可以在profile中修改。</p></blockquote><h5 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h5><blockquote><p><code>find 目录 搜索条件</code>：在指定目录范围内根据指定条件查找指定的内容。<br>常用选项</p></blockquote><ul><li>-name：按名称查找，可以使用通配符或者正则。</li><li>-size：按大小查找，如-size +200K（大于200K的）、size -10M（小于10M的）。</li><li>-user：按用户名查找。</li><li>-type：按文件类型查找。如-type “d”、-type “-“。</li><li>-mtime：按文件的最后修改时间查找，该时间单位是天，如-mtime +10（最后修改时间距现在10天以上的）。</li><li>可以使用“-a”或者“-o”进行条件的拼接，前者表示and，后者表示or。</li><li>可以使用“-exec”选项来对查找的结果进行处理，如find /etc -name init -exec ls -l <code>{} \;</code>,着重部分是固定格式。</li></ul><blockquote><p><code>locate [-i] 要查找的内容</code>：快速查找或者忽略大小写查找。<br>说明</p></blockquote><ul><li>可能系统为安装该命令，需要执行yum -y install mlocate。</li><li>每次使用前最好执行updatedb命令更新locate检索库。</li></ul><blockquote><p><code>grep [选项] 字串 文件或者是命令的输出结果</code>：从指定的文件或者一个命令输出结果中过滤查找需要的内容。<br>常用选项-ivn</p></blockquote><ul><li>-i：忽略大小写查找。</li><li>-v：排除指定字串查找。</li><li>-n:查找结果带行号显示。</li><li>字串可以使用通配符或者正则，如*、？、^、$。</li></ul><h5 id="时间日期命令"><a href="#时间日期命令" class="headerlink" title="时间日期命令"></a>时间日期命令</h5><blockquote><p><code>date [-s] [+时间格式</code>：按指定格式设置或显示系统时间。<br>格式说明：%Y表示年份、%m表示月份、%d表示天、%H表示0-23的小时、%M表示分钟、%S表示秒。</p></blockquote><blockquote><p><code>cal [年份]</code>：查看当前时间的日历或者查看指定年份的日历。</p></blockquote><blockquote><p><code>ntpq -p</code>：与NTP服务器进行时间同步，CentOS7请使用<code>chronyc sources</code>命令。</p></blockquote><blockquote><p><code>/etc/sysconfig/clock</code>：配置时区，CentOS7使用<code>tiemdatectl set-timezone Asia/Shanghai</code>命令。</p></blockquote><blockquote><p><code>/etc/sysconfig/i18n</code>：配置语言环境，CentOS7使用<code>localectl set-locale LANG=zh_CN.UTF-8</code>命令。</p></blockquote><h5 id="文件压缩和解压缩命令"><a href="#文件压缩和解压缩命令" class="headerlink" title="文件压缩和解压缩命令"></a>文件压缩和解压缩命令</h5><blockquote><p><code>gzip 文件</code>和<code>gunzip 文件</code>：以gzip格式压缩和解压文件，只能压缩文件且不会保留原文件。</p></blockquote><blockquote><p><code>zip [-r] 文件或目录 压缩后的文件 要压缩的文件</code>：以zip格式压缩目录或文件。<br><code>unzip [-d 目录] 要解压的文件</code>：以zip格式解压文件到当前目录或指定目录。</p></blockquote><blockquote><p><code>tar [-zcvf] 要压缩打包的目录或文件</code>：以gzip压缩并使用tar进行打包指定文件。<br><code>tar [-zxvf] 要解压的文件 [-C 目标目录]</code>：解压.tar.bz2文件到当前目录或指定的已存在的目录。</p></blockquote><blockquote><p><code>tar [-jcvf] 要压缩打包的目录或文件</code>：以bzip2压缩并打包指定文件。<br><code>tar [-jxvf] 要解压的文件 [-C 目标目录]</code>：解压.tar.bz2文件到当前目录或指定目录。</p></blockquote><h5 id="网络与服务命令"><a href="#网络与服务命令" class="headerlink" title="网络与服务命令"></a>网络与服务命令</h5><blockquote><p><code>ipconfig</code>或者<code>ip addr</code>：查看网卡信息，后者是CentOS7上或者Ubuntu18上使用。</p></blockquote><blockquote><p><code>ping IP地址</code>：测试与目标IP地址的连通性。</p></blockquote><blockquote><p><code>netstat -rn</code>：可以查看路由列表。<br><code>netstat -tulnp</code>或者<code>netstat -anp</code>：查看进程的网络连接状态。<br>选项说明：r表示路由、n表示IP地址和端口号、t表示tcp连接、u表示udp连接、l表示监听状态、p表示PID和应用、a表示全部。</p></blockquote><blockquote><p>如何配置静态IP地址</p></blockquote><ul><li>CentOS中配置方式：修改 /etc/sysconfig/network-scripts/ifcfg-eth0(或者ens33)配置文件，修改内容类似下面。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 修改部分</span><br><span class="line">BOOTPROTO=&quot;static&quot; # 设置使用静态IP协议</span><br><span class="line">ONBOOT=&quot;yes&quot;  # 设置开机启动网络服务</span><br><span class="line"># 添加部分</span><br><span class="line">DNS1=&quot;114.114.114.114&quot; #设置DNS1</span><br><span class="line">DNS2=&quot;8.8.8.8&quot;</span><br><span class="line">GATEWAY=&quot;192.168.124.2&quot; # 设置网关</span><br><span class="line">IPADDR=&quot;192.168.124.124&quot;  # 设置IP地址</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;  # 设置子网掩码</span><br><span class="line"></span><br><span class="line"># 重启网络服务CentOS6.x：network，CentOS7.x:NetworkManager</span><br></pre></td></tr></table></figure><ul><li>Ubuntu18中配置方式：修改/etc/netplan/01-network-manager-all.yaml配置文件，修改内容类似下面。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">　version: 2</span><br><span class="line">    renderer: NetworkManager</span><br><span class="line">    ethernets:</span><br><span class="line">　　ens33:</span><br><span class="line">　　dhcp4: no #关闭动态主机配置协议</span><br><span class="line">　　addresses: [192.168.124.125/24] #设置IP地址，24表示24位的子网掩码(即255.255.255.0)</span><br><span class="line">　　gateway4: 192.168.124.2 #设置网关</span><br><span class="line">　　nameservers:</span><br><span class="line">　　　　addresses: [8.8.8.8, 114.114.114.114] #设置DNS</span><br><span class="line"></span><br><span class="line"># Ubuntu18中重启方式：sudo netplan apply</span><br></pre></td></tr></table></figure><p>-</p><blockquote><p><code>ls /etc/init.d</code>：可以系统中通过rpm安装的独立服务列表。</p></blockquote><blockquote><p>服务管理</p></blockquote><ul><li><code>/etc/init.d/服务名 stop|start|restart|status</code>:对某个服务停止、启动、重启，查看状态。</li><li><code>service 服务名 stop|start|restart|status</code>。</li><li><code>systemctl stop|start|restart|reload|status 服务名</code>。（CentOS7的管理方式）</li><li><code>service --status-all</code>；查看所有的服务状态。CentIS7使用<code>systemctl list-units</code>。</li></ul><blockquote><p>自启动管理</p></blockquote><ul><li><code>chkconfig --list [| grep xxx]</code> : 查看所有服务或者具体服务在各个运行级别的状态。    </li><li><code>chkconfig [--level runlevel] 服务名 on/off</code>：设置服务在所有级别或指定级别的开启自启与关闭。   </li><li><code>systemctl enable/disable xxx.service</code>：同样可以设置开机自启与关闭，使用于CentOS7.</li><li><code>systemctl list-unit-files</code>：查看所有的自启动状态。</li></ul><blockquote><p>防火墙管理</p></blockquote><ul><li><code>/etc/init.d/iptables</code>：配置该文件可放开端口。</li><li><code>firewall-cmd --zone=public [--remove-port|--query-port|--add-port]=80/tcp --permanent</code>：CentOS7的方式。</li><li><code>firewall-cmd --reload</code>：重启防火墙。</li><li><code>firewall-cmd --zone=public --list-ports</code>：查看防火墙列表。</li></ul><h5 id="系统运行级别管理命令"><a href="#系统运行级别管理命令" class="headerlink" title="系统运行级别管理命令"></a>系统运行级别管理命令</h5><blockquote><p>系统运行级别分为六大类（括号内的表示在CentOS7中的标识）。</p></blockquote><ul><li>0：表示关机。 （poweroff.target）。</li><li>1：表示单用户模式 （emergency.target）。</li><li>2：表示多用户无网络模式 （rescure.target）。</li><li>3：表示多用户有网络模式 （multi-user.target）。</li><li>4：表示保留级别，未被使用。（无）</li><li>5：表示图形界面模式 （graphical.target）。</li><li>6：表示重启 （reboot.target）。</li><li>CentOS7中的这些名称可以通过<code>ll /lib/systemd/system/runlevel*</code>查到。</li></ul><blockquote><p><code>runlevel</code>：能够查看系统之前和当前的运行级别。<br><code>vi /etc/inittab</code>；通过该配置文件也可以查到系统运行级别。<br><code>systemctl get-default</code>；在CentOS7中可以通过该命令查看当前运行级别。</p></blockquote><blockquote><p><code>init 级别ID</code>；可以切换运行级别。<br><code>vi /etc/inittab</code>：在该文件中配置默认运行级别。<br><code>systemctl set-default xxx.target</code>：CentOS7的配置默认运行级别的方式。</p></blockquote><h5 id="进程管理命令"><a href="#进程管理命令" class="headerlink" title="进程管理命令"></a>进程管理命令</h5><blockquote><p><code>ps aux</code>与<code>ps au</code>：查看当前系统进程的详细信息，一般使用后者即可，表示只显示终端上的进程。<br><code>ps -ef</code>：同样能查看当前系统进程信息，还能查到父进程的PID。<br><code>pstree [选项]</code>：查看系统进程树。<br>常用选项：</p></blockquote><ul><li>-p：查看指定PID的进程。</li><li>-u：查看指定用户名的进程。    </li></ul><blockquote><p><code>top</code>：动态实时的显示系统进程并排序，还可以监控系统的健康状态。</p></blockquote><blockquote><p><code>kill -1 PID</code>：重启指定PID的进程。<br><code>kill [-9] PID</code>：结束或强制结束指定PID的进程。<br><code>killall 进程名</code>：结束与指定进程相关的所有进程。<br><code>pkill</code> : 可以用来踢出指定终端的用户</p></blockquote><h5 id="用户和组管理命令"><a href="#用户和组管理命令" class="headerlink" title="用户和组管理命令"></a>用户和组管理命令</h5><blockquote><p>相关配置文件分别是<code>/etc/passwd</code>、<code>/etc/shadow</code>、<code>/etc/group</code>、<code>/etc/gshadow</code>。</p></blockquote><ul><li>/etc/passwd：分别表示用户名、标识口令、UID、初始GID、备注、家目录、登录Shell。</li><li>/etc/shadow：分别表示用户名、加密口令、最新修改日期、下次可修改间隔、有效期限、提前警告天数、过期可用天数、截止日期、保留。</li><li>/etc/group：分别表示组名称、标识口令、组ID、组用户列表。</li><li>/etc/gshadow：分别表示组名称、加密口令、组管理者列表、组用户列表。</li></ul><blockquote><p><code>useradd [选项] 用户名</code>：添加新用户。<br>常用选项</p></blockquote><ul><li>-g：添加到初始组，一个用户只能有一个初始组（也称之为主组）。</li><li>-G：添加到附加组，一个用户可以有多个附加组（也就是组配置文件中用户列表中所对应的组）。</li><li>-d：指定家目录的位置。</li><li>-u：指定UID，普通用户的UID都是500之后的数字，超级用户的UID是0。</li><li>-s：设置使用的登录shell类型</li><li>-r：–system ，创建一个系统账号，这样的账号不会再/home下创建家目录。</li><li>-m：–creat-home，设置要在/home下创建家目录。</li><li>-M：–no-create-home ，设置不创用户的家目录。</li></ul><blockquote><p><code>passwd 用户名</code>：为指定用户设置口令。</p></blockquote><blockquote><p><code>userdel [-r] 用户名</code>：删除指定用户或者同时删除家目录。<br><code>usermod [选项] 用户名</code>：可以修改用户信息，选项同新增用户选项。</p></blockquote><blockquote><p><code>id [用户名]</code>；查看用户的UID和GID信息。<br><code>who</code>或者<code>w</code>；查看所有登录用户的详细信息。<br><code>whoami</code>：查看当前用户名称。</p></blockquote><blockquote><p><code>su [-] 用户名</code>：切换到指定目录。<br>可以不用切换root用户，而使用<code>sudo</code>来管理系统。</p></blockquote><blockquote><p><code>groupadd 组名</code>、<code>groupdel 组名</code>、<code>groupmod 组名</code>。</p></blockquote><h5 id="文件权限管理命令"><a href="#文件权限管理命令" class="headerlink" title="文件权限管理命令"></a>文件权限管理命令</h5><blockquote><p>使用<code>ls -l</code>可以查看文件或目录的详细信息。     </p></blockquote><ul><li>这些信息分别表示文件类型和ugo权限、硬链接数(可访问方式的数量)、所有者、所属组、文件大小、最后修改时间、文件名（即basename）。</li><li>文件的rwx：表示可查看、修改文件内容、可执行该文件。</li><li>目录的rwx：表示可查看、在目录中创建目录文件或修改目录内容、可进入该目录。</li></ul><blockquote><p><code>chmod [-R] {[ugoa]+/-/=[rwx]} 目录或文件</code>：修改(添加、减少、设置)所有者或所属组或其他用户或所有用户对指定目录或文件的读写执行权限。<br><code>chmod [-R] [rwx=421] 目录或文件</code>：使用数字表示法设置目录或文件的权限，如chmod 755 temp.sh。</p></blockquote><blockquote><p><code>chown [-R] 用户名  目录或文件</code>：变更目录或文件的所有者为指定用户。<br><code>chgrp [-R] 组名 目录或文件</code>： 变变目录或文件的所属组为指定组。<br><code>chown [-R] 用户名:组名 目录或文件</code>：同时变更目录或文件的所有者和所属组。</p></blockquote><h5 id="磁盘管理命令"><a href="#磁盘管理命令" class="headerlink" title="磁盘管理命令"></a>磁盘管理命令</h5><blockquote><p><code>lsblk [-f]</code>：查看分区和挂载信息,-f,–fs。   使用<code>fdisk -l</code>也能查看。<br><code>df [-lha]</code>：查看整个磁盘的使用情况,-l,–local。<br><code>du [-ach --max-depth=0开始的数字]  [目录或文件]</code>：查看指定目录或目录所有内容的磁盘使用情况并统计，还能灵活的指定目深度。<br><code>du -sh 目录</code></p></blockquote><blockquote><p><code>mount</code>：查看系统中挂载哪些分区。<br><code>mount /dev/sr0 /mnt/cdrom</code>：挂载光驱设备到/mnt/cdrom。<br><code>mount -t vfat /dev/sdb1 /mnt/usb</code>：挂载一个fat32格式的U盘，U盘的设备名称也是以“sd”开头的。<br>Linux默认不支持NTFS格式的U盘，需要安装ntfs-3g软件包才能正常使用。    </p></blockquote><blockquote><p>如何为系统添加一块新硬盘(以第二块硬盘sdb为例)。</p></blockquote><ul><li>分区分为MBR(主引导记录)和GPT(GUID分区表)两大类，前者主分区最多4个，支持硬盘容量有限；后者主分区无上限，支持容量达18EB，可能受操作系统限制。</li><li>对于SCSI(小型机系统接口)或SATA(串行高级技术附件)硬盘在Linux文件系统中都是保存在/dev下的以’sd’开头的目录中。</li><li>准备好要添加的硬盘。</li><li><code>fdisk /dev/sdb</code>：为sdb硬盘进行分区。</li><li><code>mkfs /dev/sdb</code>：格式化sdb硬盘，根据提示进行，格式化进行将文件系统写入硬盘。</li><li><code>mkdir /mnt/newdisk</code>：创建挂载点。</li><li><code>mount /dev/sdb /mnt/newdisk</code>：执行临时挂载操作，当然也可通过<code>unount</code>进行卸载。</li><li><code>vi /etc/fstab</code>：修改配置文件以便使挂载永久生效。</li><li><code>mount -a</code>：根据/etc/fstab的配置重新进行挂载。</li></ul><h5 id="定时调度命令"><a href="#定时调度命令" class="headerlink" title="定时调度命令"></a>定时调度命令</h5><blockquote><p><code>crontab -e</code>：打开定时调度配置文件进行编辑</p></blockquote><ul><li>从左到右五个时间符号分别表示：分钟、小时、日、月、星期。</li><li>“*”表示任意时间，“*/n”表示每隔多长时间，“-”表示一段时间，“，”表示几个时间点。    </li></ul><blockquote><p><code>crontab -l</code>：查看有定时任务列表。<br><code>crontab -r</code>：删除所有定时任务。</p></blockquote><h5 id="软件包管理命令"><a href="#软件包管理命令" class="headerlink" title="软件包管理命令"></a>软件包管理命令</h5><blockquote><p>rpm管理   </p></blockquote><ul><li><code>rpm -qa 包名</code>：查询指定rpm包的安装情况。   </li><li><code>rpm -ql 包名</code>:查询指定rpm包的安装位置。    </li><li><code>rpm -qR 包名</code>:查询指定rpm包的依赖信息。   </li><li><code>rpm -qf 目录</code>：查询指定目录下安装的rpm包列表。</li><li><code>rpm -ivh 包全名</code>；安装指定rpm包，显示安装详情和安装进度。</li><li><code>rpm -e [--nodeps] 包名</code>：卸载或者强制卸载指定rpm包。</li><li><code>rpm -Uvh 包名</code>：升级安装包。</li></ul><blockquote><p>yum管理</p></blockquote><ul><li><code>yum [-y] list</code>：查询安装列表。</li><li><code>yum [-y] install 包名</code>：安装。</li><li><code>yum [-y] remove 包名</code> ：卸载。</li><li><code>yum [-y] update 包名</code>：升级。</li><li><code>yum [-y] grouplist</code>：查询软件组列表。</li><li><code>yum [-y] groupinstall 软件组名</code>、<code>yum [-y] removegroup软件组名</code>。</li><li>可以更新yum源：位置在<code>/etc/yum.repos.d/</code>目录下。</li></ul><blockquote><p>Ubuntu apt管理</p></blockquote><ul><li><code>sudo apt-get update</code>：修改软件源之后可以使用该命令重新加载软件源。</li><li>源更新方式可以去tuna上找：<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/</a> 。</li><li><code>sudo apt-get install 包名</code>：安装包。</li><li><code>sudo apt-get remove 包名</code>：卸载包。</li><li><code>sudo apt-get upgrade 包名</code>：更新已安装的包。</li><li><code>sudo apt-cache show 包名</code>：获取包的相关信息。</li><li><code>sudo apt-get source 包名</code>：下载该包的源代码。</li></ul><h5 id="关机和重启命令"><a href="#关机和重启命令" class="headerlink" title="关机和重启命令"></a>关机和重启命令</h5><blockquote><p><code>shutdown -r time</code>：指定时间重启，默认是1分钟。<code>shutdown -r now</code>等价于<code>reboot</code>。<br><code>shutdown -h time</code> ：指定时间关机。<code>shutdown -h now</code>等价于<code>halt</code>。<br><code>shutdown -c</code>；取消上一个shutdown命令。<br><code>sync</code>：同步命令，同步数据到磁盘。</p></blockquote><h5 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h5><blockquote><p><code>hostname</code>：查看主机名。<br><code>uname -a</code>：查看内核版本详情。<br><code>/proc/cpuinfo</code>；查看cpu信息。<br><code>free -m</code>：以MB单位查看内存信息。<br><code>/etc/issue</code>：查看查看发行版本。   </p></blockquote><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><blockquote><p>windows上使用公私密钥对登录  </p></blockquote><ul><li>创建一组密钥对并保存好私钥。</li><li>将公钥内容导入到指定用户的家目录的.ssh目录下的authorized_keys文件中。</li><li>禁用密码登录 vi /etc/ssh/sshd_config 设置密码认证为no。</li><li>service sshd restart</li><li>禁用root登录：vi /etc/ssh/sshd_config -&gt; PermitRootLogin no</li><li>改掉ssh端口：vi /etc/ssh/sshd_config -&gt; Port=xxx</li></ul><blockquote><p>Linux上使用ssh</p></blockquote><ul><li>ssh -p username@IP</li><li>ssh-sshgen -t rsa -b 2048</li><li>ssh-copy-id username@IP</li></ul><h5 id="SCP"><a href="#SCP" class="headerlink" title="SCP"></a>SCP</h5><ul><li>scp -P user@服务器IP:绝对路径 客户机文件    </li></ul><h5 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h5><ul><li>sftp -oPort user@IP</li><li>使用help查看使用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://jmzc4j.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux概述</title>
    <link href="https://jmzc4j.github.io/2019/08/29/Linux%E6%A6%82%E8%BF%B0/"/>
    <id>https://jmzc4j.github.io/2019/08/29/Linux概述/</id>
    <published>2019-08-29T06:32:00.000Z</published>
    <updated>2019-08-29T06:34:01.161Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、科普知识"><a href="#一、科普知识" class="headerlink" title="一、科普知识"></a>一、科普知识</h3><h5 id="操作系统-operating-system"><a href="#操作系统-operating-system" class="headerlink" title="操作系统(operating system)"></a>操作系统(operating system)</h5><blockquote><p>操作系统就是一个可以直接操作硬件的特殊的软件，是具有如下作用的软件。</p></blockquote><ul><li><p>管理和操作硬件设备。</p></li><li><p>将对硬件的操作封装成一个又一个的系统调用供其他应用程序使用。</p><blockquote><p>针对应用领域的不同可以将操作系统分成桌面、服务器、嵌入式和移动设备四大类。</p></blockquote></li><li><p>桌面操作系统（desktop OS）：Windows、macOS、Linux。</p></li><li><p>服务器操作系统（server OS）：Linux、Windows Server。</p></li><li><p>嵌入式操作系统（embedded OS）：Linux。</p></li><li><p>移动设备操作系统（mobile OS）：IOS、Android。</p><blockquote><p>针对用户不同又分为单用户和多用户操作系统。</p></blockquote></li><li><p>单用户操作系统：一台计算机同一时间只能由一个用户使用，该用户独享全部的硬件和软件资源。</p></li><li><p>多用户操作系统：一台计算机同一时间只能由多个用户使用，多个用户共享全部的硬件和软件资源。</p></li></ul><h5 id="网卡-netcard-与IP地址-internet-protocol-address"><a href="#网卡-netcard-与IP地址-internet-protocol-address" class="headerlink" title="网卡(netcard)与IP地址(internet protocol address)"></a>网卡(netcard)与IP地址(internet protocol address)</h5><blockquote><p>网卡是一个专门负责网络通讯的硬件设置，就是那个连接网线的有线网卡和连接wifi的无线网。</p></blockquote><blockquote><p>IP地址就是设置在网卡上的一个逻辑地址信息，它可以唯一标识一个网卡，同时它也是计算机在互联网上的一个唯一标识。</p></blockquote><blockquote><p>IP地址由网络号段和主机号段组成，以“点-数法”表示，分成ABCDE五类；子网掩码的作用就是来区分网络号段和主机号段的；网关实质上也是一个具有路由功能的设备的IP地址。</p></blockquote><h5 id="域名-domain-name-与端口号-port-number"><a href="#域名-domain-name-与端口号-port-number" class="headerlink" title="域名(domain name)与端口号(port number)"></a>域名(domain name)与端口号(port number)</h5><blockquote><p>域名说白了就是IP的别名，具有更好的易记性，通过域名也能准确定位到一台计算机；而端口号指的是TCP/IP协议的端口号，是用来区分网络上不同的应用程序的，通过域名和端口号可以准确的定位到一台计算机上的服务应用程序。</p></blockquote><h3 id="二、细说Linux"><a href="#二、细说Linux" class="headerlink" title="二、细说Linux"></a>二、细说Linux</h3><h5 id="Linux的历史"><a href="#Linux的历史" class="headerlink" title="Linux的历史"></a>Linux的历史</h5><blockquote><p>1965年贝尔实验室(Bell Labs)、麻省理工(MIT)以及通用电气(GE)合作的MULTICS计划，欲要开发一套多用户的(multi-user)、多任务的(multi-processor)、多层次的(multi-level)操作系统,最终因各种原因失败。</p></blockquote><blockquote><p>1969年贝尔实验室的Ken Thompson为了能更好的玩“星际旅行”的游戏，历时一个月使用汇编写出了UNIX操作系统的原型；1970年设计出了B语言，使用该语言完成了第一个UNIX(UNICS的谐音)操作系统。</p></blockquote><blockquote><p>1971年同样酷爱“星际旅行”的Dennis Ritchie加入了Thompson的开发项目进行B语言的改造；到1972年的时候成功在B语言的基础上设计出了C语言；于1973年二人用C语言重写了UNIX操作系统。</p></blockquote><blockquote><p>1991年芬兰大学生Linus Torvalds在Minix的基础上开发了Linux的原型，之后利用GNU的bash开发环境和gcc编译工具编写了Linux内核；后来和众多爱好者共同完成了现如今强大的Linux操作系统。</p></blockquote><h5 id="Linux的概述"><a href="#Linux的概述" class="headerlink" title="Linux的概述"></a>Linux的概述</h5><blockquote><p>Linux就是指Linus’s UNIX，它是一个开放源代码的UNIX，本意是Linux内核的意思，后来被人们称之为Linux操作系统。具有免费、稳定、安全的特点。</p></blockquote><blockquote><p>Linux分为内核版本和发行版本。</p></blockquote><ul><li>内核版本：是Linux的核心，是运行程序和管理硬件设备的核心程序，官网地址为<a href="https://www.kernel.org" target="_blank" rel="noopener">https://www.kernel.org</a>。</li><li>发行版本：是封装了Linux内核的功能更加强大的Linux操作系统，又分成RedHat系列(如CentOS)和Debian系列(如Ubuntu)。</li><li>CentOS官网：<a href="https://www.centos.org" target="_blank" rel="noopener">https://www.centos.org</a>;Ubuntu官网：<a href="https://www.ubuntu.com" target="_blank" rel="noopener">https://www.ubuntu.com</a>;踩点和扫描网址：<a href="https://www.netcraft.com" target="_blank" rel="noopener">https://www.netcraft.com</a>。</li></ul><h5 id="Linux的文件系统和目录结构"><a href="#Linux的文件系统和目录结构" class="headerlink" title="Linux的文件系统和目录结构"></a>Linux的文件系统和目录结构</h5><blockquote><p>Linux的文件系统是一个层级的树状目录结构，没有盘符的概念，只有一个根目录“/”,所有文件都在它下面。</p></blockquote><blockquote><p>Linux的主要目录介绍：</p></blockquote><ul><li>/：根目录，一切目录的源头。一般只保存目录。</li><li>/boot:启动目录，保存系统启动需要的文件，如内核文件/boot/vmlinuz、引导器/boot/grub。(<font color="red">重点</font>)</li><li>/bin、/usr/bin；可执行二进制文件目录，保存的是如ls、tar这样的普通命令，可供所有用户使用。(<font color="red">重点</font>)</li><li>/sbin、/usr/sbin：系统可执行二进制文件目录，保存跟系统管理相关命令，但该目录的命令只能是超级管理员使用。</li><li>/etc：系统配置文件的默认存放目录，一般只存放配置文件，如/etc/inittab、/etc/init.d、/etc/sysconfig、/etc/fstab、/etc/issue。(<font color="red">重点</font>)</li><li>/home：系统默认的普通用户的家目录，如新建一个名为jmzc的用户，那么家目录就是/home/jmzc。(<font color="red">重点</font>)</li><li>/root：超级用户root的家目录。(<font color="red">重点</font>)</li><li>/lib、/usr/lib、/usr/local/lib：系统的函数库目录，程序执行需要额外调用的函数都保存在这里。</li><li>/usr：全称是unix sofrware resource,系统软件资源目录，类似于windows中的Program Files目录。(<font color="red">重点</font>)</li><li>/mnt、/media：挂载目录，前者是用户临时挂着其他文件系统的目录，后者是系统自动识别的设备的默认挂载目录。(<font color="red">重点</font>)</li><li>/lost+fount：系统异常产生错误时，会将一些遗失的片段放到此目录中。</li><li>/opt；安装第三方软件的目录；通常我们也会使用/usr/local目录作为第三方软件的安装目录。(<font color="red">重点</font>)</li><li>/proc:虚拟文件系统，该目录的文件只保存在内存中，如/proc/version、/proc/cpuinfo。</li><li>/sys、/srv：和/proc目录一样都是跟系统内核相关的目录，非高手不要动它。</li><li>/tmp：临时文件目录。</li><li>/dev：硬件设备存放目录。(<font color="red">重点</font>)</li><li>/var：动态数据的存在目录，如，日志，邮件等。(<font color="red">重点</font>)</li><li>/selinux：全称security enhanced linux，安全增强子系统，类似于360防护。</li><li>/dev/null、/dev/zero：2个特殊的目录，一个回收站，一个用于磁盘复制（dd命令）。<h3 id="三、使用Linux你需要知道的几个常识"><a href="#三、使用Linux你需要知道的几个常识" class="headerlink" title="三、使用Linux你需要知道的几个常识"></a>三、使用Linux你需要知道的几个常识</h3><blockquote><ol><li>linux中的内容都是以文件的形式保存的，包括硬件，即“在Linux中，一切皆文件”。</li><li>linux中的存储设置一般需要挂载之后才能使用。</li><li>Linux作为远程服务器时一般不允许关机，只能重启而且重启前最好同步数据并关闭服务。</li><li>Linux中的文件不是以后缀名来区分，而是用文件的权限来区分的。</li><li>linux作为服务器要定期的备份重要数据和日志。</li><li>用户密码需要具有规范性、时效性、易记性和复杂性。</li><li>通常不要直接使用系统预设用户“root”来登录，而要使用普通用户登录。</li></ol></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://jmzc4j.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>JVM初识</title>
    <link href="https://jmzc4j.github.io/2019/08/29/JVM%E5%88%9D%E8%AF%86/"/>
    <id>https://jmzc4j.github.io/2019/08/29/JVM初识/</id>
    <published>2019-08-29T05:01:43.000Z</published>
    <updated>2019-08-29T12:07:07.933Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="JVM内存模型"><a href="#JVM内存模型" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h3><ul><li>JVM是运行在操作系统之上的，它与硬件没有直接的交互；<img src="/2019/08/29/JVM初识/jvm.png" title="JVM模型"></li><li>堆空间和方法区被线程共享;程序计数器、虚拟机栈和本地方法栈被线程私有；</li><li>常见的JVM实现有SUN hotspot、BEA jrockit、IBM j9；</li></ul><h3 id="类装载器"><a href="#类装载器" class="headerlink" title="类装载器"></a>类装载器</h3><ul><li>负责加载class文件，class文件在文件开头有特定的文件标示，并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定;</li><li>装载过程：<ol><li>加载：查找并加载字节码文件到内存<ul><li>准确说是将字节码文件的内容加载到运行时数据区的方法区中，并在内存中创建一个Class对象。</li></ul></li><li>连接<ul><li>验证：验证字节码文件的正确性</li><li>准备：为静态变量分配空间并进行默认初始化</li><li>解析：将符号引用转变为直接引用</li></ul></li><li>初始化：为静态变量进行真实初始化<ul><li>只有在首次主</li></ul></li></ol></li><li>装载器分类<img src="/2019/08/29/JVM初识/classloader.png" title="类装载器继承体系"></li><li>虚拟机自带的加载器:<br>  启动类加载器（Bootstrap）C++<br>  扩展类加载器（Extension）Java<br>  应用程序类加载器（App）Java<br>  也叫系统类加载器，加载当前应用的classpath的所有类</li><li>用户自定义加载器  Java.lang.ClassLoader的子类，用户可以定制类的加载方式;</li></ul><h3 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h3><ul><li>Execution Engine执行引擎负责解释命令，提交操作系统执行（java、javac）;</li></ul><h3 id="Native-Interface本地接口"><a href="#Native-Interface本地接口" class="headerlink" title="Native Interface本地接口"></a>Native Interface本地接口</h3><ul><li>Java语言本身不能对操作系统底层进行访问和操作，但是可以通过JNI接口调用其他语言来实现对底层的访问;</li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><ul><li>登记native方法，在Execution Engine执行时加载本地方法库;</li></ul><h3 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h3><ul><li>每个线程都有一个程序计数器，是线程私有的,就是一个指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址,也即将要执行的指令代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记;</li></ul><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><ul><li>主管Java程序的运行，在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程一结束该栈就Over，生命周期和线程一致，是线程私有的。基本类型的变量、实例方法、引用类型变量都是在函数的栈内存中分配。</li><li>java.lang.StackOverflowError：当线程请求深度大于虚拟机允许的深度时发生异常;</li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ul><li>方法区是线程共享的，通常用来保存装载的类的元结构信息。<br>比如：运行时常量池+静态变量+常量+字段+方法字节码+在类/实例/接口初始化用到的特殊方法等。</li><li>通常和永久区关联在一起(Java7之前)，但具体的跟JVM的实现和版本有关。</li></ul><h3 id="堆空间"><a href="#堆空间" class="headerlink" title="堆空间"></a>堆空间</h3><ul><li>一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行。</li><li>堆内存逻辑上分为三部分：新生+养老+永久（JDK8以前）;<img src="/2019/08/29/JVM初识/heap.png" title="堆内存模型"><h4 id="新生区"><a href="#新生区" class="headerlink" title="新生区"></a>新生区</h4></li><li>新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命；</li><li>新生区又分为两部分：伊甸区（Eden）和幸存者区（Survivor），所有的类都是在伊甸区被new出来的。幸存区有两个： 0区（Survivor 0 space）和1区（Survivor 1 space）;</li><li>当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(MinorGC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。然后将伊甸园中的剩余对象移动到幸存0区.若幸存0区也满了，再对该区进行垃圾回收，然后移动到1区。那如果1区也满了呢？再移动到养老区。若养老区也满了，那么这个时候将产生MajorGC（FullGC），进行养老区的内存清理。若养老区执行了FullGC之后发现依然无法进行对象的保存，就会产生OOM异常“OutOfMemoryError”。</li><li>如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够。原因有二：<ol><li>Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。(初始大小一般是物理内存1/64,最大1/4)</li><li>代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）。</li><li>新生代调整参数：-Xmn；永久代调整参数：-XX:PermSize和-XX:MaxPermSize。</li><li>-XX:+PrintGCDetails  :输出GC处理日志。</li></ol></li><li>使用如下API获取JVM堆内存参数  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">long maxMemory = Runtime.getRuntime().maxMemory() ;//返回 Java 虚拟机试图使用的最大内存量。</span><br><span class="line">long totalMemory = Runtime.getRuntime().totalMemory() ;//返回 Java 虚拟机中的内存总量。</span><br></pre></td></tr></table></figure></li></ul><h3 id="JVM采用分代回收机制"><a href="#JVM采用分代回收机制" class="headerlink" title="JVM采用分代回收机制"></a>JVM采用分代回收机制</h3><ul><li>新生代使用复制算法copying，会浪费50%空间；</li><li>年老代使用标记清除和标记整理算法mark-sweep（会产生不连续的内存碎片）和mark-compack；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jvm" scheme="https://jmzc4j.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Html初识</title>
    <link href="https://jmzc4j.github.io/2019/08/29/Html%E5%88%9D%E8%AF%86/"/>
    <id>https://jmzc4j.github.io/2019/08/29/Html初识/</id>
    <published>2019-08-29T04:57:50.000Z</published>
    <updated>2019-08-29T04:59:06.377Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一-软件的架构"><a href="#一-软件的架构" class="headerlink" title="一 软件的架构"></a>一 软件的架构</h3><ul><li><p>C/S架构：(client-server)客户端服务器架构：    </p><ol><li>用户需要安装客户端来使用软件；</li><li>每次服务端更新后需要更新客户端；</li><li>针对不同的操作系统，需要开发不同的客户端程序，跨平台性差；</li><li>使用自有协议，相对来说安全性较好；</li></ol></li><li><p>B/S架构：(browser-server)浏览器服务器架构:    </p><ol><li>不需要安装客户端，只要有一个浏览器即可；</li><li>软件更新不需要更新客户端；</li><li>由于只需开发服务端，跨平台性较好；</li><li>使用公共的http协议或者https协议，相对C/S架构来说可能安全性稍差；</li></ol></li><li><p>网页组成：根据w3c的标准，一个网页主要由结构、表现和行为组成，即html、css和js。</p></li></ul><h3 id="二-HTML"><a href="#二-HTML" class="headerlink" title="二 HTML"></a>二 HTML</h3><ul><li>html：hypertext markup language,超文本标记语言：<ol><li>不是一门编程语言，而是一门告诉浏览器如何组织页面的标记语言，决定了网页的结构；</li><li>元素是html的基本单位，通常情况下，一个元素有开始标签、结束标签和内容构成；</li><li>HTML标签不区分大小写，从可读性和一致性方面通常使用小写字母；</li><li>元素按照性质可分成块级元素和内联元素两大类别；</li><li>没有内容的元素称之为空元素；</li><li>可以在开始标签中为元素添加属性，属性通常是一组由等号连接的名值对，值用引号包裹；</li><li>当属性没有值或者其值为属性名本身，这样的属性称之为布尔属性；</li></ol></li><li>完整的html页面的组成:   <ol><li>文档类型声明<!doctype html>，h5声明，最短的有效的文档声明；</li><li>html根元素，包裹了一个完整html页面；</li><li>head元素，包裹了所有想包含在html页面中但不想在页面中显示的内容，如标题、描述、关键字、字符集等；</li><li>body元素，包裹了所有想在网页中显示的内容，如文本、图片、音频、视频等；</li></ol></li></ul><h3 id="三-HTML元素"><a href="#三-HTML元素" class="headerlink" title="三 HTML元素"></a>三 HTML元素</h3><ul><li>元数据：meta</li><li>标题和段落：h、p</li><li>超链接和图片：a、img、figure、picture</li><li>列表：ul、ol、dl</li><li>实体：<code>&amp;amp; &amp;nbsp; &amp;lt; &amp;gt; &amp;copy; &amp;quote;</code></li><li>表格：table、tr、td、th、colgroup、col、thead、tfoot、tbody、caption</li><li>表单：form、input（text、password、file、hidden、checkbox、radio、email、number、tel、search）、textarea、select、fieldset</li><li>语气：em、strong、ins、del、small</li><li>引用：blockquote、q、cite</li><li>缩略语和上下标：abbr、sup、sub</li><li>代码：code、pre</li><li>换行和水平分割线：br、hr</li><li>布局：div、span</li><li>语义布局：header、nav、main、section、article、aside、footer</li><li>音频和视频：audio、video</li></ul><h3 id="四-CSS"><a href="#四-CSS" class="headerlink" title="四 CSS"></a>四 CSS</h3><ul><li>css：cascading style sheets，层叠样式表：<ol><li>指定文档如何呈现给用户的语言，用来定义文档的样式和布局，决定了网页的表现；</li><li>css的基本单位就是一个个css规则，一个规则由选择器和css声明块组成（与值配对的属性称之为css声明）；</li><li>css工作原理： 浏览器加载html并解析，然后加载css并解析，在然后将解析后的html和css在dom树上进行渲染，最后呈现给用户；</li><li>添加样式表的方式：外部样式表、内部样式表和内联样式表；<h3 id="五-css选择器"><a href="#五-css选择器" class="headerlink" title="五 css选择器"></a>五 css选择器</h3></li></ol></li><li>基本选择器：元素选择器、类选择器、ID选择器、通用选择器、分组选择器；</li><li>关系选择器：子元素选择器（&gt;）、后代选择器、交集选择器、兄弟选择器(+、~)</li><li>属性选择器：E[att]、E[att=”val”]、E[att^=”val”]、E[att$=”val”]、E[att*=”val”]、E[att|=”val”]、E[att~=”val”]</li><li>伪类选择器：E:link、E:visited、E:hover、E:active、E:focus、E:not()、E:first-child、、E:nth-child(n)、E:nth-of-type(n)、E:empty、E:checked、E:disabled、E:enabled</li><li>伪元素选择器：E:after/E::after、E:before/E::before</li></ul><h3 id="六css中单位"><a href="#六css中单位" class="headerlink" title="六css中单位"></a>六css中单位</h3><ul><li>长度单位：px、em、百分比</li><li>颜色单位：rgb、代表颜色的单词、十六进制<h3 id="七-规则优先级"><a href="#七-规则优先级" class="headerlink" title="七 规则优先级"></a>七 规则优先级</h3></li><li>在外部添加样式的情况下，id选择器&gt;类选择器、伪类选择器、属性选择器&gt;元素选择器、伪元素选择器</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="html" scheme="https://jmzc4j.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Java基础</title>
    <link href="https://jmzc4j.github.io/2019/08/29/Java%E5%9F%BA%E7%A1%80/"/>
    <id>https://jmzc4j.github.io/2019/08/29/Java基础/</id>
    <published>2019-08-29T04:57:13.000Z</published>
    <updated>2019-08-29T05:00:07.854Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>Java作为强类型语言，将数据类型分成基本类型和引用类型。</p></blockquote><ul><li>基本数据类型（primitive）：byte、short、int、long、float、double、char、boolean(4类8种)；</li><li>引用数据类型（reference）：array、class、interface（除了基本类型的都是引用类型）；</li><li>作为面向对象的语言，每种基本数据类型都有其对应的包装类型Number(6种)、Character、Boolean；<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><blockquote><p>和其他语言一样分成顺序、选择和循环结构。</p></blockquote></li><li>选择：if-else、switch-case；</li><li>循环：do-while、while、for、foreach；<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><blockquote><p>面向过程和面向对象</p></blockquote></li><li>面向过程：强调功能本身，关注的是如何分步的去完成功能，将方法或函数看做是一个基本单位；此时的程序编写者就是一个执行者；</li><li>面向对象：强调具备该功能的对象，关注的是如何指挥对象去完成功能，将类或者对象看做是一个基本单位；此时的程序编写者就是一个指挥者；</li><li>面向对象编程：就是找寻对象、创建对象、使用对象、维护对象间关系的过程；</li></ul><blockquote><p>类和对象</p></blockquote><ul><li>类：将现实世界中的事物在概念世界的抽象；反映到Java语言中就是一个类或者接口。</li><li>对象：就是那个事物本身，是个实实在在的个体；反映到Java语言中就是类的实例或者接口的具体实现。</li><li>Java中类的组成：类中有属性（Field）、方法（Method）、构造器（Constructor）基础元素，还可以有内部类元素。</li></ul><blockquote><p>方法</p></blockquote><ul><li>方法可以说就是一个最小的封装单位，通常由方法名、参数列表、方法体、返回值类型和访问权限修饰符组成；</li><li>方法重载：一个类中出现方法名相同、参数列表不同的现象；</li><li>方法重写：子父类中出现一模一样的方法的现象（即方法名、参数列表和返回值都一样）；</li><li>重写的方法不能比父类中的方法的出现更多的异常；也不能比父类中的方法的访问权限更严格；静态方法不能重写；</li></ul><h3 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h3><blockquote><p>封装（encapsulation）：隐藏对象的属性和实现细节，并提供对外的访问方式；具体就是使用private私有属性并提供setter和getter方法。</p></blockquote><ul><li>不可见性：细节不可见；</li><li>安全性：避免了非法数据的产生；</li><li>复用性：不论内部如何变，类始终不变；</li></ul><blockquote><p>继承（inheritance）：将多个类中的公共部分提取到一个单独的类中，让这个类和多个类产生了“is a”的关系，将这种关系称之为继承；使用extends表示类或者接口之间的继承关系。</p></blockquote><ul><li>父类也称之为基类、超类（superclass）；子类也称之为派生类（subclass）；</li><li>一个类有且只能有一个父类；一个父类可以有多个子类（单继承）；</li><li>如果B继承A，C继承B，那么C也间接继承了A（多层继承），java.lang.Object类是继承体系中的根父类；</li><li>可以继承父类中出构造外所有的结构，但因为封装的不可见性，则不能直接访问私有成员；</li><li>子类实例化必先进行父类的初始化，就是说子类构造器中的必然有一个构造器的第一行是super()；</li><li>继承减少了代码的冗余，提高了代码复用性；</li></ul><blockquote><p>多态（polymorphism）：同一对象在运行时的不同表现形态；表现形式是父类引用指向子类对象。</p></blockquote><ul><li>前提：存在继承或实现关系；有方法的重写或方法的实现；</li><li>对属性来说是不存在多态现象的，就是说成员变量看左边；</li><li>对方法来说：编译时看父类的引用，运行时看具体的子类实例（动态绑定）；</li><li>父类不能使用子类中的成员，若想使用则需要向下转型(instanceof)；</li><li>当使用子类重写的方法而不是父类方法的现象称为虚拟方法调用，此时父类中的那个方法称之为虚拟方法（virtual method）；</li></ul><blockquote><p>抽象类与接口</p></blockquote><ul><li>当不要类创建对象时，我们可以使用abstract修饰类，这样的类就是一个抽象类；当不确定方法的具体实现时，可以使用abstract修饰，这样的方法称之为抽象方法；有抽象方法的类必须是抽象类，但抽象类不一定有抽象方法（模板设计模式）；</li><li>接口是类并列的一个结构，使用interface定义；JDK1.8之前，接口中只能有全局常亮和抽象方法；JDK1.8开始可以有静态方法和默认方法且默认方法只能通过接口调用；当默认方法和继承的父类方法一模一样时考虑类优先原则；</li><li>抽象类中通常定义基本功能，接口中定义扩展功能；接口反映的是“like a”的关系，是一种规则，一种可能性；</li></ul><blockquote><p>this、super、static、final</p></blockquote><ul><li>this：当前对象的引用（准确说是this所在的方法的所在类的对象）；</li><li>super：父类对象的引用，和this一样都能用来区分同名成员；</li><li>static：静态，用此修饰的成员变量称之为类变量，同样的用此修饰的成员方法称之为静态方法（类方法）；</li><li>final：提升变量为常量（只能赋值1次）；修饰类则该类不能被继承；修改方法则该方法不能被重写；</li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><blockquote><p>异常就是在程序运行过程中出现语法和逻辑错误之外的其他不正常情况的现象；有抛出和捕捉两种处理方式；</p></blockquote><ul><li>在异常的继承体系中，Throwable是Exception和Error的顶级父类，在Exception下有一个特殊的RuntimeException子类；</li><li>适当的处理异常能提高程序的健壮性和用户体验；</li></ul><blockquote><p>try-catch-finally、throws、throw</p></blockquote><ul><li>try-catch-finally：捕获并处理异常；try块中是可能出现问题的代码；chatch块中是对问题的解决方式的代码；finally块中是在虚拟机不退出的情况下都会执行的代码；</li><li>throws：抛出一个或多个异常类型，提示方法调用者该方法可能会出现问题；</li><li>throw：手动抛出一个异常对象，如该对象不是RuntimeException类型的子类，则需要显式throws声明；</li></ul><blockquote><p>自定义异常</p></blockquote><ul><li>当我们明确的知道如何解决问题时，通常自定义异常类继承Exception，然后throws该异常;</li><li>当不知道如何解决时，通常自定义类继承RuntimeException，然后好手动抛出一个改异常对象；</li></ul><h3 id="常用类与方法"><a href="#常用类与方法" class="headerlink" title="常用类与方法"></a>常用类与方法</h3><blockquote><p>java.lang.Object</p></blockquote><ul><li>clone()、finalize()、hashCode()、equals()、toString()、wait()、notify()、notifyAll()</li></ul><blockquote><p>java.lang.Runtime（一个典型的单例设计模式）</p></blockquote><ul><li>getRuntime()、gc()、maxMemory()、totalMemory</li></ul><blockquote><p>java.lang.System</p></blockquote><ul><li>currentTimeMillis()、nanoTime()、arraycopy()、exit(0)、gc()、getProperties()</li></ul><blockquote><p>java.lang.String</p></blockquote><ul><li>concat()、join()、split()、subString()</li><li>replace()、replaceFirst()、replaceAll()、compareTo()、equals()、equalsIgnoreCase()、matches()</li><li>length()、charAt()、contains()、indexOf()、lastIndexOf()、startsWith()、endsWith()</li><li>valueOf()、toCharArray()、getBytes()、format()、toUpperCase()、toLowerCase()</li><li>trim()、isEmpty()、intern()</li><li>new String(byte[])、new String(char[])、new String(StringBuilder)</li></ul><blockquote><p>java.lang.StringBuffer与java.lang.StringBuilder</p></blockquote><ul><li>append()、insert()、delete()、deleteCharAt()、setCharAt()、replace()、length()、charAt()、indexOf()、lastIndexOf()、toString()、subString()</li><li>默认容量16，扩容2*16+2</li></ul><blockquote><p>java.lang.Math</p></blockquote><ul><li>Math.PI、Math.E</li><li>abs()、ceil()、floor()、round()、max()、min()、random()</li></ul><blockquote><p>java.util.Arrays</p></blockquote><ul><li>asList()、sort()、binarySearch()、copyOf()、equals()、toString()、fill()</li></ul><blockquote><p>java.util.Date与java.sql.Date</p></blockquote><ul><li>getTime()、setTime()、after()、before()、new Date()、new Date(long)</li><li>new Date(long)、valueOf()</li></ul><blockquote><p>java.util.Calendar</p></blockquote><ul><li>getInstance()、get()set()、add()、before()、after()、常量</li></ul><blockquote><p>java.text.SimpleDateformat</p></blockquote><ul><li>new SimpleDateFormat(String)、format()、parse()</li></ul><blockquote><p>java.time.LocalDateTime</p></blockquote><ul><li>now()、of()、getXxx()、plusXxx()、minusXxx()、withXxx()</li></ul><blockquote><p>java.time.Instant</p></blockquote><ul><li>now()、plus()、minus()</li></ul><blockquote><p>java.time.format.DateTimeFormatter</p></blockquote><ul><li>DateTimeFormatter.ISO_LOCAL_DATE_TIME</li><li>ofPattern(String)、format()、parse()</li></ul><blockquote><p>java.lang.Integer</p></blockquote><ul><li>valueOf()、compare()、compareTo()、parseInt()、xxxValue()、toString()</li></ul><blockquote><p>java.math.BigDecimal</p></blockquote><ul><li>divide(BigDecimal divisor, int scale, int roundingMode)</li></ul><blockquote><p>java.security,].MessageDigest(md5,sha-256)</p></blockquote><ul><li>getInstance(String algorithm)、digest(byte[])</li></ul><blockquote><p>java.util.Base64</p></blockquote><ul><li>getDecode()、getEncode()</li><li>decode()、encode()</li></ul><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><blockquote><p>程序、进程和线程</p></blockquote><ul><li>程序：为实现某一功能，使用编程语言编写的一段静态代码或者是一组指令的集合；</li><li>进程：运行起来的程序，是资源分配的基本单位；</li><li>线程：程序中的一条执行路径，是程序执行的基本单位；</li><li>如果一个程序在同一时间可以并行的执行多个线程，那个称该程序为多线程程序；</li></ul><blockquote><p>创建线程的方式</p></blockquote><ul><li>extends Thread：覆盖run()</li><li>implements Runbale：覆盖run()</li><li>implements Callable-&gt;FutureTask：覆盖call()</li><li>Executors-&gt;ThreadPoolExecutor-&gt;submit()/execute()/shutdown()</li></ul><blockquote><p>线程中常用方法</p></blockquote><ul><li>currentThread()、getName()、setName()、setPriority()、setDaemon()</li><li>start()、sleep()、join()、yield()、interrupt()</li></ul><blockquote><p>线程状态</p></blockquote><ul><li>新建（new）</li><li>就绪（start、yield、notify）</li><li>运行（cpu分配了执行权）</li><li>阻塞（sleep、join、等待同步锁、wait）</li><li>死亡（run结束、出现异常、interrupt）</li></ul><blockquote><p>出现多线程问题的原因</p></blockquote><ul><li>多线程环境、有共享数据且有多条语句操作共享数据</li></ul><blockquote><p>线程同步</p></blockquote><ul><li>syncronized同步代码块：锁对象任意，多个线程共用同一把锁；</li><li>syncnizzed同步方法：成员方法锁为this、类方法锁为clazz；</li><li>reentrantLock锁：lock(),unlock()</li><li>lock.newCondition()-&gt; await(),signal()</li></ul><blockquote><p>线程通信</p></blockquote><ul><li>wait、notify</li><li>await、signal</li></ul><h3 id="注解和枚举"><a href="#注解和枚举" class="headerlink" title="注解和枚举"></a>注解和枚举</h3><blockquote><p>注解可以理解为源代码的补充代码，与反射技术配合使用</p></blockquote><ul><li>@interface：定义注解</li><li>元注解：（描述注解的注解）<br>target：定义使用注解的元素类型，使用ElementType枚举类<br>retention：定义注解的生命周期，使用RetentionPolicy枚举类<br>inherited：<br>document：<br>repeatable：</li></ul><blockquote><p>枚举类就是定义有限个公共的全局对象常量的类。</p></blockquote><ul><li>enum定义枚举类，最直接父类是Enum；当一个枚举类中只有一个常亮时该枚举类就是一个单例的；</li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>Collection接口为单列集合的根接口，其子接口有List与Set。</p></blockquote><blockquote><p>List接口存储有序，元素可重复；实现类有ArrayList、LinkedList、Vector、Stack。</p></blockquote><ul><li>ArrayList和Vector底层数据结构是数组，数组默认长度是10，扩容方式前者1.5倍后者2倍；查询快，插入和删除慢；</li><li>LinkedList：底层数据结果是双向列表，查询慢，插入和删除快；</li></ul><blockquote><p>Set接口存储无序，元素不可重复；实现类有HashSet、LinkedHashSet、TreeSet。</p></blockquote><ul><li>HashSet：底层使用HashMap，即数组+链表+红黑树(1.8)的结构,默认容量16，加载因子0.75，临时容量12；当链表长度超过8，容量超过64则转换为红黑树存储。大概原理取得元素hashCode，通过散列算法计算元素位置；当该位置无元素直接添加，如果有元素那么要判断hashcode和equals的结果，hashcode和equals完全一样则不能添加；</li><li>LinkedHashSet：底层在HashSet的基础上又多了一个双向链表来记录存储数据的顺序，所有取出和存储顺序是一致的；</li><li>TreeSet：底层是红黑树，通过compareTo()或者compare()方法来确定元素位置。</li></ul><blockquote><p>Collection接口方法</p></blockquote><ul><li>add、addAll、clear、size、isEmpty、hashcode</li><li>remove、removeALl、contains、containsAll、retainALl、equals</li><li>toArray，iterator</li></ul><blockquote><p>ArrayList特有方法</p></blockquote><ul><li>add(int,E)、get(int)、set(int,E)、remove(int)、subList(int,int)</li></ul><blockquote><p>Map是双列集合的根接口，其实现类有HashMap、LinkedHashMap、TreeMap、Hashtable、Propeties</p></blockquote><ul><li>以键值对的方式存储元素，先将键值对存储到entry中然后将entry存到Map中；</li><li>存储无序，元素不可重复，因为key是Set、value是Collection；</li></ul><blockquote><p>Map的方法</p></blockquote><ul><li>put、get、values、keySet、entrySet、size、isEmpty、remove、containsKey、containsValue、clear</li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><blockquote><p>泛型是参数化类型，就是类型的标记；实例化或者调用方法时需要明确具体类型；</p></blockquote><ul><li>可以用在类、接口、方法上；泛型方法可以是静态的；泛型方法的泛型类型不需要和类或接口中的泛型一致；</li><li>通配符：？，？extends G，？super G；不能做写操作，但可以做读操作；</li></ul><h3 id="文件和IO流"><a href="#文件和IO流" class="headerlink" title="文件和IO流"></a>文件和IO流</h3><blockquote><p>将文件系统抽象成File类，通过该类可以进行文件或目录的创建、删除、属性查看、目录内容查看等操作。</p></blockquote><blockquote><p>java.io.File中的常用方法</p></blockquote><ul><li>File.separator</li><li>isFile()、isDirectory()、exists()、canRead()、canWrite()、isHidden()</li><li>createNewFile()、mkdirs()、delete()、getParent() 、getName()、getAbsolutePath()</li><li>list()、listFiles()、lastModified()、length()</li></ul><blockquote><p>io流分类</p></blockquote><ul><li>按数据单位分为字节流和字符流</li><li>按流的流向分为输入流和输出流</li><li>按流的角色分为节点流（直接作用于文件的流）和处理流（对文件流或其他流的处理）</li></ul><blockquote></blockquote><h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h3 id="Java8函数式编程"><a href="#Java8函数式编程" class="headerlink" title="Java8函数式编程"></a>Java8函数式编程</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://jmzc4j.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse常用配置</title>
    <link href="https://jmzc4j.github.io/2019/08/29/Eclipse%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/29/Eclipse常用配置/</id>
    <published>2019-08-28T16:48:08.000Z</published>
    <updated>2019-08-28T19:47:56.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Eclispe常用配置"><a href="#Eclispe常用配置" class="headerlink" title="Eclispe常用配置"></a>Eclispe常用配置</h3><ol><li><p>Window-&gt;Preferences-&gt;General-&gt;勾选”show heap status”;</p></li><li><p>Window-&gt;Preferences-&gt;General-&gt;Appearance-&gt;取消勾选”show most recently used tabs”;</p></li><li><p>Window-&gt;Preferences-&gt;General-&gt;Appearance-&gt;Colors and Fonts-&gt;Basic-&gt;Text Font-&gt;Edit-&gt;调整字体大小;</p></li><li><p>Window-&gt;Preferences-&gt;General-&gt;Content Types-&gt;Java Properties File-&gt;Default Encoding-&gt;修改为UTF-8-&gt;Update;</p></li><li><p>Window-&gt;Preferences-&gt;General-&gt;Editors-&gt;Text Editors-&gt;Background color-&gt;背景色调整为RGB(199,237,204);</p></li><li><p>Window-&gt;Preferences-&gt;General-&gt;Editors-&gt;Text Editors-&gt;Spelling-&gt;取消勾选”enable spell checking”;</p></li><li><p>Window-&gt;Preferences-&gt;General-&gt;Project Natures-&gt;取消勾选”Automatically detect missing …”;</p></li><li><p>Window-&gt;Preferences-&gt;General-&gt;Sartup and Shutdown-&gt;仅保留git UI;</p></li><li><p>Window-&gt;Preferences-&gt;General-&gt;Workspace-&gt;Text file encoding-&gt;修改为UTF-8;</p></li><li><p>Window-&gt;Preferences-&gt;Install/Update-&gt;Automatic Updates-&gt;取消勾选”Automatically find new …”;</p></li><li><p>Window-&gt;Preferences-&gt;Java-&gt;Code Style-&gt;Code Templates-&gt;Comments-&gt;Types-&gt;修改为<code>@author ${user}  &lt;mailto:jmzc_top@aliyun.com&gt;</code>;</p></li><li><p>Window-&gt;Preferences-&gt;Java-&gt;Code Style-&gt;Code Templates-&gt;Code-&gt;去掉注释部分;</p></li><li><p>Window-&gt;Preferences-&gt;Java-&gt;Code Style-&gt;Formatter-&gt;创建一个新的myself模板-&gt;然后去掉Comments选择卡中的JavaDoc和block comment格式化;</p></li><li><p>Window-&gt;Preferences-&gt;Java-&gt;Editors-&gt;Content Assist-&gt;Auto activation triggers for java-&gt;修改为<code>abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ.</code>;</p></li><li><p>Window-&gt;Preferences-&gt;Java-&gt;Editors-&gt;Content Assist-&gt;Advanced-&gt;取消勾选”Java Proposals(Code Recommenders)”;</p></li><li><p>Window-&gt;Preferences-&gt;Java-&gt;Editors-&gt;Templates-&gt;可以修改预定义模板或者新建模板;</p></li><li><p>Window-&gt;Preferences-&gt;Java-&gt;Installed JREs-&gt;修改JRE为安装的JDK;</p></li><li><p>Window-&gt;Preferences-&gt;JavaScript-&gt;Code Style-&gt;Formatter-&gt;创建一个新的myself模板-&gt;然后去掉Comments选择卡中的JavaDoc和block comment格式化;</p></li><li><p>Window-&gt;Preferences-&gt;JavaScript-&gt;Editors-&gt;Content Assist-&gt;Auto activation triggers for javascript-&gt;修改为<code>abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ.</code>;</p></li><li><p>Window-&gt;Preferences-&gt;Maven-&gt;Installings-&gt;添加外部的maven安装目录-&gt;进行勾选;</p></li><li><p>Window-&gt;Preferences-&gt;Maven-&gt;User Settings-&gt;User Settings选择外部settings文件路径;</p></li><li><p>Window-&gt;Preferences-&gt;Server-&gt;Runtime Environment-&gt;Add-&gt;添加外部tomcat;</p></li><li><p>Window-&gt;Preferences-&gt;Web-&gt;JSP Files-&gt;修改Encoding为UTF-8;</p></li></ol><h3 id="sts插件-老版本地址推演"><a href="#sts插件-老版本地址推演" class="headerlink" title="sts插件(老版本地址推演)"></a>sts插件(老版本地址推演)</h3><ol><li><p>在<a href="https://spring.io/tools3/sts/all" target="_blank" rel="noopener">sts插件官网</a>找到eclipse4.9.0的下载地址,如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">分解：</span><br><span class="line">https://download.springsource.com/release/TOOLS/update (保留1)</span><br><span class="line">/3.9.9.RELEASE/e4.9</span><br><span class="line">/springsource-tool-suite (保留4)</span><br><span class="line">-3.9.9.RELEASE-e4.9.0</span><br><span class="line">-updatesite.zip (保留6)</span><br></pre></td></tr></table></figure></li><li><p>在<a href="https://spring.io/tools3/sts/legacy" target="_blank" rel="noopener">STS官网</a>找到对应的Eclipse的版本的下载地址,如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">分解：</span><br><span class="line">https://download.springsource.com/release/STS</span><br><span class="line">/3.9.6.RELEASE (保留2)</span><br><span class="line">/dist</span><br><span class="line">/e4.9 (保留3)</span><br><span class="line">/spring-tool-suite</span><br><span class="line">-3.9.6.RELEASE-e4.9.0 (保留5)</span><br><span class="line">-win32-x86_64.zip</span><br></pre></td></tr></table></figure></li><li><p>推算sts插件其他版本的地址，只需知道STS的下载地址，然后安装保留序号进行拼接即可；如需要下载eclispe4.7.3a的sts插件：</p></li></ol><ul><li>STS下载地址：<a href="https://download.springsource.com/release/STS/3.9.4.RELEASE/dist/e4.7/spring-tool-suite-3.9.4.RELEASE-e4.7.3a-win32-x86_64.zip" target="_blank" rel="noopener">https://download.springsource.com/release/STS/3.9.4.RELEASE/dist/e4.7/spring-tool-suite-3.9.4.RELEASE-e4.7.3a-win32-x86_64.zip</a></li><li>按照上面的推导规则，得到sts插件的离线下载包地址为：<br><a href="https://download.springsource.com/release/TOOLS/update/3.9.4.RELEASE/e4.7/springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip" target="_blank" rel="noopener">https://download.springsource.com/release/TOOLS/update/3.9.4.RELEASE/e4.7/springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip</a></li></ul><ol start="4"><li>下载安装</li></ol><ul><li>打开eclispe-&gt;Help-&gt;Install New Software-&gt;Add-&gt;Achieve-&gt;选择下载的压缩包-&gt;OK-&gt;选择带有IDE的4个进行安装（取消勾选下面的站点升级）</li></ul><h3 id="安装lombok"><a href="#安装lombok" class="headerlink" title="安装lombok"></a>安装lombok</h3><ul><li><a href="https://www.projectlombok.org/" target="_blank" rel="noopener">官网下载</a>lombok.jar或者通过maven下载；</li><li>双击jar，在出现的界面选择eclispe根目录中的eclispe.exe，再点击install/update即可;</li></ul><h3 id="uml插件"><a href="#uml插件" class="headerlink" title="uml插件"></a>uml插件</h3><ul><li>planUML安装<ol><li>官网地址：<a href="http://plantuml.com/zh" target="_blank" rel="noopener">http://plantuml.com/zh</a>;</li><li>Help-&gt;Install New Software-&gt;Add-&gt;添加地址(<a href="http://hallvard.github.io/plantuml" target="_blank" rel="noopener">http://hallvard.github.io/plantuml</a> )-&gt;全部安装即可;</li><li><a href="https://www.graphviz.org/download/" target="_blank" rel="noopener">下载Graphviz</a>并安装;</li><li>Window-&gt;Preferences-&gt;PlantUML-&gt;配置dot.exe的路径;</li><li>Window-&gt;Show View-&gt;PlanUML;</li></ol></li><li>AmaterasUML安装<ol><li>Help-&gt;Install New Software-&gt;Add-&gt;添加地址(<a href="https://takezoe.github.io/amateras-update-site/)-&gt;全部安装即可" target="_blank" rel="noopener">https://takezoe.github.io/amateras-update-site/)-&gt;全部安装即可</a>;</li></ol></li></ul><h3 id="eclipse手动安装插件"><a href="#eclipse手动安装插件" class="headerlink" title="eclipse手动安装插件"></a>eclipse手动安装插件</h3><ol><li>在eclipse根目录下建文件夹MyPlugins;</li><li>下载插件并解压得到包含features和plugins的文件夹XXX;</li><li>完成复制和建立文件夹的操作之后，如${eclipse_Home}\MyPlugins\XXX\eclipse\features和..\plugins文件夹;</li><li>在eclipse_Home下建links文件夹,并建立一个p1_xxx.link文件,内容为<code>path=${eclipse_Home}/MyPlugins/xxx</code><ul><li>注意:<ul><li>路径中是”/“或者”\“  而不是”&quot; ;</li><li>${eclipse_Home}换成实际绝对地址：如D:\eclipse\MyPlugins\quantum303;</li><li>link目录下的文件eclipse都要读入,小心！;</li><li>path下面应该有eclipse文件夹，而不是将path设置成eclipse文件夹;</li><li>让path下面有plugins和features这两个目录;</li></ul></li></ul></li><li>删除${eclipse_Home}\configuration中的org.eclipse.update目录;</li><li>重启eclipse,ok.  其实，myeclipse的插件安装就是如此操作的;</li></ol><h3 id="eclispe注释模板"><a href="#eclispe注释模板" class="headerlink" title="eclispe注释模板"></a>eclispe注释模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">文件(Files)注释标签：</span><br><span class="line">/**  </span><br><span class="line">* @Title: $&#123;file_name&#125;</span><br><span class="line">* @Package $&#123;package_name&#125;</span><br><span class="line">* @Description: $&#123;todo&#125;(用一句话描述该文件做什么)</span><br><span class="line">* @author A18ccms A18ccms_gmail_com  </span><br><span class="line">* @date $&#123;date&#125; $&#123;time&#125;</span><br><span class="line">* @version V1.0  </span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">类型(Types)注释标签（类的注释）：</span><br><span class="line">/**</span><br><span class="line">* @ClassName: $&#123;type_name&#125;</span><br><span class="line">* @Description: $&#123;todo&#125;(这里用一句话描述这个类的作用)</span><br><span class="line">* @author A18ccms a18ccms_gmail_com</span><br><span class="line">* @date $&#123;date&#125; $&#123;time&#125;</span><br><span class="line">*</span><br><span class="line">* $&#123;tags&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">字段(Fields)注释标签：</span><br><span class="line">/**</span><br><span class="line">* @Fields $&#123;field&#125; : $&#123;todo&#125;(用一句话描述这个变量表示什么)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">构造函数标签：</span><br><span class="line">/**</span><br><span class="line">* &lt;p&gt;Title: &lt;/p&gt;</span><br><span class="line">* &lt;p&gt;Description: &lt;/p&gt;</span><br><span class="line">* $&#123;tags&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">方法(Constructor &amp; Methods)标签：</span><br><span class="line">/**</span><br><span class="line">* @Title: $&#123;enclosing_method&#125;</span><br><span class="line">* @Description: $&#123;todo&#125;(这里用一句话描述这个方法的作用)</span><br><span class="line">* @param $&#123;tags&#125;    设定文件</span><br><span class="line">* @return $&#123;return_type&#125;    返回类型</span><br><span class="line">* @throws</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">覆盖方法(Overriding Methods)标签：</span><br><span class="line">/* (非 Javadoc)</span><br><span class="line">* &lt;p&gt;Title: $&#123;enclosing_method&#125;&lt;/p&gt;</span><br><span class="line">* &lt;p&gt;Description: &lt;/p&gt;</span><br><span class="line">* $&#123;tags&#125;</span><br><span class="line">* $&#123;see_to_overridden&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">代表方法(Delegate Methods)标签：</span><br><span class="line">/**</span><br><span class="line">* $&#123;tags&#125;</span><br><span class="line">* $&#123;see_to_target&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">getter方法标签：</span><br><span class="line">/**</span><br><span class="line">* @return $&#123;bare_field_name&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">setter方法标签：</span><br><span class="line">/**</span><br><span class="line">* @param $&#123;param&#125; 要设置的 $&#123;bare_field_name&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="IDE工具" scheme="https://jmzc4j.github.io/categories/IDE%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="eclipse" scheme="https://jmzc4j.github.io/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>LogBack配置</title>
    <link href="https://jmzc4j.github.io/2019/08/28/LogBack%E9%85%8D%E7%BD%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/28/LogBack配置/</id>
    <published>2019-08-28T10:51:03.000Z</published>
    <updated>2019-09-01T08:44:51.658Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="what-is"><a href="#what-is" class="headerlink" title="what is"></a>what is</h3><p>-Logback是由log4j创始人设计的另一个开源日志组件,[官方网站] (<a href="http://logback.qos.ch" target="_blank" rel="noopener">http://logback.qos.ch</a>);</p><ul><li>它当前分为下面几个模块：</li></ul><ol><li>logback-core：其它两个模块的基础模块;</li><li>logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4jAPI使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging;</li><li>logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能;</li></ol><h3 id="why-use-it"><a href="#why-use-it" class="headerlink" title="why use it"></a>why use it</h3><ul><li>更快的实现：Logback的内核重写了，在一些关键执行路径上性能提升10倍以上。而且logback不仅性能提升了，初始化内存加载也更小了；</li><li>非常充分的测试：Logback经过了几年，数不清小时的测试。Logback的测试完全不同级别的；</li><li>Logback-classic非常自然实现了SLF4j，在使用SLF4j中，你都感觉不到logback-classic；</li><li>非常充分的文档：官方网站有两百多页的文档；</li><li>自动重新加载配置文件：当配置文件修改了，Logback-classic能自动重新加载配置文件。扫描过程快且安全，它并不需要另外创建一个扫描线程；</li><li>Filters（过滤器）：在log4j，只有降低日志级别，不过这样会打出大量的日志，会影响应用性能。在Logback，你可以继续保持那个日志级别；</li><li>自动压缩已经打出来的log：RollingFileAppender在产生新文件的时候，会自动异步压缩已经打出来的日志文件。</li><li>自动去除旧的日志文件：设置TimeBasedRollingPolicy或者SizeAndTimeBasedFNATP的maxHistory属性，你可以控制已经产生日志文件的最大数量；</li></ul><h3 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span></span><br><span class="line"><span class="comment">scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</span></span><br><span class="line"><span class="comment">de<span class="doctag">bug:</span> 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上下文名称，用于区分不同应用程序的记录 默认default --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">contextName</span>&gt;</span>default<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"./log"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义日志布局的转换样式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--格式化输出：%d表示日期，%p优先级，%c类全限定名，%M方法名，%L行号，%m日志信息，%n换行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"layout_pattern"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss&#125;[%p][%c][%M][%L] -&gt; %m%n"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"layout_pattern2"</span> <span class="attr">value</span>=<span class="string">"%date [%thread] %-5level %logger&#123;36&#125; [%line] - %msg%n"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义要保存的最大归档文件数量，异步删除旧文件 （需要结合滚动pattern具体分析） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logFile_period"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义单个日志文件的最大为10M 超出此大小则生成新文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logFile_maxSize"</span> <span class="attr">value</span>=<span class="string">"10MB"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 邮件参数设置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义邮件服务器地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"smtpHost"</span> <span class="attr">value</span>=<span class="string">"smtp.163.com"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- smtp端口 ，默认值25 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"smtpPort"</span> <span class="attr">value</span>=<span class="string">"25"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 发件人用户名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"jmzc_top"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 发件人授权码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"shouquanma"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 安全连接 默认false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SSL"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 收件人邮箱 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email_to"</span> <span class="attr">value</span>=<span class="string">"jmzc_top@aliyun.com"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 发件人邮箱 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email_from"</span> <span class="attr">value</span>=<span class="string">"jmzc_top@163.com"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 主题 默认%logger&#123;20&#125; - %m --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email_subject"</span> <span class="attr">value</span>=<span class="string">"【Error】: %logger"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 输出日志到控制台 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;layout_pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤器，记录&gt;=DEBUG级别的日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输入日志到文件 DEBUG级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FileDebug"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/debug.%d&#123;yyyyMMdd&#125;.zip<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>$&#123;logFile_period&#125;<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;layout_pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>$&#123;logFile_maxSize&#125;<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤器，只记录DEBUG级别的日志 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;</span></span><br><span class="line"><span class="comment">&lt;level&gt;DEBUG&lt;/level&gt;</span></span><br><span class="line"><span class="comment">&lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span></span><br><span class="line"><span class="comment">&lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span></span><br><span class="line"><span class="comment">&lt;/filter&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 输入日志到文件 ERROR级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FileError"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置文件滚动的样式 %d&#123;yyyyMMdd&#125;表示每天滚动 或者达到最大文件大小后滚动 .gz | .zip | .log | .txt --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/error.%d&#123;yyyyMMdd&#125;.zip<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>$&#123;logFile_period&#125;<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;layout_pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>$&#123;logFile_maxSize&#125;<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 输出日志到邮件 janino.jar和mail.jar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"Email"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.net.SMTPAppender"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 基于标记和日志等级发送邮件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">evaluator</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.boolex.JaninoEventEvaluator"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">expression</span>&gt;</span></span><br><span class="line">(level &gt; WARN &amp;amp;&amp;amp; null != throwable)||(marker != null &amp;amp;&amp;amp; marker.contains("DEVELOP"))</span><br><span class="line"><span class="tag">&lt;/<span class="name">expression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">evaluator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一个邮件只包含一个日志条目 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cyclicBufferTracker</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.spi.CyclicBufferTracker"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bufferSize</span>&gt;</span>1<span class="tag">&lt;/<span class="name">bufferSize</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cyclicBufferTracker</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置同步发送，异步不好用？？？ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">asynchronousSending</span>&gt;</span>false<span class="tag">&lt;/<span class="name">asynchronousSending</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">smtpHost</span>&gt;</span>$&#123;smtpHost&#125;<span class="tag">&lt;/<span class="name">smtpHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">smtpPort</span>&gt;</span>$&#123;smtpPort&#125;<span class="tag">&lt;/<span class="name">smtpPort</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SSL</span>&gt;</span>$&#123;SSL&#125;<span class="tag">&lt;/<span class="name">SSL</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>$&#123;username&#125;<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>$&#123;password&#125;<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>$&#123;email_to&#125;<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>$&#123;email_from&#125;<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">subject</span>&gt;</span>$&#123;email_subject&#125;<span class="tag">&lt;/<span class="name">subject</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;layout_pattern&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- root是所有logger的祖先 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志输出级别 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;appender-ref ref="FileDebug" /&gt;</span></span><br><span class="line"><span class="comment">&lt;appender-ref ref="FileError" /&gt;</span></span><br><span class="line"><span class="comment">&lt;appender-ref ref="Email" /&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- show parameters for hibernate sql 专为 Hibernate 定制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicBinder"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicExtractor"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.SQL"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.QueryParameters"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.query.HQLQueryPlan"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--myibatis log configure--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.apache.ibatis"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Connection"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Statement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.PreparedStatement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><a href="/2019/08/28/LogBack配置/logback.xml" title="配置文件">配置文件</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="配置文件" scheme="https://jmzc4j.github.io/categories/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="logback" scheme="https://jmzc4j.github.io/tags/logback/"/>
    
  </entry>
  
  <entry>
    <title>Log4j配置</title>
    <link href="https://jmzc4j.github.io/2019/08/28/Log4j%E9%85%8D%E7%BD%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/28/Log4j配置/</id>
    <published>2019-08-28T10:49:24.000Z</published>
    <updated>2019-08-30T08:33:42.084Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="what-is"><a href="#what-is" class="headerlink" title="what is"></a>what is</h3><ul><li>Log4j是Apache下的一款开源的日志框架;在项目中，我们会结合slf4j和log4j一起使用;</li><li>Log4j提供了简单的API调用，强大的日志格式定义以及灵活的扩展性。我们可以自己定义Appender来满足我们对于日志输出的需求;</li><li>Log4j有三个主要的组件：Loggers(记录器)，Appenders(输出源)和Layouts(布局);</li></ul><h3 id="why-use-it"><a href="#why-use-it" class="headerlink" title="why use it"></a>why use it</h3><ul><li>我们在系统中对于记录日志的需求并不单纯。首先，我们希望日志要能持久化到磁盘，最基本的就是要能够保存到文件中；其次，我们希望在开发和生产环境中记录的日志并不相同，明显开发环境的日志记录会更多方便调试，但放到生产环境下大量的日志很容易会撑爆服务器，因此在生产环境我们希望只记录重要信息。</li><li>基于不单纯的目的，System.out.println是直接不能满足我们的要求，因此抛弃它，选择功能更强的日志框架。而log4j是apache下一款著名的开源日志框架，log4j满足上面的一切需求。</li><li>记录日志的框架并不仅仅只有log4j，比较有名的还有logback等，现在比较火的SpringBoot默认集成的日志就是logback。不管哪种日志框架，一般都能够实现日志的持久化功能。</li></ul><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p>Loggers组件在此系统中被分为五个级别：DEBUG、INFO、WARN、ERROR和FATAL。这五个级别是有顺序的，DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，分别用来指定这条日志信息的重要程度，明白这一点很重要，Log4j有一个规则：只输出级别不低于设定级别的日志信息，假设Loggers级别设定为INFO，则INFO、WARN、ERROR和FATAL级别的日志信息都会输出，而级别比INFO低的DEBUG则不会输出。</p><h3 id="输出格式说明："><a href="#输出格式说明：" class="headerlink" title="输出格式说明："></a>输出格式说明：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。</span><br><span class="line">%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d&#123;yyyy/MM/dd HH:mm:ss,SSS&#125;。</span><br><span class="line">%r：输出自应用程序启动到输出该log信息耗费的毫秒数。</span><br><span class="line">%t：输出产生该日志事件的线程名。</span><br><span class="line">%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。</span><br><span class="line">%c：输出日志信息所属的类目，通常就是所在类的全名。</span><br><span class="line">%M：输出产生日志信息的方法名。</span><br><span class="line">%F：输出日志消息产生时所在的文件名称。</span><br><span class="line">%L:：输出代码中的行号。</span><br><span class="line">%m:：输出代码中指定的具体日志信息。</span><br><span class="line">%n：输出一个回车换行符，Windows平台为&quot;rn&quot;，Unix平台为&quot;n&quot;。</span><br><span class="line">%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。</span><br><span class="line">%%：输出一个&quot;%&quot;字符。</span><br><span class="line">另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：</span><br><span class="line">1) c：指定输出category的名称，最小的长度是20，如果category的名称长度小于20的话，默认的情况下右对齐。</span><br><span class="line">2)%-20c：&quot;-&quot;号表示左对齐。</span><br><span class="line">3)%.30c：指定输出category的名称，最大的长度是30，如果category的名称长度大于30的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。</span><br></pre></td></tr></table></figure><h3 id="log4j-xml"><a href="#log4j-xml" class="headerlink" title="log4j.xml"></a>log4j.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE log4j:configuration PUBLIC "-//log4j/log4j Configuration//EN" "log4j.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"consoleAppender"</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"Threshold"</span> <span class="attr">value</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件（info）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将生成“info.log.2014-06-11”这样的日志文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"fileAppenderInfo"</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.DailyRollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"File"</span> <span class="attr">value</span>=<span class="string">"$&#123;user.home&#125;/logs/website/info.log"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"DatePattern"</span> <span class="attr">value</span>=<span class="string">".yyyy-MM-dd"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.varia.LevelRangeFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"LevelMin"</span> <span class="attr">value</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"LevelMax"</span> <span class="attr">value</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件（warn）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"fileAppenderWarn"</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.DailyRollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"File"</span> <span class="attr">value</span>=<span class="string">"$&#123;user.home&#125;/logs/website/warn.log"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"DatePattern"</span> <span class="attr">value</span>=<span class="string">".yyyy-MM-dd"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.varia.LevelRangeFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"LevelMin"</span> <span class="attr">value</span>=<span class="string">"WARN"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"LevelMax"</span> <span class="attr">value</span>=<span class="string">"WARN"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件（error）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"fileAppenderError"</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.DailyRollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"File"</span> <span class="attr">value</span>=<span class="string">"$&#123;user.home&#125;/logs/website/error.log"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"DatePattern"</span> <span class="attr">value</span>=<span class="string">".yyyy-MM-dd"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.varia.LevelRangeFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"LevelMin"</span> <span class="attr">value</span>=<span class="string">"ERROR"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"LevelMax"</span> <span class="attr">value</span>=<span class="string">"ERROR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--屏蔽所有org.springframework.*输出的Debug（及以下）信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"INFO"</span>&gt;</span><span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ALL"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"consoleAppender"</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--    &lt;appender-ref ref="fileAppenderInfo" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;appender-ref ref="fileAppenderWarn" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;appender-ref ref="fileAppenderError" /&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#默认输出路径</span><br><span class="line">log4j.rootLogger=info,stdout,logfile,busi1</span><br><span class="line">log4j.appender.logfile=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.logfile.File=logs/cmsmgr.log</span><br><span class="line">log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.logfile.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %F %p %m%n</span><br><span class="line"></span><br><span class="line">log4j.logger.com.ibatis=INFO</span><br><span class="line">log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=INFO</span><br><span class="line">log4j.logger.com.ibatis.common.jdbc.ScriptRunner=INFO</span><br><span class="line">log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=INFO</span><br><span class="line">log4j.logger.java.sql.Connection=INFO</span><br><span class="line">log4j.logger.java.sql.Statement=INFO</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=INFO</span><br><span class="line">#输出到控制台</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.Threshold=INFO</span><br><span class="line">log4j.appender.stdout.ImmediateFlush=true</span><br><span class="line">log4j.appender.stdout.Target=System.err</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line">#输出到busi1</span><br><span class="line">log4j.logger.busi1= info, busi1</span><br><span class="line">#每天产生一个日志文件</span><br><span class="line">log4j.appender.busi1=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">#日志文件格式</span><br><span class="line">log4j.appender.busi1.DatePattern=&apos;.&apos;yyyy-MM-dd-HH</span><br><span class="line">#日志路径</span><br><span class="line">log4j.appender.busi1.File=logs/busi1.log</span><br><span class="line">#最低输出日志级别</span><br><span class="line">log4j.appender.busi1.Threshold = INFO</span><br><span class="line">#输出的布局样式</span><br><span class="line">log4j.appender.busi1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">#自定义输出哪些信息</span><br><span class="line">log4j.appender.busi1.layout.ConversionPattern=[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %l%t %m%n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#输出到busi</span><br><span class="line">log4j.logger.busi= info, busi</span><br><span class="line">log4j.appender.busi=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.busi.File=logs/busi.log</span><br><span class="line">log4j.appender.busi.Threshold = INFO</span><br><span class="line">log4j.appender.busi.DatePattern=&apos;.&apos;yyyy-MM-dd-HH</span><br><span class="line">log4j.appender.busi.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.busi.layout.ConversionPattern=[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %l%t %m%n</span><br></pre></td></tr></table></figure><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><a href="/2019/08/28/Log4j配置/log4j.properties" title="properties版">properties版</a><a href="/2019/08/28/Log4j配置/log4j.xml" title="xml版">xml版</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="配置文件" scheme="https://jmzc4j.github.io/categories/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="log4j" scheme="https://jmzc4j.github.io/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis逆向工程配置</title>
    <link href="https://jmzc4j.github.io/2019/08/28/Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/28/Mybatis逆向工程配置/</id>
    <published>2019-08-28T10:46:27.000Z</published>
    <updated>2019-08-30T08:39:34.322Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="what-is"><a href="#what-is" class="headerlink" title="what is"></a>what is</h3><ul><li>mybatis逆向工程，就是mybatis会根据我们设计好的数据表，自动生成pojo、mapper以及mapper.xml；</li><li>官方文档：<a href="http://www.mybatis.org/generator/" target="_blank" rel="noopener">generator</a>;</li></ul><h3 id="generateConfig-xml"><a href="#generateConfig-xml" class="headerlink" title="generateConfig.xml"></a>generateConfig.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入属性配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"generatorConfig.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--指定特定数据库的jdbc驱动jar包的位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"$&#123;db.driverLocation&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- targetRuntime="MyBatis3"：选择运行的mybatis版本 ;如果你希望不生成和Example查询有关的内容,可以使用MyBatis3Simple--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- defaultModelType="flat" :这种类型的model会为每个表生成唯一的一个类，这个类中会包含表中所有的字段 ;默认值conditional --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"default"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span></span></span><br><span class="line"><span class="tag"><span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在创建class时，对注释进行控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阻止生成注释，默认为false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jdbc的数据库连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionURL</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span> <span class="attr">userId</span>=<span class="string">"$&#123;jdbc.user&#125;"</span> <span class="attr">password</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;pojoTargetPackage&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">"$&#123;targetProject&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否允许子包，即targetPackage.schemaName.tableName --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否对model添加 构造函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否对类CHAR类型的列的数据进行trim操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 建立的Model对象是否不可改变  即生成的Model对象不会有 setter方法，只有构造方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"immutable"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--mapper xml映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;xmlTargetPackage&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">"$&#123;xmlTargetProject&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        type="XMLMAPPER" 接口和XML完全分离，接口中不出现SQL语句, 修改SQL不需要重新编译 (推荐使用)</span></span><br><span class="line"><span class="comment">        type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象</span></span><br><span class="line"><span class="comment">        type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetPackage</span>=<span class="string">"$&#123;mapperTargetPackage&#125;"</span> <span class="attr">targetProject</span>=<span class="string">"$&#123;targetProject&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成全部的表   tableName="%" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"EMP"</span> <span class="attr">domainObjectName</span>=<span class="string">"Emp"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- generatedKey：用来指定生成的主键  会在Insert语句中添加 selectKey标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"EMPNO"</span> <span class="attr">sqlStatement</span>=<span class="string">"MySql"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"DEPT"</span> <span class="attr">domainObjectName</span>=<span class="string">"Dept"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><a href="/2019/08/28/Mybatis逆向工程配置/generatorConfig.properties" title="generatorConfig.properties">generatorConfig.properties</a><a href="/2019/08/28/Mybatis逆向工程配置/generatorConfig.xml" title="generatorConfig.xml">generatorConfig.xml</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="配置文件" scheme="https://jmzc4j.github.io/categories/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="mybatis" scheme="https://jmzc4j.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>MySQL常用配置</title>
    <link href="https://jmzc4j.github.io/2019/08/28/MySQL%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/28/MySQL常用配置/</id>
    <published>2019-08-28T10:41:59.000Z</published>
    <updated>2019-08-30T10:13:13.325Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="my-cnf常用配置"><a href="#my-cnf常用配置" class="headerlink" title="my.cnf常用配置"></a>my.cnf常用配置</h3><p>[client]<br>#password = your_password<br>port = 3306                            #端口设置<br>socket = /tmp/mysql.sock             #本地客户端通讯需要使用的套接字文件，需要保护起来<br>default-character-set=utf-8            #客户端默认字符集       </p><p>[mysqld]<br>lower_case_table_names=1            #设置表名一律转小写，即大小写不敏感设置，Linux下默认是0<br>port = 3306                            #服务器端口<br>basedir=”/usr/local/mysql”            #设置mysql的安装目录<br>datadir=”/usr/local/mysql/data”        #设置mysql数据库的数据的存放目录<br>default-storage-engine=INNODB         #创建新表时将使用的默认存储引擎<br>socket = /tmp/mysql.sock             #服务器与本地客户端通讯的套接字文件位置<br>character-set-server=utf-8            #服务端使用的字符集<br>max_connections=100                    #服务器支持的最大并发连接数<br>query_cache_size=0                    #缓存查询结果的缓存大小<br>table_cache=256                        #为所有线程打开的表的数量<br>tmp_table_size=35M                    #内存中的每个临时表允许的最大大小<br>thread_cache_size=8                    #缓存的最大线程数             </p><p>#MyISAM相关参数<br>myisam_max_sort_file_size=100G  #重建索引时允许使用的临时文件最大大小<br>myisam_sort_buffer_size=68M        #快速创建索引的临时文件的缓冲区大小<br>key_buffer_size=54M                #缓存MyISAM表索引块的缓冲区大小，不要把它设置得超过可用内存的30%<br>read_buffer_size=64K            #全表扫描时使用的缓冲区大小<br>read_rnd_buffer_size=256K        #执行全表扫描的缓冲区的大小<br>sort_buffer_size=256K            #重建索引时为每个线程分配的缓冲区大小                 </p><p>#InnoDB相关参数<br>innodb_additional_mem_pool_size=34M #存储元数据信息的额外内存池大小，一般不需修改<br>innodb_flush_log_at_trx_commit =1    #事务提交频率，1表示每次都直接写入磁盘，不写入内存，更符合ACID的行为；其他值还有0和2，不推荐<br>innodb_log_buffer_size=2M            #缓冲日志数据的缓冲区大小，一旦已经满了，InnoDB必须把它刷新到磁盘上。<br>innodb_buffer_pool_size=105M        #缓存索引和行数据的缓冲池大小，一般将该值设为物理内存的80%<br>innodb_log_file_size=53M            #日志组中每个日志文件的大小。一般设为innodb_buffer_pool_size的25%到100%<br>innodb_thread_concurrency=10        #允许连接INNODB内核的最大并发线程数量              </p><p>#SQL模式为严格模式<br>sql-mode=”STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION”               </p><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><a href="/2019/08/28/MySQL常用配置/mysql.cnf" title="配置文件">配置文件</a><a href="/2019/08/28/MySQL常用配置/druid.properties" title="druid常用配置">druid常用配置</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="配置文件" scheme="https://jmzc4j.github.io/categories/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="mysql" scheme="https://jmzc4j.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>常用数据库的参数配置</title>
    <link href="https://jmzc4j.github.io/2019/08/28/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/28/常用数据库的参数配置/</id>
    <published>2019-08-28T10:37:28.000Z</published>
    <updated>2019-08-30T08:42:06.971Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="JDBC的URL"><a href="#JDBC的URL" class="headerlink" title="JDBC的URL"></a>JDBC的URL</h3><p>JDBC的URL＝协议名＋子协议名＋数据源名。<br>协议名总是“jdbc”。<br>子协议名由JDBC驱动程序的编写者决定。<br>数据源名也可能包含用户与口令等信息；这些信息也可单独提供。</p><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>mysql.driver=com.mysql.jdbc.Driver<br>mysql.url=jdbc:mysql://192.168.157.130:3306/mybatis01?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false<br>mysql.username=root<br>mysql.password=root</p><h3 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h3><p>oracle.driver=oracle.jdbc.driver.OracleDriver<br>oracle.url=jdbc:oracle:thin:@127.0.0.1:1521:xe<br>oracle.username=system<br>oracle.password=abc123</p><h3 id="sql-server"><a href="#sql-server" class="headerlink" title="sql server"></a>sql server</h3><p>sqlServer.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver<br>sqlServer.url=jdbc:sqlserver://localhost:1433;DatabaseName=mydb<br>sqlServer.username=sa<br>sqlServer.password=123</p><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><a href="/2019/08/28/常用数据库的参数配置/db.properties" title="db-properties文件">db-properties文件</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="配置文件" scheme="https://jmzc4j.github.io/categories/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="database" scheme="https://jmzc4j.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis常用配置</title>
    <link href="https://jmzc4j.github.io/2019/08/28/Mybatis%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/28/Mybatis常用配置/</id>
    <published>2019-08-28T10:23:58.000Z</published>
    <updated>2019-08-31T07:16:32.490Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="what-is"><a href="#what-is" class="headerlink" title="what is"></a>what is</h3><ul><li>MyBatis 是一款优秀的持久层框架，它支持定制化SQL、存储过程以及高级映射;避免了几乎所有的JDBC 代码和手动设置参数以及获取结果集;</li><li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects)映射成数据库中的记录;</li><li>官方文档：<a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">mybatis</a>;</li></ul><h3 id="mybatis-config-xml配置"><a href="#mybatis-config-xml配置" class="headerlink" title="mybatis-config.xml配置"></a>mybatis-config.xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">在配置文件中，属性的加载有三种方式：</span></span><br><span class="line"><span class="comment">1. resource或者url引入外部资源；</span></span><br><span class="line"><span class="comment">2. 在properties标签中使用property子标签进行定义，然后使用表达式引用；</span></span><br><span class="line"><span class="comment">3. 直接在要使用的位置硬编码；</span></span><br><span class="line"><span class="comment">注意：以上三种方式的优先级从低到高；</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"mybatis/db.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">全局配置信息</span></span><br><span class="line"><span class="comment">logImpl：mybatis日志的实现；</span></span><br><span class="line"><span class="comment">cacheEnabled：二级缓存开关；</span></span><br><span class="line"><span class="comment">lazyLoadingEnabled：懒加载开关；</span></span><br><span class="line"><span class="comment">aggressiveLazyLoading：积极懒加载开关，当懒加载时是否主动进行属性的初始化；</span></span><br><span class="line"><span class="comment">mapUnderscoreToCamelCase：数据库列映射Java对象属性开关；</span></span><br><span class="line"><span class="comment">useActualParamName：参数命名开关；</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"slf4j"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useActualParamName"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">以包扫描的方式进行别名定义，默认类名首字母小写（注意别名其实是不区分大小写的）；</span></span><br><span class="line"><span class="comment">当子包有相同的 类名存在时，可以使用@Alias注解进行签名；</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"top.jmzc.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">插件配置：以AOP的方式对Executor、StatementHandler、ParameterHandler、ResultSetHandler四大对象的方法进行拦截；</span></span><br><span class="line"><span class="comment">自定义插件的步骤：</span></span><br><span class="line"><span class="comment">1. 实现Intercept接口，逐一实现setProperties()、plugin()和intercept()方法；</span></span><br><span class="line"><span class="comment">2. 为定制的插件进行签名，使用@@Intercepts注解；</span></span><br><span class="line"><span class="comment">3. 在mybatis配置文件中进行声明；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">pagehelper5中可以自动配置dialect，当进行定制配置时，dialect的值一定是全类名，源码中发现使用dialectClass进行反射</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name="dialect" value="com.github.pagehelper.dialect.helper.MySqlDialect"/&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev_mysql"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">配置Session的环境，可以有多个环境，通过environments标签的default属性来切换；</span></span><br><span class="line"><span class="comment">transactionManager：需要指定事务工厂的类型，这里使用的是别名，也可以实现ibatis提供的接口来进行定制；</span></span><br><span class="line"><span class="comment">dataSource：需要指定数据源工厂的类型，同样使用的是别名，同样可以实现ibatis提供的接口进行定制；</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev_mysql"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;mysql.driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;mysql.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;mysql.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;mysql.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">为不同的数据库厂商的ProductName设置别名；</span></span><br><span class="line"><span class="comment">ProductName可以从Connection接口的MetaData中得到；</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"MySQL"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Oracle"</span> <span class="attr">value</span>=<span class="string">"oracle"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SQL Server"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定映射文件的包路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"top.jmzc.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><p>l</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="配置文件" scheme="https://jmzc4j.github.io/categories/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="mybatis" scheme="https://jmzc4j.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Redis常用配置</title>
    <link href="https://jmzc4j.github.io/2019/08/28/Redis%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/28/Redis常用配置/</id>
    <published>2019-08-28T10:19:39.000Z</published>
    <updated>2019-08-30T08:43:32.643Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="redis-cof常见配置说明"><a href="#redis-cof常见配置说明" class="headerlink" title="redis.cof常见配置说明"></a>redis.cof常见配置说明</h3><ol><li>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程<br>daemonize no</li><li>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定<br>pidfile /var/run/redis.pid</li><li>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字<br>port 6379</li><li>绑定的主机地址<br>bind 127.0.0.1</li><li>当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能<br>timeout 300</li><li>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose<br>loglevel verbose</li><li>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null<br>logfile stdout</li><li>设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id<br>databases 16</li><li>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合<br>save<br>Redis默认配置文件中提供了三个条件：<br>save 900 1<br>save 300 10<br>save 60 10000<br>分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</li><li>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大<br>rdbcompression yes</li><li>指定本地数据库文件名，默认值为dump.rdb<br>dbfilename dump.rdb</li><li>指定本地数据库存放目录<br>dir ./</li><li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步<br>slaveof </li><li>当master服务设置了密码保护时，slav服务连接master的密码<br>masterauth </li><li>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH 命令提供密码，默认关闭<br>requirepass foobared</li><li>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息<br>maxclients 128</li><li>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区<br>maxmemory </li><li>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no<br>appendonly no</li><li>指定更新日志文件名，默认为appendonly.aof<br>appendfilename appendonly.aof</li><li>指定更新日志条件，共有3个可选值：<br>no：表示等操作系统进行数据缓存同步到磁盘（快）<br>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）<br>everysec：表示每秒同步一次（折衷，默认值）<br>appendfsync everysec</li><li>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）<br>vm-enabled no</li><li>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享<br>vm-swap-file /tmp/redis.swap</li><li>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0<br>vm-max-memory 0</li><li>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值<br>vm-page-size 32</li><li>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。<br>vm-pages 134217728</li><li>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4<br>vm-max-threads 4</li><li>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启<br>glueoutputbuf yes</li><li>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法<br>hash-max-zipmap-entries 64<br>hash-max-zipmap-value 512</li><li>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）<br>activerehashing yes</li><li>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件<br>include /path/to/local.conf</li></ol><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><a href="/2019/08/28/Redis常用配置/redis.conf" title="未改动过的配置文件">未改动过的配置文件</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="配置文件" scheme="https://jmzc4j.github.io/categories/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="redis" scheme="https://jmzc4j.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门</title>
    <link href="https://jmzc4j.github.io/2019/08/28/Docker%E5%85%A5%E9%97%A8/"/>
    <id>https://jmzc4j.github.io/2019/08/28/Docker入门/</id>
    <published>2019-08-28T09:09:05.000Z</published>
    <updated>2019-08-30T08:51:14.001Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="what-is"><a href="#what-is" class="headerlink" title="what is"></a>what is</h3><ul><li>Docker是一个容器管理引擎，是一个轻量级的虚拟化技术；从镜像和容器的角度来定义一个应用；</li><li>将应用代码和配置等打包成一个可运行的环境（image），从而实现开发和生产环境的完美对接，达到一种一次构建到处运行的目的；</li><li>repository、image、container为其最重要的三个组成部分。</li><li>image是由一层一层的文件系统组成，即UnionFS；其最底层是bootfs；</li><li>image都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部；这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。</li><li>通过容器数据卷来实现数据持久化和数据共享；</li></ul><h3 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h3><ul><li><p>centos安装步骤</p><p>  ①卸载旧版本</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$sudo yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br></pre></td></tr></table></figure><p>  ②安装依赖包</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sudo yum install -y yum-utils \</span><br><span class="line">device-mapper-persistent-data \</span><br><span class="line">lvm2</span><br></pre></td></tr></table></figure><p>  ③配置仓库地址（这里使用阿里巴巴的国内镜像）</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$sudo yum-config-manager \</span><br><span class="line">   --add-repo \</span><br><span class="line">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">#这里可以清理yum缓存文件</span><br><span class="line">$yum makecache fast</span><br></pre></td></tr></table></figure><p>  ④安装最新版或者自行选择版本</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#列出docker引擎的可用版本</span><br><span class="line">$yum list docker-ce --showduplicates | sort -r</span><br><span class="line">#选择版本进行安装</span><br><span class="line">#例如查到docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">#那么VERSION_STRING就是 docker-ce-18.09.1</span><br><span class="line">$sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class="line"></span><br><span class="line">#也可以直接安装最新版</span><br><span class="line">$sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>  ⑤启动</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>  ⑥测试</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br><span class="line"></span><br><span class="line">或者执行docker version</span><br></pre></td></tr></table></figure><p>  ⑦配置阿里云的镜像加速</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">登录阿里云进入控制台，搜索容器镜像服务</span><br><span class="line">点击镜像加速器，然后找到centos的配置信息，按步骤配置即可</span><br><span class="line"></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">#这里的镜像ID（u7dhnsts）不同人会不同</span><br><span class="line">&#123;&quot;registry-mirrors&quot;: [&quot;https://u7dhnsts.mirror.aliyuncs.com&quot;]  &#125;</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>卸载</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker-ce</span><br><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li></ul><h3 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h3><ol><li><p><code>docker --help|docker &lt;command&gt; --help</code>：查看帮助</p></li><li><p><code>docker images</code> ：查看镜像列表；</p></li><li><p><code>docker rmi -f $(docker images -qa)</code>：删除多个镜像；</p></li><li><p><code>docker ps</code>；查看正在运行的容器；</p></li><li><p><code>docker rm -f $(docker ps -qa)</code>：删除所有的容器；</p></li><li><p><code>docker run &lt;containerName|containerID&gt;</code> ：在镜像上创建一个容器（本地没有则会自动去远程仓库拉去）；    </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS说明（常用）：有些是一个减号，有些是两个减号</span><br><span class="line">--name=&quot;容器新名字&quot;: 为容器指定一个名称；</span><br><span class="line">-d: 后台运行容器，并返回容器ID，也即启动守护式容器；</span><br><span class="line">-i：以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">-P: 随机端口映射；</span><br><span class="line">-p: 指定端口映射，有以下四种格式</span><br><span class="line">  ip:hostPort:containerPort</span><br><span class="line">  ip::containerPort</span><br><span class="line"> hostPort:containerPort</span><br><span class="line">  containerPort</span><br><span class="line">```     </span><br><span class="line">1. `docker search &lt;imageName:tag&gt;`：在仓库上搜索镜像，默认latest；</span><br><span class="line">1. `docker pull &lt;imageName:tag&gt;`：从远程拉取镜像到本地；</span><br><span class="line">1. `docker exec -it /bin/bash`：进入正在运行的容器；</span><br><span class="line">1. `docker commit -m &quot;xxx&quot; -a &quot;xxx&quot; &lt;containerName|containerID&gt; targetImage:tag`：基于容器生成一个新的镜像；</span><br><span class="line">1. `docker inspect &lt;containerName|containerID&gt;`：查看容器的详细信息；</span><br><span class="line">1. `docker info | docker version`：查看docker的简单信息；</span><br><span class="line">1. `docker logs -f &lt;containerName|containerID&gt;`：查看一个容器的历史记录</span><br><span class="line">1. `docker start|stop|restart &lt;containerName|containerID&gt;`：启动、停止、重启容器；</span><br><span class="line">1. `docker kill &lt;containerName|containerID&gt;`：强制停止容器；</span><br><span class="line">1. `docker cp  containerID:path hostPath`：从容器拷贝文件到主机；</span><br><span class="line">1. `docker build -t 新镜像名字:TAG `：从Dockerfile中创建镜像；</span><br><span class="line">1. `docker history 镜像名`：查看镜像的变更历史；</span><br><span class="line"></span><br><span class="line">### Dockerfile</span><br><span class="line">- Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本；</span><br><span class="line">- Dockerfile约定</span><br><span class="line">1. 每条保留字指令都必须为大写字母且后面要跟随至少一个参数；</span><br><span class="line">2. 指令按照从上到下，顺序执行；</span><br><span class="line">3. 每条指令都会创建一个新的镜像层，并对镜像进行提交；</span><br><span class="line">- Dockerfile大致流程</span><br><span class="line">1. docker从基础镜像运行一个容器；</span><br><span class="line">2. 执行一条指令并对容器作出修改；</span><br><span class="line">3. 执行类似docker commit的操作提交一个新的镜像层；</span><br><span class="line">4. docker再基于刚提交的镜像运行一个新容器；</span><br><span class="line">5. 执行dockerfile中的下一条指令直到所有指令都执行完成；</span><br><span class="line">- Dockerfile中的关键字</span><br><span class="line">1. `FROM`：基础镜像，当前新镜像是基于哪个镜像的；</span><br><span class="line">1. `MAINTAINER`：镜像维护者的姓名和邮箱地址；</span><br><span class="line">1. `RUN`：容器构建时需要运行的命令；</span><br><span class="line">1. `EXPOSE`：当前容器对外暴露出的端口；</span><br><span class="line">1. `WORKDIR`：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点；</span><br><span class="line">1. `ENV`：用来在构建镜像过程中设置环境变量；</span><br><span class="line">1. `ADD`：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包；</span><br><span class="line">1. `COPY`：类似ADD，拷贝文件和目录到镜像中；但不进行解压；</span><br><span class="line">1. `VOLUME`：容器数据卷，用于数据保存和持久化工作；</span><br><span class="line">1. `CMD`：指定一个容器启动时要运行的命令；多个CMD会被覆盖；CMD 会被 docker run 之后的参数替换；</span><br><span class="line">1. `ENTRYPOINT`：ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数，以追加的方式执行；</span><br><span class="line">1. `ONBUILD`：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发；</span><br><span class="line">- 自定义tomcat9</span><br></pre></td></tr></table></figure><p> FROM         centos<br> MAINTAINER    zzyy<br> #把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下<br> COPY c.txt /usr/local/cincontainer.txt<br> #把java与tomcat添加到容器中<br> ADD jdk-8u171-linux-x64.tar.gz /usr/local/<br> ADD apache-tomcat-9.0.8.tar.gz /usr/local/<br> #安装vim编辑器<br> RUN yum -y install vim<br> #设置工作访问时候的WORKDIR路径，登录落脚点<br> ENV MYPATH /usr/local<br> WORKDIR $MYPATH<br> #配置java与tomcat环境变量<br> ENV JAVA_HOME /usr/local/jdk1.8.0_171<br> ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br> ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.8<br> ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.8<br> ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin<br> #容器运行时监听的端口<br> EXPOSE  8080<br> #启动时运行tomcat</p><h1 id="ENTRYPOINT-“-usr-local-apache-tomcat-9-0-8-bin-startup-sh”"><a href="#ENTRYPOINT-“-usr-local-apache-tomcat-9-0-8-bin-startup-sh”" class="headerlink" title="ENTRYPOINT [“/usr/local/apache-tomcat-9.0.8/bin/startup.sh” ]"></a>ENTRYPOINT [“/usr/local/apache-tomcat-9.0.8/bin/startup.sh” ]</h1><h1 id="CMD-“-usr-local-apache-tomcat-9-0-8-bin-catalina-sh”-”run”"><a href="#CMD-“-usr-local-apache-tomcat-9-0-8-bin-catalina-sh”-”run”" class="headerlink" title="CMD [“/usr/local/apache-tomcat-9.0.8/bin/catalina.sh”,”run”]"></a>CMD [“/usr/local/apache-tomcat-9.0.8/bin/catalina.sh”,”run”]</h1><p> CMD /usr/local/apache-tomcat-9.0.8/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.8/bin/logs/catalina.out</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### docker安装mysql5.7</span><br></pre></td></tr></table></figure></li></ol><p>docker run -d –name mysql-5.7 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/local/mysql/data:/var/lib/mysql -v /usr/local/mysql/my.cnf:/etc/mysql/my.cnf -v /usr/local/mysql/conf.d:/etc/mysql/conf.d -v /usr/local//mysql/mysql.conf.d:/etc/mysql/mysql.conf.d -v /usr/local/mysql/log:/var/log/mysql –privileged=true mysql:5.7</p><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://jmzc4j.github.io/tags/docker/"/>
    
  </entry>
  
</feed>
