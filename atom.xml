<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jmzc&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jmzc4j.github.io/"/>
  <updated>2019-08-28T10:44:57.928Z</updated>
  <id>https://jmzc4j.github.io/</id>
  
  <author>
    <name>Jmzc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL常用配置</title>
    <link href="https://jmzc4j.github.io/2019/08/28/MySQL%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/28/MySQL常用配置/</id>
    <published>2019-08-28T10:41:59.000Z</published>
    <updated>2019-08-28T10:44:57.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="my-cnf常用配置"><a href="#my-cnf常用配置" class="headerlink" title="my.cnf常用配置"></a>my.cnf常用配置</h3><p>[client]<br>#password = your_password<br>port = 3306                            #端口设置<br>socket = /tmp/mysql.sock             #本地客户端通讯需要使用的套接字文件，需要保护起来<br>default-character-set=utf-8            #客户端默认字符集       </p><p>[mysqld]<br>lower_case_table_names=1            #设置表名一律转小写，即大小写不敏感设置，Linux下默认是0<br>port = 3306                            #服务器端口<br>basedir=”/usr/local/mysql”            #设置mysql的安装目录<br>datadir=”/usr/local/mysql/data”        #设置mysql数据库的数据的存放目录<br>default-storage-engine=INNODB         #创建新表时将使用的默认存储引擎<br>socket = /tmp/mysql.sock             #服务器与本地客户端通讯的套接字文件位置<br>character-set-server=utf-8            #服务端使用的字符集<br>max_connections=100                    #服务器支持的最大并发连接数<br>query_cache_size=0                    #缓存查询结果的缓存大小<br>table_cache=256                        #为所有线程打开的表的数量<br>tmp_table_size=35M                    #内存中的每个临时表允许的最大大小<br>thread_cache_size=8                    #缓存的最大线程数             </p><p>#MyISAM相关参数<br>myisam_max_sort_file_size=100G  #重建索引时允许使用的临时文件最大大小<br>myisam_sort_buffer_size=68M        #快速创建索引的临时文件的缓冲区大小<br>key_buffer_size=54M                #缓存MyISAM表索引块的缓冲区大小，不要把它设置得超过可用内存的30%<br>read_buffer_size=64K            #全表扫描时使用的缓冲区大小<br>read_rnd_buffer_size=256K        #执行全表扫描的缓冲区的大小<br>sort_buffer_size=256K            #重建索引时为每个线程分配的缓冲区大小                 </p><p>#InnoDB相关参数<br>innodb_additional_mem_pool_size=34M #存储元数据信息的额外内存池大小，一般不需修改<br>innodb_flush_log_at_trx_commit =1    #事务提交频率，1表示每次都直接写入磁盘，不写入内存，更符合ACID的行为；其他值还有0和2，不推荐<br>innodb_log_buffer_size=2M            #缓冲日志数据的缓冲区大小，一旦已经满了，InnoDB必须把它刷新到磁盘上。<br>innodb_buffer_pool_size=105M        #缓存索引和行数据的缓冲池大小，一般将该值设为物理内存的80%<br>innodb_log_file_size=53M            #日志组中每个日志文件的大小。一般设为innodb_buffer_pool_size的25%到100%<br>innodb_thread_concurrency=10        #允许连接INNODB内核的最大并发线程数量              </p><p>#SQL模式为严格模式<br>sql-mode=”STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION”               </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;my-cnf常用配置&quot;&gt;&lt;a href=&quot;#my-cnf常用配置&quot; class=&quot;headerlink&quot; title=&quot;my.cnf常用配置&quot;&gt;&lt;/a&gt;my.cnf常用配置&lt;/h3&gt;&lt;p&gt;[client]&lt;br&gt;#password = your_password&lt;
      
    
    </summary>
    
      <category term="配置文件" scheme="https://jmzc4j.github.io/categories/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="mysql" scheme="https://jmzc4j.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>常用数据库的参数配置</title>
    <link href="https://jmzc4j.github.io/2019/08/28/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/28/常用数据库的参数配置/</id>
    <published>2019-08-28T10:37:28.000Z</published>
    <updated>2019-08-28T10:41:01.732Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JDBC的URL"><a href="#JDBC的URL" class="headerlink" title="JDBC的URL"></a>JDBC的URL</h3><p>JDBC的URL＝协议名＋子协议名＋数据源名。<br>协议名总是“jdbc”。<br>子协议名由JDBC驱动程序的编写者决定。<br>数据源名也可能包含用户与口令等信息；这些信息也可单独提供。</p><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>mysql.driver=com.mysql.jdbc.Driver<br>mysql.url=jdbc:mysql://192.168.157.130:3306/mybatis01?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false<br>mysql.username=root<br>mysql.password=root</p><h3 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h3><p>oracle.driver=oracle.jdbc.driver.OracleDriver<br>oracle.url=jdbc:oracle:thin:@127.0.0.1:1521:xe<br>oracle.username=system<br>oracle.password=abc123</p><h3 id="sql-server"><a href="#sql-server" class="headerlink" title="sql server"></a>sql server</h3><p>sqlServer.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver<br>sqlServer.url=jdbc:sqlserver://localhost:1433;DatabaseName=mydb<br>sqlServer.username=sa<br>sqlServer.password=123</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JDBC的URL&quot;&gt;&lt;a href=&quot;#JDBC的URL&quot; class=&quot;headerlink&quot; title=&quot;JDBC的URL&quot;&gt;&lt;/a&gt;JDBC的URL&lt;/h3&gt;&lt;p&gt;JDBC的URL＝协议名＋子协议名＋数据源名。&lt;br&gt;协议名总是“jdbc”。&lt;br&gt;子协议
      
    
    </summary>
    
      <category term="配置文件" scheme="https://jmzc4j.github.io/categories/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="database" scheme="https://jmzc4j.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis常用配置</title>
    <link href="https://jmzc4j.github.io/2019/08/28/Mybatis%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/28/Mybatis常用配置/</id>
    <published>2019-08-28T10:23:58.000Z</published>
    <updated>2019-08-28T10:30:48.032Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mybatis-config-xml配置"><a href="#mybatis-config-xml配置" class="headerlink" title="mybatis-config.xml配置"></a>mybatis-config.xml配置</h3><?xml version="1.0" encoding="UTF-8"?><!DOCTYPE configurationPUBLIC "-//mybatis.org//DTD Config 3.0//EN""http://mybatis.org/dtd/mybatis-3-config.dtd"><configuration>    <!--         在配置文件中，属性的加载有三种方式：        1. resource或者url引入外部资源；        2. 在properties标签中使用property子标签进行定义，然后使用表达式引用；        3. 直接在要使用的位置硬编码；        注意：以上三种方式的优先级从低到高；     -->    <properties resource="db.properties"><pre><code>&lt;!--     全局配置信息    logImpl：mybatis日志的实现；    cacheEnabled：二级缓存开关；    lazyLoadingEnabled：懒加载开关；    aggressiveLazyLoading：积极懒加载开关，当懒加载时是否主动进行属性的初始化；    mapUnderscoreToCamelCase：数据库列映射Java对象属性开关；    useActualParamName：参数命名开关； --&gt;&lt;settings&gt;    &lt;setting name=&quot;logImpl&quot; value=&quot;slf4j&quot;/&gt;    &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot; /&gt;    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot; /&gt;    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot; /&gt;    &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;    &lt;setting name=&quot;useActualParamName&quot; value=&quot;true&quot;/&gt;&lt;/settings&gt;&lt;typeAliases&gt;    &lt;!--         以包扫描的方式进行别名定义，默认类名首字母小写（注意别名其实是不区分大小写的）；        当子包有相同的 类名存在时，可以使用@Alias注解进行签名；    --&gt;    &lt;package name=&quot;top.jmzc.pojo&quot;/&gt;&lt;/typeAliases&gt;&lt;plugins&gt;    &lt;!--         插件配置：以AOP的方式对Executor、MappedStatement、ParameterHandler、ResultSetHandler四大对象的方法进行拦截；        自定义插件的步骤：        1. 实现Intercept接口，逐一实现setProperties()、plugin()和intercept()方法；        2. 为定制的插件进行签名，使用@@Intercepts注解；        3. 在mybatis配置文件中进行声明；     --&gt;    &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;        &lt;property name=&quot;dialect&quot; value=&quot;mysql&quot;/&gt;    &lt;/plugin&gt;&lt;/plugins&gt;&lt;environments default=&quot;dev_mysql&quot;&gt;    &lt;!--         配置Session的环境，可以有多个环境，通过environments标签的default属性来切换；        transactionManager：需要指定事务工厂的类型，这里使用的是别名，也可以实现ibatis提供的接口来进行定制；        dataSource：需要指定数据源工厂的类型，同样使用的是别名，同样可以实现ibatis提供的接口进行定制；     --&gt;    &lt;environment id=&quot;dev_mysql&quot;&gt;        &lt;transactionManager type=&quot;JDBC&quot; /&gt;        &lt;dataSource type=&quot;POOLED&quot;&gt;            &lt;property name=&quot;driver&quot; value=&quot;${jdbc.driverClassName}&quot; /&gt;            &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot; /&gt;            &lt;property name=&quot;username&quot; value=&quot;${jdbc.usernme}&quot; /&gt;            &lt;property name=&quot;pasword&quot; value=&quot;${jdbc.password}&quot; /&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;&lt;/environments&gt;&lt;!--     为不同的数据库厂商的ProductName设置别名；    ProductName可以从Connection接口的MetaData中得到； --&gt;&lt;databaseIdProvider type=&quot;DB_VENDOR&quot;&gt;    &lt;property name=&quot;MySQL&quot; value=&quot;mysql&quot;/&gt;    &lt;property name=&quot;Oracle&quot; value=&quot;oracle&quot;/&gt;    &lt;property name=&quot;SQL Server&quot; value=&quot;sqlserver&quot;/&gt;&lt;/databaseIdProvider&gt;&lt;mappers&gt;    &lt;!-- 指定映射文件的包路径 --&gt;    &lt;package name=&quot;top.jmzc.mapper&quot;/&gt;&lt;/mappers&gt;</code></pre></properties></configuration>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mybatis-config-xml配置&quot;&gt;&lt;a href=&quot;#mybatis-config-xml配置&quot; class=&quot;headerlink&quot; title=&quot;mybatis-config.xml配置&quot;&gt;&lt;/a&gt;mybatis-config.xml配置&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="配置文件" scheme="https://jmzc4j.github.io/categories/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="mybatis" scheme="https://jmzc4j.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Redis常用配置</title>
    <link href="https://jmzc4j.github.io/2019/08/28/Redis%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://jmzc4j.github.io/2019/08/28/Redis常用配置/</id>
    <published>2019-08-28T10:19:39.000Z</published>
    <updated>2019-08-28T10:21:07.605Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis-cof常见配置说明"><a href="#redis-cof常见配置说明" class="headerlink" title="redis.cof常见配置说明"></a>redis.cof常见配置说明</h3><ol><li>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程<br>daemonize no</li><li>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定<br>pidfile /var/run/redis.pid</li><li>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字<br>port 6379</li><li>绑定的主机地址<br>bind 127.0.0.1</li><li>当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能<br>timeout 300</li><li>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose<br>loglevel verbose</li><li>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null<br>logfile stdout</li><li>设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id<br>databases 16</li><li>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合<br>save<br>Redis默认配置文件中提供了三个条件：<br>save 900 1<br>save 300 10<br>save 60 10000<br>分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</li><li>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大<br>rdbcompression yes</li><li>指定本地数据库文件名，默认值为dump.rdb<br>dbfilename dump.rdb</li><li>指定本地数据库存放目录<br>dir ./</li><li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步<br>slaveof </li><li>当master服务设置了密码保护时，slav服务连接master的密码<br>masterauth </li><li>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH 命令提供密码，默认关闭<br>requirepass foobared</li><li>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息<br>maxclients 128</li><li>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区<br>maxmemory </li><li>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no<br>appendonly no</li><li>指定更新日志文件名，默认为appendonly.aof<br>appendfilename appendonly.aof</li><li>指定更新日志条件，共有3个可选值：<br>no：表示等操作系统进行数据缓存同步到磁盘（快）<br>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）<br>everysec：表示每秒同步一次（折衷，默认值）<br>appendfsync everysec</li><li>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）<br>vm-enabled no</li><li>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享<br>vm-swap-file /tmp/redis.swap</li><li>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0<br>vm-max-memory 0</li><li>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值<br>vm-page-size 32</li><li>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。<br>vm-pages 134217728</li><li>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4<br>vm-max-threads 4</li><li>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启<br>glueoutputbuf yes</li><li>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法<br>hash-max-zipmap-entries 64<br>hash-max-zipmap-value 512</li><li>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）<br>activerehashing yes</li><li>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件<br>include /path/to/local.conf</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;redis-cof常见配置说明&quot;&gt;&lt;a href=&quot;#redis-cof常见配置说明&quot; class=&quot;headerlink&quot; title=&quot;redis.cof常见配置说明&quot;&gt;&lt;/a&gt;redis.cof常见配置说明&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Redis默认不是以守护
      
    
    </summary>
    
      <category term="配置文件" scheme="https://jmzc4j.github.io/categories/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="redis" scheme="https://jmzc4j.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门</title>
    <link href="https://jmzc4j.github.io/2019/08/28/Docker%E5%85%A5%E9%97%A8/"/>
    <id>https://jmzc4j.github.io/2019/08/28/Docker入门/</id>
    <published>2019-08-28T09:09:05.000Z</published>
    <updated>2019-08-28T10:17:35.303Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is"><a href="#what-is" class="headerlink" title="what is"></a>what is</h3><ul><li>Docker是一个容器管理引擎，是一个轻量级的虚拟化技术；从镜像和容器的角度来定义一个应用；</li><li>将应用代码和配置等打包成一个可运行的环境（image），从而实现开发和生产环境的完美对接，达到一种一次构建到处运行的目的；</li><li>repository、image、container为其最重要的三个组成部分。</li><li>image是由一层一层的文件系统组成，即UnionFS；其最底层是bootfs；</li><li>image都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部；这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。</li><li>通过容器数据卷来实现数据持久化和数据共享；</li></ul><h3 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h3><ul><li><p>centos安装步骤</p><p>  ①卸载旧版本</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$sudo yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br></pre></td></tr></table></figure><p>  ②安装依赖包</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sudo yum install -y yum-utils \</span><br><span class="line">device-mapper-persistent-data \</span><br><span class="line">lvm2</span><br></pre></td></tr></table></figure><p>  ③配置仓库地址（这里使用阿里巴巴的国内镜像）</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$sudo yum-config-manager \</span><br><span class="line">   --add-repo \</span><br><span class="line">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">#这里可以清理yum缓存文件</span><br><span class="line">$yum makecache fast</span><br></pre></td></tr></table></figure><p>  ④安装最新版或者自行选择版本</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#列出docker引擎的可用版本</span><br><span class="line">$yum list docker-ce --showduplicates | sort -r</span><br><span class="line">#选择版本进行安装</span><br><span class="line">#例如查到docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">#那么VERSION_STRING就是 docker-ce-18.09.1</span><br><span class="line">$sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class="line"></span><br><span class="line">#也可以直接安装最新版</span><br><span class="line">$sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>  ⑤启动</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>  ⑥测试</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br><span class="line"></span><br><span class="line">或者执行docker version</span><br></pre></td></tr></table></figure><p>  ⑦配置阿里云的镜像加速</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">登录阿里云进入控制台，搜索容器镜像服务</span><br><span class="line">点击镜像加速器，然后找到centos的配置信息，按步骤配置即可</span><br><span class="line"></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">#这里的镜像ID（u7dhnsts）不同人会不同</span><br><span class="line">&#123;&quot;registry-mirrors&quot;: [&quot;https://u7dhnsts.mirror.aliyuncs.com&quot;]  &#125;</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>卸载</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker-ce</span><br><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li></ul><h3 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h3><ol><li><p><code>docker --help|docker &lt;command&gt; --help</code>：查看帮助</p></li><li><p><code>docker images</code> ：查看镜像列表；</p></li><li><p><code>docker rmi -f $(docker images -qa)</code>：删除多个镜像；</p></li><li><p><code>docker ps</code>；查看正在运行的容器；</p></li><li><p><code>docker rm -f $(docker ps -qa)</code>：删除所有的容器；</p></li><li><p><code>docker run &lt;containerName|containerID&gt;</code> ：在镜像上创建一个容器（本地没有则会自动去远程仓库拉去）；    </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS说明（常用）：有些是一个减号，有些是两个减号</span><br><span class="line">--name=&quot;容器新名字&quot;: 为容器指定一个名称；</span><br><span class="line">-d: 后台运行容器，并返回容器ID，也即启动守护式容器；</span><br><span class="line">-i：以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">-P: 随机端口映射；</span><br><span class="line">-p: 指定端口映射，有以下四种格式</span><br><span class="line">  ip:hostPort:containerPort</span><br><span class="line">  ip::containerPort</span><br><span class="line"> hostPort:containerPort</span><br><span class="line">  containerPort</span><br><span class="line">```     </span><br><span class="line">1. `docker search &lt;imageName:tag&gt;`：在仓库上搜索镜像，默认latest；</span><br><span class="line">1. `docker pull &lt;imageName:tag&gt;`：从远程拉取镜像到本地；</span><br><span class="line">1. `docker exec -it /bin/bash`：进入正在运行的容器；</span><br><span class="line">1. `docker commit -m &quot;xxx&quot; -a &quot;xxx&quot; &lt;containerName|containerID&gt; targetImage:tag`：基于容器生成一个新的镜像；</span><br><span class="line">1. `docker inspect &lt;containerName|containerID&gt;`：查看容器的详细信息；</span><br><span class="line">1. `docker info | docker version`：查看docker的简单信息；</span><br><span class="line">1. `docker logs -f &lt;containerName|containerID&gt;`：查看一个容器的历史记录</span><br><span class="line">1. `docker start|stop|restart &lt;containerName|containerID&gt;`：启动、停止、重启容器；</span><br><span class="line">1. `docker kill &lt;containerName|containerID&gt;`：强制停止容器；</span><br><span class="line">1. `docker cp  containerID:path hostPath`：从容器拷贝文件到主机；</span><br><span class="line">1. `docker build -t 新镜像名字:TAG `：从Dockerfile中创建镜像；</span><br><span class="line">1. `docker history 镜像名`：查看镜像的变更历史；</span><br><span class="line"></span><br><span class="line">### Dockerfile</span><br><span class="line">- Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本；</span><br><span class="line">- Dockerfile约定</span><br><span class="line">1. 每条保留字指令都必须为大写字母且后面要跟随至少一个参数；</span><br><span class="line">2. 指令按照从上到下，顺序执行；</span><br><span class="line">3. 每条指令都会创建一个新的镜像层，并对镜像进行提交；</span><br><span class="line">- Dockerfile大致流程</span><br><span class="line">1. docker从基础镜像运行一个容器；</span><br><span class="line">2. 执行一条指令并对容器作出修改；</span><br><span class="line">3. 执行类似docker commit的操作提交一个新的镜像层；</span><br><span class="line">4. docker再基于刚提交的镜像运行一个新容器；</span><br><span class="line">5. 执行dockerfile中的下一条指令直到所有指令都执行完成；</span><br><span class="line">- Dockerfile中的关键字</span><br><span class="line">1. `FROM`：基础镜像，当前新镜像是基于哪个镜像的；</span><br><span class="line">1. `MAINTAINER`：镜像维护者的姓名和邮箱地址；</span><br><span class="line">1. `RUN`：容器构建时需要运行的命令；</span><br><span class="line">1. `EXPOSE`：当前容器对外暴露出的端口；</span><br><span class="line">1. `WORKDIR`：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点；</span><br><span class="line">1. `ENV`：用来在构建镜像过程中设置环境变量；</span><br><span class="line">1. `ADD`：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包；</span><br><span class="line">1. `COPY`：类似ADD，拷贝文件和目录到镜像中；但不进行解压；</span><br><span class="line">1. `VOLUME`：容器数据卷，用于数据保存和持久化工作；</span><br><span class="line">1. `CMD`：指定一个容器启动时要运行的命令；多个CMD会被覆盖；CMD 会被 docker run 之后的参数替换；</span><br><span class="line">1. `ENTRYPOINT`：ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数，以追加的方式执行；</span><br><span class="line">1. `ONBUILD`：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发；</span><br><span class="line">- 自定义tomcat9</span><br></pre></td></tr></table></figure><p> FROM         centos<br> MAINTAINER    zzyy<br> #把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下<br> COPY c.txt /usr/local/cincontainer.txt<br> #把java与tomcat添加到容器中<br> ADD jdk-8u171-linux-x64.tar.gz /usr/local/<br> ADD apache-tomcat-9.0.8.tar.gz /usr/local/<br> #安装vim编辑器<br> RUN yum -y install vim<br> #设置工作访问时候的WORKDIR路径，登录落脚点<br> ENV MYPATH /usr/local<br> WORKDIR $MYPATH<br> #配置java与tomcat环境变量<br> ENV JAVA_HOME /usr/local/jdk1.8.0_171<br> ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br> ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.8<br> ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.8<br> ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin<br> #容器运行时监听的端口<br> EXPOSE  8080<br> #启动时运行tomcat</p><h1 id="ENTRYPOINT-“-usr-local-apache-tomcat-9-0-8-bin-startup-sh”"><a href="#ENTRYPOINT-“-usr-local-apache-tomcat-9-0-8-bin-startup-sh”" class="headerlink" title="ENTRYPOINT [“/usr/local/apache-tomcat-9.0.8/bin/startup.sh” ]"></a>ENTRYPOINT [“/usr/local/apache-tomcat-9.0.8/bin/startup.sh” ]</h1><h1 id="CMD-“-usr-local-apache-tomcat-9-0-8-bin-catalina-sh”-”run”"><a href="#CMD-“-usr-local-apache-tomcat-9-0-8-bin-catalina-sh”-”run”" class="headerlink" title="CMD [“/usr/local/apache-tomcat-9.0.8/bin/catalina.sh”,”run”]"></a>CMD [“/usr/local/apache-tomcat-9.0.8/bin/catalina.sh”,”run”]</h1><p> CMD /usr/local/apache-tomcat-9.0.8/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.8/bin/logs/catalina.out</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### docker安装mysql5.7</span><br></pre></td></tr></table></figure></li></ol><p>docker run -d –name mysql-5.7 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/local/mysql/data:/var/lib/mysql -v /usr/local/mysql/my.cnf:/etc/mysql/my.cnf -v /usr/local/mysql/conf.d:/etc/mysql/conf.d -v /usr/local//mysql/mysql.conf.d:/etc/mysql/mysql.conf.d -v /usr/local/mysql/log:/var/log/mysql –privileged=true mysql:5.7</p><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;what-is&quot;&gt;&lt;a href=&quot;#what-is&quot; class=&quot;headerlink&quot; title=&quot;what is&quot;&gt;&lt;/a&gt;what is&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Docker是一个容器管理引擎，是一个轻量级的虚拟化技术；从镜像和容器的角度来定义一个应
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://jmzc4j.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Git入门</title>
    <link href="https://jmzc4j.github.io/2019/08/28/Git%E5%85%A5%E9%97%A8/"/>
    <id>https://jmzc4j.github.io/2019/08/28/Git入门/</id>
    <published>2019-08-28T09:03:45.000Z</published>
    <updated>2019-08-28T09:04:20.766Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is"><a href="#what-is" class="headerlink" title="what is"></a>what is</h3><ul><li>git 是一个免费开源的分布式版本控制工具；</li><li><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">书籍-Pro Git</a>：有关git的一切可阅读此书获取；</li></ul><h3 id="why-use-it"><a href="#why-use-it" class="headerlink" title="why use it"></a>why use it</h3><ul><li>既可以进行本地版本控制，又可以进行分布式版本控制；</li><li>不存在集中式版本控制工具的单点故障问题；</li><li>具有强大的分支管理；</li><li>由于是Linus开发，天然可以使用Linux命令；</li></ul><h3 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h3><ul><li><p>假设有三个目录，并做了提交;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add README test.rb LICENSE</span><br><span class="line">$ git commit -m &apos;The initial commit of my project&apos;</span><br></pre></td></tr></table></figure></li><li><p>Git会对每个子目录进行校验，并将它们作为树对象存储在Git存储库中;然后Git创建一个提交对象，该对象具有元数据和指向根项目树的指针，因此它可以在需要时重新创建该快照。</p></li><li><p><img src="https://git-scm.com/book/en/v2/images/commit-and-tree.png" alt="A commit and its tree">;</p></li><li><p>如果进行一些更改并再次提交，则下一个提交会存储指向紧接其之前的提交的指针。</p></li><li><p><img src="https://git-scm.com/book/en/v2/images/commits-and-parents.png" alt="Commits and their parents">；</p></li><li><p>Git中的一个分支只是一个指向其中一个提交的轻量级可移动指针。Git中的默认分支名称是master。当你开始提交时，你会得到一个master指向你最后一次提交的分支。每次提交时，master分支指针都会自动向前移动。</p></li><li><p><img src="https://git-scm.com/book/en/v2/images/branch-and-history.png" alt="A branch and its commit history">;</p></li><li><p>Git中的“主”分支不是特殊分支。它与任何其他分支完全一样。几乎每个存储库都有一个的唯一原因是该git init命令默认创建它，并且大多数人都不愿意更改它。</p></li></ul><h3 id="how-to-use-it"><a href="#how-to-use-it" class="headerlink" title="how to use it"></a>how to use it</h3><ul><li><p>安装</p><ol><li><a href="https://git-scm.com/download/linux" target="_blank" rel="noopener">Linux说明</a>;   </li><li><a href="https://git-scm.com/download/mac" target="_blank" rel="noopener">macOS下载地址</a>;   </li><li><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Windows下载地址</a>;             </li></ol></li><li><p>首次配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 安装Git时应该做的第一件事是设置用户名和电子邮件地址</span><br><span class="line"># --system：指定系统级别，--global：指定用户级别</span><br><span class="line">$ git config --global user.name &quot;John Doe&quot;</span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br><span class="line"></span><br><span class="line"># 使用以下方法查看所有设置及其来源</span><br><span class="line">$ git config --list --show-origin</span><br></pre></td></tr></table></figure></li><li><p>获取帮助</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git help &lt;verb&gt;</span><br><span class="line">$ git &lt;verb&gt; --help</span><br><span class="line">$ man git-&lt;verb&gt;</span><br><span class="line"></span><br><span class="line"># 如果您不需要完整的联机帮助页面帮助，但只需要快速了解Git命令的可用选项，您可以使用-h或--help,如：</span><br><span class="line">$ git add -h</span><br></pre></td></tr></table></figure></li><li><p>常用命令</p><ol><li><code>$ git init</code>：在现有目录中初始化存储库；</li><li><code>$ git add xxx</code>：将xxx文件从工作区添加到暂存区；untrace-stage；</li><li><code>$ git commit -m &#39;initial project version&#39;</code>：从暂存区永久提交到当前分支；stage-unmodified；</li><li><code>$ git clone https://github.com/libgit2/libgit2 mylibgit</code>：克隆存储库到本地并修改存储库的目录名；</li><li><code>$ git status</code>：查看文件状态，主要查看文件内容是否发生了变化；</li><li><code>$ git diff</code>：查看工作区与暂存区的更改；</li><li><code>$ git diff --cached</code>：查看暂存区与上次提交的更改；</li><li><code>$ git log  [--pretty=oneline]</code>：查看提交历史，用于回退过去；</li><li><code>$ git reflog</code>：查看命令历史，用于追溯未来；</li><li><code>$ git reset --hard commitID</code>：切换版本；</li><li><code>$ git rm --cached README</code>：删除暂存区文件；</li><li><code>$ git checkout xxx</code>：同步到工作区；</li><li><code>$ git commit --amend</code>：重做提交；</li><li><code>$ git remote -v</code>：查看远程时要使用的短名称存储的URL；</li><li><code>$ git remote add &lt;shortname&gt; &lt;url&gt;</code>：为远程库添加一个新的短名称；</li><li><code>$ git fetch &lt;remote&gt;</code>：从远处库抓取数据；</li><li><code>$ git push &lt;remote&gt; &lt;branch&gt;</code>：推送当前分支到远程库</li><li><code>$ git remote rename pb paul</code>：更改远程库别名pb为paul；</li><li><code>$ git remote remove paul</code>：删除一个远程库url；</li><li><code>$ git push &lt;remote&gt;</code>：抓取并合并到本地；</li><li><code>$ git branch testing</code>：创建一个testing分支；</li><li><code>$ git checkout testing</code>:切换分支；</li><li><code>$ git merge hotfix</code>：合并hotfix分支到当前分支上；</li><li><code>$ git branch -d hotfix</code>：删除分支；</li><li><code>$ git branch -v</code>：查看每个分支上的最后一次提交；</li><li><code>$ git branch --merged</code>：查看已经合并了的分支，不带星号的分支可以删除；</li><li><code>$ git push &lt;remote&gt; &lt;branch&gt;</code>：将本地分支推送到一个名称不同的远程分支；</li><li><code>$ git checkout -b sf origin/serverfix</code>：设置名称与远程分支不同的本地分支；</li><li><code>git branch -u origin/serverfix</code>：更新当前分支为远程分支；</li><li><code>$ git push origin --delete serverfix</code>：完成合并删除远程分支；</li></ol></li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">书籍-Pro Git</a>;</li><li><a href="https://www.cnblogs.com/chris0710/p/8925977.html" target="_blank" rel="noopener">博客园-Git命令总结</a>;</li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰-Git教程</a>;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;what-is&quot;&gt;&lt;a href=&quot;#what-is&quot; class=&quot;headerlink&quot; title=&quot;what is&quot;&gt;&lt;/a&gt;what is&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git 是一个免费开源的分布式版本控制工具；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;htt
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="https://jmzc4j.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Redis命令</title>
    <link href="https://jmzc4j.github.io/2019/08/28/Redis%E5%91%BD%E4%BB%A4/"/>
    <id>https://jmzc4j.github.io/2019/08/28/Redis命令/</id>
    <published>2019-08-28T09:01:17.000Z</published>
    <updated>2019-08-28T09:02:14.055Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is"><a href="#what-is" class="headerlink" title="what is"></a>what is</h3><ul><li>Redis全称为 Remote Dictionary Server;</li><li>Redis是一个遵守BSD协议的开源的基于内存的数据结构存储服务；可以用做数据库、缓存和消息中间件；（官方）</li><li>Redis是意大利人用C语言编写的一个高性能的（key/value）分布式的NoSQL数据库，支持多种数据类型并支持持久化；</li></ul><h3 id="how-to-use-it"><a href="#how-to-use-it" class="headerlink" title="how to use it"></a>how to use it</h3><h4 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h4><ul><li><code>dbsize</code></li><li><code>select dbIndex</code></li><li><code>flushdb</code></li><li><code>flushall</code></li><li><code>keys *</code></li><li><code>exists key</code></li><li><code>move key dbIndex</code></li><li><code>expire key</code>：设置key的存活时间（秒单位）</li><li><code>ttl key</code>：查看key的剩余存活时长，返回值含义（-1，永恒；-2，过期），过期就会被从内存中删除该key</li><li><code>persist key</code>：去掉有效期设置</li><li><code>type key</code></li></ul><h5 id="string-常用"><a href="#string-常用" class="headerlink" title="string 常用"></a>string 常用</h5><ul><li><code>set/get/del/append/strlen key</code></li><li><code>incr/decr key</code></li><li><code>incrby/decrby key increment</code></li><li><code>getrange/setrange key startIndex endIndex</code>：获取key对应的指定范围的value，第一个索引为0，最后一个索引为-1</li><li><code>setex(with expire) key second value</code></li><li><code>setnx(if not exist) key value</code></li><li><code>mset/mget/msetnx key</code> ：添加、获取多个kv</li><li><code>getset</code></li></ul><h5 id="list-常用"><a href="#list-常用" class="headerlink" title="list 常用"></a>list 常用</h5><ul><li><code>lpush/rpush/lrange</code></li><li><code>lpop/rpop</code></li><li><code>lIndex key</code></li><li><code>lrem key count value</code></li><li><code>ltrim key start end</code> ；截取start到end的元素再赋值给原来的key</li><li><code>rpoplpush srcList targetList</code>：当scr与target相同就构成了一个循环</li><li><code>lInsert key before/after v1 v2</code></li><li><code>lset key index value</code></li></ul><h5 id="set-常用"><a href="#set-常用" class="headerlink" title="set 常用"></a>set 常用</h5><ul><li><code>sadd</code></li><li><code>smembers key</code></li><li><code>sismember key v1</code></li><li><code>scard</code>：获取元素个数</li><li><code>srem key value</code></li><li><code>srandmember key num</code>：随机取出num个元素</li><li><code>spop key</code></li><li><code>smove key1 key2 value-in-key1</code>：将key1中的某个值移动到key的集合中</li><li><code>sdiff key1 key2</code>：获取在key1集合但不在key2集合的元素</li><li><code>sinter key1 key2</code></li><li><code>sunion key1 key2</code></li></ul><h4 id="hash-常用"><a href="#hash-常用" class="headerlink" title="hash 常用"></a>hash 常用</h4><ul><li><code>hset/hget/hdel/hmset/hmget/hgetall</code></li><li><code>hlen</code></li><li><code>hexists key in-key</code></li><li><code>hkeys/hvals</code></li><li><code>hincrby/hincrbyfloat</code></li><li><code>hsetnx</code></li></ul><h4 id="zset-常用"><a href="#zset-常用" class="headerlink" title="zset 常用"></a>zset 常用</h4><ul><li><code>zadd/zrange</code>：zadd zset1 60 v1 70 v2 80 v3 90 v4 100 v5</li><li><code>zrangebyscore key startScore endScore</code>：默认取左闭右闭区间，可以使用左小括号来更改为开区间</li><li><code>zcard/zcount key score1 score2</code></li><li><code>zrank key value</code>：获取value在key集合中的排名，即获取下标</li><li><code>zscore key value</code></li><li><code>zrevrange</code></li><li><code>zrevrank key value</code></li><li><code>zrevrangebyscore key endScore startScore</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;what-is&quot;&gt;&lt;a href=&quot;#what-is&quot; class=&quot;headerlink&quot; title=&quot;what is&quot;&gt;&lt;/a&gt;what is&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Redis全称为 Remote Dictionary Server;&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="redis" scheme="https://jmzc4j.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Maven入门</title>
    <link href="https://jmzc4j.github.io/2019/08/28/Maven%E5%85%A5%E9%97%A8/"/>
    <id>https://jmzc4j.github.io/2019/08/28/Maven入门/</id>
    <published>2019-08-28T08:40:39.000Z</published>
    <updated>2019-08-28T08:53:23.347Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is"><a href="#what-is" class="headerlink" title="what is"></a>what is</h3><ul><li>maven 是 apache软件基金会的一个产品；</li><li>maven 是一个将模型应用于工程的管理系统；</li><li>maven 是 一个Java项目的构建和管理工具，包括项目生命周期的管理和项目依赖的管理；</li></ul><h3 id="why-use-it"><a href="#why-use-it" class="headerlink" title="why use it"></a>why use it</h3><ul><li>简化项目构建，缩短了开发周期；</li><li>将代码与架包分离，仅仅在POM中提供依赖的引用即可；</li><li>统一的目录结构和约定，有利于开发者理解开发原则；</li></ul><h3 id="how-to-config-it"><a href="#how-to-config-it" class="headerlink" title="how to config it"></a>how to config it</h3><ul><li><p>配置本地仓库路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;localRepository&gt;D:\Repository\mvnRepo&lt;/localRepository&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置远程镜像仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;mirrors&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">&lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">&lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">  &lt;/mirrors&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置JDK版本（也可以使用编译插件）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;profiles&gt;</span><br><span class="line">&lt;!--定义工程的JDK版本--&gt;</span><br><span class="line">&lt;profile&gt;</span><br><span class="line">&lt;id&gt;jdk-1.8&lt;/id&gt;</span><br><span class="line">&lt;activation&gt;</span><br><span class="line">&lt;activeteByDefault&gt;true&lt;/activeteByDefault&gt;</span><br><span class="line">&lt;jdk&gt;1.8&lt;/jdk&gt;</span><br><span class="line">&lt;/activation&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">&lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;/profile&gt;</span><br><span class="line">  &lt;/profiles&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="how-to-use-it"><a href="#how-to-use-it" class="headerlink" title="how to use it"></a>how to use it</h3><ul><li><p>maven的基本工作单元就是POM，POM中包含着项目的部分描述信息，所有的maven操作都是从POM开始的；</p></li><li><p>maven的指令代表着生命周期中的不同阶段，这些指令仅仅是一个抽象层的定义，真实的操作都有由相应的插件来处理的；</p></li><li><p>maven项目创建,使用原型（模板）创建不同的项目，过程中默认选择模板7（快速版）和默认1.0-snapshot版本；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate  </span><br><span class="line">  -DarchetypeGroupId=org.apache.maven.archetypes   </span><br><span class="line">  -DgroupId=com.mycompany.app  </span><br><span class="line">  -DartifactId=my-app</span><br></pre></td></tr></table></figure></li><li><p>创建结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;!-- 指定模型的版本，一般不会变，统一版本可以确保稳定性 --&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--</span><br><span class="line">    指定坐标和打包方式：</span><br><span class="line">      groupId：组织和项目唯一标识；</span><br><span class="line">      artifactId：工程基础名称；</span><br><span class="line">      version：版本号和类型；</span><br><span class="line">      packaging：打包方式，默认jar，同时约束了生命周期的最终阶段；</span><br><span class="line">   --&gt;</span><br><span class="line">  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;my-app&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--</span><br><span class="line">    Maven生成的文档相关：</span><br><span class="line">      name:项目的显示名称;</span><br><span class="line">      url:项目站点的位置;</span><br><span class="line">      description:项目的基本描述;</span><br><span class="line">   --&gt;</span><br><span class="line">  &lt;name&gt;my-app&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;！-- 自定义的属性，EL方式引用 --&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li><li><p>目录结构如下：(使用IDE创建的还会有resource目录)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">|-- pom.xml</span><br><span class="line">`-- src</span><br><span class="line">    |-- main</span><br><span class="line">    |   `-- java</span><br><span class="line">    |       `-- com</span><br><span class="line">    |           `-- mycompany</span><br><span class="line">    |               `-- app</span><br><span class="line">    |                   `-- App.java</span><br><span class="line">    `-- test</span><br><span class="line">        `-- java</span><br><span class="line">            `-- com</span><br><span class="line">                `-- mycompany</span><br><span class="line">                    `-- app</span><br><span class="line">                        `-- AppTest.java</span><br></pre></td></tr></table></figure></li><li><p>其他maven指令：   </p><ol><li><code>mvn compile</code>：编译源代码；   </li><li><code>mvn test</code>：编译测试源代码并指定命名约定的单元测试；   </li><li><code>mvn test-compile</code>：仅编译吃源代码；   </li><li><code>mvn package</code>：打包到target目录中；   </li><li><code>mvn install</code>：打包到本地仓库中；   </li><li><code>mvn site</code>：生成项目的web站点；   </li><li><code>mvn clean</code>：清理target的目录；   </li><li><code>mvn eclipse:eclipse</code>：生成eclispe项目；   </li><li><code>mvn idea:idea</code>：生成idea项目；   </li><li><code>mvn eclipse:clean</code>：清楚eclispe配置；   </li><li><code>mvn dependency:list</code>：列出所有依赖；   </li><li><code>mvn deploy</code>：上传到私服；   </li><li><code>mvn test -skipping compile -skipping test-compile</code>：不编译仅测试；   </li><li><code>mvn -version/-v</code>：查看maven版本；   </li><li><code>mvn jetty:run</code>：jetty上运行；   </li><li><code>mvn -e</code>：显示错误信息；   </li><li><code>mvn validate</code>：验证工程是否正确，所有需要的资源是否可用；   </li><li><code>mvn verify</code>：运行任何检查，验证包是否有效且达到质量标准；   </li><li><code>mvn dependency:tree</code>：输出依赖树；   </li><li><code>mvn tomcat:run</code>：在tomcat6上运行；   </li><li><code>mvn help:describe -Dplugin=pluginName -Dgoal(或-Dmojo)=goalName</code>：列出某个插件的goal信息；   </li><li><code>mvn tomcat7:run -Dmaven.test.skip=true</code>：跳过测试；   </li><li><code>mvn eclipse:eclipse -DskipTests</code>：生成导入Eclipse中的项目列表。一般在项目导入之前使用；   </li><li><code>mvn install:install-file -DgroupId=com -DartifactId=client -Dversion=0.1.0 -Dpackaging=jar -Dfile=d:\client-0.1.0.jar</code>：打包jar到本地库；</li></ol></li></ul><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><ul><li>如何发布jar到远程仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">      &lt;id&gt;mycompany-repository&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;MyCompany Repository&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;scp://repository.mycompany.com/repository/maven2&lt;/url&gt;</span><br><span class="line">    &lt;/repository&gt;</span><br><span class="line">&lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span><br><span class="line">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0</span><br><span class="line">                      http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;servers&gt;</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">      &lt;id&gt;mycompany-repository&lt;/id&gt;</span><br><span class="line">      &lt;username&gt;jvanzyl&lt;/username&gt;</span><br><span class="line">      &lt;!-- Default value is ~/.ssh/id_dsa --&gt;</span><br><span class="line">      &lt;privateKey&gt;/path/to/identity&lt;/privateKey&gt; (default is ~/.ssh/id_dsa)</span><br><span class="line">      &lt;passphrase&gt;my_key_passphrase&lt;/passphrase&gt;</span><br><span class="line">    &lt;/server&gt;</span><br><span class="line">  &lt;/servers&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><ul><li><p>编译插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.7.0&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">          &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></li><li><p>测试插件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.18.1&lt;/version&gt;</span><br><span class="line">    &lt;!-- 同样实现跳过生命周期中的测试阶段 --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;skipTests&gt;true&lt;/skipTests&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li><li><p>资源文件插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;project&gt;  </span><br><span class="line">  ...  </span><br><span class="line">  &lt;build&gt;  </span><br><span class="line">    ...  </span><br><span class="line">    &lt;resources&gt;  </span><br><span class="line">      &lt;!--</span><br><span class="line">          资源插件默认行为只是将项目主资源文件复制到主代码编译输出目录中，将测试资源文件复制到测试代码编译输出目录中。</span><br><span class="line">      --&gt;</span><br><span class="line">      &lt;resource&gt;  </span><br><span class="line">        &lt;!-- 指定资源文件目录 --&gt;</span><br><span class="line">        &lt;directory&gt;src/main/resources&lt;/directory&gt;  </span><br><span class="line">        &lt;!--</span><br><span class="line">          开启资源过滤 ：（默认false）</span><br><span class="line">            filtering：作用是用环境变量，pom文件里定义的属性和指定文件里的属性替换属性文件的占位符。</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">        &lt;!-- includes之中的也会被过滤 --&gt;  </span><br><span class="line">        &lt;includes&gt;  </span><br><span class="line">          &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">        &lt;/includes&gt;</span><br><span class="line">      &lt;/resource&gt;</span><br><span class="line">      &lt;resource&gt;</span><br><span class="line">        &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">        &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">        &lt;!-- excludes之外的不会被过滤 --&gt;</span><br><span class="line">        &lt;excludes&gt;</span><br><span class="line">          &lt;exclude&gt;**/*.xml&lt;/exclude&gt;  </span><br><span class="line">        &lt;/excludes&gt;  </span><br><span class="line">      &lt;/resource&gt;  </span><br><span class="line">      ...  </span><br><span class="line">    &lt;/resources&gt;  </span><br><span class="line">    ...  </span><br><span class="line">  &lt;/build&gt;  </span><br><span class="line">  ...  </span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li><li><p>mybatis逆向工程插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.7&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;configurationFile&gt;$&#123;basedir&#125;/src/main/resources/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class="line">&lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">goal：mybatis-generator:generate</span><br></pre></td></tr></table></figure></li></ul><h3 id="Maven中的属性"><a href="#Maven中的属性" class="headerlink" title="Maven中的属性"></a>Maven中的属性</h3><ul><li>内置属性：<ol><li><code>${basedir}</code>：项目的根目录(包含pom.xml文件的目录；</li><li><code>${version}</code>：项目版本；</li></ol></li><li>POM属性：<ol><li><code>${project.build.sourceDirectory}</code>：项目的主源码目录，默认为src/main/java；</li><li><code>${project.build.testSourceDirectory}</code>：项目的测试源码目录，默认为src/test/java；</li><li><code>${project.build.directory}</code>：项目构件输出目录，默认为target/；</li><li><code>${project.outputDirectory}</code>：项目主代码编译输出目录，默认为target/classes/；</li><li><code>${project.testOutputDirectory}</code>：项目测试代码编译输出目录，默认为target/test-classes/；</li><li><code>${project.groupId}</code>：项目的groupId；</li><li><code>${project.artifactId}</code>：项目的artifactId；</li><li><code>${project.version}</code>：项目的version，与${version}等价；</li><li><code>${project.build.fianlName}</code>：项目打包输出文件的名称，默认为${project.artifactId}-${project.version}；</li></ol></li><li>自定义属性：用户可以在POM的<properties>元素下自定义Maven属性；</properties></li><li>Settings属性：用户使用settings.开头的属性引用settings.xml文件中XML元素的值；</li><li>Java系统属性：所有Java系统属性都可以使用Maven属性引用；</li><li>环境变量属性：所有环境变量都可以使用以env.开头的Maven属性引用；</li></ul><h3 id="聚合工程"><a href="#聚合工程" class="headerlink" title="聚合工程"></a>聚合工程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0</span><br><span class="line">                      http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;app&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modules&gt;</span><br><span class="line">    &lt;module&gt;my-app&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;my-webapp&lt;/module&gt;</span><br><span class="line">  &lt;/modules&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0</span><br><span class="line">                      http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;app&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://maven.apache.org/guides/getting-started/index.html" target="_blank" rel="noopener">Apache官方-快速入门</a></li><li><a href="https://www.cnblogs.com/forerver-elf/p/6257395.html" target="_blank" rel="noopener">博客园-Maven属性、profile和资源过滤</a></li><li><a href="https://www.cnblogs.com/wkrbky/p/6352188.html" target="_blank" rel="noopener">博客园-Maven常用命令</a></li><li><a href="https://blog.csdn.net/benhuo931115/article/details/80674760" target="_blank" rel="noopener">CSDN-30个常用的 Maven 命令</a></li><li><a href="https://blog.csdn.net/en_joker/article/details/84067071" target="_blank" rel="noopener">CSDN-maven-surefire-plugin简介</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;what-is&quot;&gt;&lt;a href=&quot;#what-is&quot; class=&quot;headerlink&quot; title=&quot;what is&quot;&gt;&lt;/a&gt;what is&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;maven 是 apache软件基金会的一个产品；&lt;/li&gt;
&lt;li&gt;maven 是一个
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="maven" scheme="https://jmzc4j.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建博客系统</title>
    <link href="https://jmzc4j.github.io/2019/08/28/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    <id>https://jmzc4j.github.io/2019/08/28/使用Hexo搭建博客系统/</id>
    <published>2019-08-27T22:29:42.000Z</published>
    <updated>2019-08-27T23:08:38.151Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo是什么"><a href="#Hexo是什么" class="headerlink" title="Hexo是什么"></a>Hexo是什么</h3><ul><li>Hexo是Node编写的一个基于markdown引擎的用来快速开发静态博客系统的框架；</li><li>官方网站：<a href="https://hexo.io/" title="hexo.io" target="_blank" rel="noopener">hexo.io</a>;</li></ul><h3 id="Hexo怎么用"><a href="#Hexo怎么用" class="headerlink" title="Hexo怎么用"></a>Hexo怎么用</h3><ul><li>准备环境</li></ul><ol><li>安装node.js,<a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载地址</a>;</li><li>安装git,<a href="https://git-scm.com/" target="_blank" rel="noopener">下载地址</a>;</li></ol><ul><li>安装 hexo-cli </li></ul><ol><li><p>打开GitBash，执行<code>$ npm install -g hexo-cli</code>;</p></li><li><p>创建一个hexo的工作目录，进入目录执行<code>hexo init &lt;folder&gt;</code>;</p></li><li><p>进入初始化的那个目录，执行<code>npm install</code>来构建hexo并安装相应依赖;</p></li><li><p>配置_config.yml文件;</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Jmzc&apos;s Blog</span><br><span class="line">subtitle:</span><br><span class="line">description: Java,Study,Notes,Daily Life,</span><br><span class="line">keywords:</span><br><span class="line">author: Jmzc</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: https://jmzc4j.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:jmzc4j/jmzc4j.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>执行<code>hexo new &lt;title&gt;</code> 新建一个blog；</p></li><li><p>在hexo根目录的source/_posts/找到title.md文件进行博客编辑;</p></li><li><p>执行<code>hexo g 或 hexo generate</code> 生成html静态页面（该页面在pubic文件夹下）</p></li><li><p>执行<code>hexo s 或 hexo server</code> 启动hexo服务在本地进行测试；</p></li><li><p>执行<code>hexo d 或 hexo devlop</code> 将生成的静态页发布到github上;</p></li></ol><ul><li>推送源码到github</li></ul><ol><li><code>git init</code></li><li><code>ssh-keygen -C &#39;jmzc-blog&#39;</code>,然后将家目录中的公钥复制到github上</li><li><code>git remote add hexo-ssh git@github.com:jmzc4j/jmzc4j.github.io.git</code></li><li><code>git checkout -b source</code></li><li><code>git add .</code></li><li><code>git commit -m &#39;hexo init&#39;</code></li><li><code>git push hexo-ssh source</code> </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hexo是什么&quot;&gt;&lt;a href=&quot;#Hexo是什么&quot; class=&quot;headerlink&quot; title=&quot;Hexo是什么&quot;&gt;&lt;/a&gt;Hexo是什么&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Hexo是Node编写的一个基于markdown引擎的用来快速开发静态博客系统的框架；&lt;
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://jmzc4j.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="https://jmzc4j.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
