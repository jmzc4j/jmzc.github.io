{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style-dark.styl","path":"css/style-dark.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/45.jpg","path":"img/45.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg-dark.jpg","path":"img/bg-dark.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/css/share.styl","path":"share/css/share.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.eot","path":"share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.svg","path":"share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.ttf","path":"share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.woff","path":"share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/js/qrcode.js","path":"share/js/qrcode.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/js/social-share.js","path":"share/js/social-share.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1566940026524},{"_id":"themes/BlueLake/README.en.md","hash":"dd48abd439d141fe623c6d5e4220c2df3e2198a7","modified":1566940026525},{"_id":"themes/BlueLake/README.md","hash":"cc3af0adf4e94a27e30397fda8717488265674dc","modified":1566940026525},{"_id":"themes/BlueLake/_config.yml","hash":"8337f0ae0d1e0527be1527a603a96b1f85ee217e","modified":1567112601195},{"_id":"themes/BlueLake/package.json","hash":"cdef382c442618b24305fd3e38ac7a3accf87aa9","modified":1566940026662},{"_id":"source/_posts/Docker入门.md","hash":"2b4c0ba015161120e0cc7d3064cd342c79942e4e","modified":1567092351661},{"_id":"source/_posts/Dos命令.md","hash":"ed39630c550308ad1301ad403eeee72c2256a705","modified":1567072924683},{"_id":"source/_posts/Eclipse常用配置.md","hash":"c4d9f3609f9af743d6cf945c2973c162d4440445","modified":1567021676006},{"_id":"source/_posts/Git入门.md","hash":"243cc3ea756619c996a4c12529dc891a6b67601a","modified":1566983060766},{"_id":"source/_posts/Hexo插入音乐或视频.md","hash":"a798f733c638d4a6ee0d4664b6874b5f945e771e","modified":1567124089030},{"_id":"source/_posts/Html初识.md","hash":"800a1ee705a2696ecb424a488307897293424d8e","modified":1567054746377},{"_id":"source/_posts/JVM初识.md","hash":"3c90f5424dbcd9e8f9cd0070cfc81859749e587b","modified":1567080427933},{"_id":"source/_posts/Java基础.md","hash":"1e14433ff5ac14bc83b8b843276d144d7591d5dc","modified":1567054807854},{"_id":"source/_posts/Linux之Shell初识.md","hash":"5e4f4d084b89a8fe7afa932cd65bc10ad683f563","modified":1567060396936},{"_id":"source/_posts/Linux命令.md","hash":"6ac38408dab0e7a562bad0bdca33d55421bd9bd0","modified":1567060491936},{"_id":"source/_posts/Linux概述.md","hash":"d238d9f4bfe5c4c239d1666c6374447c6c1a3c59","modified":1567060441161},{"_id":"source/_posts/Log4j配置.md","hash":"4e98be67c4e9423f56401973773685b8104c5c6b","modified":1566993392502},{"_id":"source/_posts/LogBack配置.md","hash":"3f7a63c4ce0ef6b9d86519b886520c9da5dfc6df","modified":1566992652823},{"_id":"source/_posts/Maven入门.md","hash":"02bacc6d7468e1e5d5baf53ad64c6311bdbd7f26","modified":1566982403347},{"_id":"source/_posts/MySQL常用配置.md","hash":"24366f43cf0ab214fcc20b5d510eaf45d56d943f","modified":1566989097928},{"_id":"source/_posts/Mybatis常用配置.md","hash":"e1bd0f13252a318c34b7041323f42b3543ee4165","modified":1567002600116},{"_id":"source/_posts/Mybatis逆向工程配置.md","hash":"279fc1eaeef2f4dec85c71126f43e859fd717d64","modified":1566994065462},{"_id":"source/_posts/Redis命令.md","hash":"aaebd16f7e9715e6929b3c774038b67e4239e612","modified":1566982934055},{"_id":"source/_posts/Redis常用配置.md","hash":"9daadd09020ca45fb08a58f312937556a876dbe0","modified":1566987667605},{"_id":"source/_posts/使用Hexo搭建博客系统.md","hash":"398a284095fbb0b1cb74de6e8d4192fc48169284","modified":1567080788722},{"_id":"source/_posts/常用数据库的参数配置.md","hash":"4aa70d0dc458f19f8dbb2545c24323af1bb78387","modified":1566988861732},{"_id":"source/about/index.md","hash":"9549e26f6e91d0a88d8d9dc06d0f5ace1647bbac","modified":1567116352915},{"_id":"source/playlist/index.md","hash":"efe8b901cfe4d07ea2ce189fd8b39bc5274b1d7b","modified":1567117462568},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"85f06e2ea9a45bb55761b29cda4487f782557b2b","modified":1566940026527},{"_id":"themes/BlueLake/languages/en.yml","hash":"fe087d478a81ffc15f93f2295bc2b6f49a149c3d","modified":1566940026528},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"a57b9b768346adfe1c1553c4b727d5c113a52480","modified":1566940026529},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"fff49dfae21808bb1edd74dfe4f14c457b64c191","modified":1566940026530},{"_id":"themes/BlueLake/languages/ko.yml","hash":"bd3c4058a43a0f6e239f360261f3260c87c185f0","modified":1566940026530},{"_id":"themes/BlueLake/languages/tr.yml","hash":"47d1dfd33fb1f0acbb1dfd400854d265ae8ccd45","modified":1566940026531},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"4a9665e63138e06cf8817addf6af4b312997ddee","modified":1567115133971},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"9a7ffb9f16af9fdca51d818e4fd2eb9f7e8ba9cf","modified":1566940026533},{"_id":"themes/BlueLake/layout/archive.jade","hash":"98d9fb812edbc180878fdadb65bc38499eef2cc4","modified":1567066149565},{"_id":"themes/BlueLake/layout/base.jade","hash":"fd0d4e3878e48c5aa40bb1946703b9543fb5d3c7","modified":1567109678150},{"_id":"themes/BlueLake/layout/category.jade","hash":"9f3a9f1d6f0bbad258b308ad8d49128c05b422cf","modified":1567109926030},{"_id":"themes/BlueLake/layout/index.jade","hash":"6406182f71d0f36757e91c5ec999f244c1f83c68","modified":1567100826996},{"_id":"themes/BlueLake/layout/page.jade","hash":"e361285d8634a35970cbef8e01a27e185c3b3159","modified":1567116388980},{"_id":"themes/BlueLake/layout/post.jade","hash":"44ec724cc0fa34447fc2258e7f0d9739c2365db0","modified":1567109963517},{"_id":"themes/BlueLake/layout/tag.jade","hash":"50c7af7565751db5d7672beb434768885fb224cb","modified":1567109940262},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1566940026664},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1566940026669},{"_id":"source/_posts/JVM初识/classloader.png","hash":"13ecf04812f428dc3da2a6ddc34878a680963ed3","modified":1567057381756},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"74a7f795ac83813ffacd4f6db01f2fc6fa94e967","modified":1566940026535},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"21d05990aa5a19632f9ed51085ef7727adeea17a","modified":1566940026536},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"3fa65886665e8165640d22ede8dd3b06a0554583","modified":1566940026536},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"f95aa1d48752fe47046c0ba89199ad765351b510","modified":1566940026537},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"ba9f855c30ab6d7d00639722fba873bfc346b793","modified":1566940026539},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1567109741422},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1566940026540},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1566940026541},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"4f2fba7fcb39a6bf70ff04dad9a3dab2563b21e7","modified":1566940026542},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"44de0851108bca8404f5614d5101c7a7ee67754d","modified":1566940026543},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1566940026543},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"c632919f04194dcf6e0e8ccc572554a859aa922b","modified":1566940026544},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"6e587b7d254d0d92b959ba58262f5e81b618eba2","modified":1567109969285},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"0107affa0c6b22e09546fcf82a6f71ba2dd1e315","modified":1567109976902},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"9af40206a525db1cb9761fa6facb36332057acf3","modified":1566940026546},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"164a83faaf92ec19d268fd303bf6e30348ddef5c","modified":1567109785141},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"c6f778d5d2f13bacbd83a56a9e9faaeac0dda0ed","modified":1567109774876},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"c75308c2b72456cfb98cb80f280c66e58f171705","modified":1567109767716},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"4e90378aa88c5694126dc8ea5bed3bb2f8642e53","modified":1567109757501},{"_id":"themes/BlueLake/source/css/highlight-dark.styl","hash":"11dfe68ade914332c484a4dceaec215bf8b62ee7","modified":1566940026665},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"92b5c306f276f8ea6a134e303b1b63612d25ecfe","modified":1566940026666},{"_id":"themes/BlueLake/source/css/style-dark.styl","hash":"e37916776bdb48765dc01849760ba837af472c2d","modified":1567109723869},{"_id":"themes/BlueLake/source/css/style.styl","hash":"a990d649eb2d4dacfec0910d05d839a5f677c02b","modified":1566940026668},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1563172293000},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1563172293000},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1563172293000},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1563172293000},{"_id":"themes/BlueLake/source/img/45.jpg","hash":"88d8a2f0070f4a9d2537bc7f8a8e3371c007675a","modified":1566632081222},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"7ce826f7b678ff3c524fce8bbd480c188e50c7ee","modified":1566940026683},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"9e68d688f2f12ec193ce9496beb0fd42e1de2288","modified":1566940026684},{"_id":"themes/BlueLake/source/js/totop.js","hash":"d9367c6fa3e973bc5f32ce38d951858455726a02","modified":1566940026685},{"_id":"source/_posts/JVM初识/heap.png","hash":"4ac33041819c526419b706100f2ae018ce342b26","modified":1567058371505},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1566940026682},{"_id":"source/_posts/JVM初识/jvm.png","hash":"b976eacb04ce0551c7eeff50002877f05ed4b818","modified":1567055612251},{"_id":"themes/BlueLake/source/img/bg-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1566940026679},{"_id":"themes/BlueLake/source/share/css/share.styl","hash":"e1337f4029ddd37e8d9657d1b05023b5ea715acf","modified":1566940026718},{"_id":"themes/BlueLake/source/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1566940026719},{"_id":"themes/BlueLake/source/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1566940026720},{"_id":"themes/BlueLake/source/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1566940026721},{"_id":"themes/BlueLake/source/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1566940026722},{"_id":"themes/BlueLake/source/share/js/qrcode.js","hash":"962ad9cb87afa140a644178e5f3c53e2514ea1e5","modified":1566940026724},{"_id":"themes/BlueLake/source/share/js/social-share.js","hash":"fe73d3b1c63a498f18f885fc83d631c2b63535e7","modified":1566940026725},{"_id":"public/atom.xml","hash":"80b561bb4ba406816de50a1d503a67805e745c92","modified":1567124126833},{"_id":"public/content.json","hash":"032494cff416fe39a6ee48e262a70aa2e2fef4ec","modified":1567124126856},{"_id":"public/searchVersion.txt","hash":"743f1ac60776259075cd6cf77dc4f5160e038ea7","modified":1567124126858},{"_id":"public/about/index.html","hash":"4dd4184c039362b3655f313a6e20e3417d589759","modified":1567124126905},{"_id":"public/playlist/index.html","hash":"92fe6a0c9eba7a7fc22b4731e3e5f5b584419fe7","modified":1567124126905},{"_id":"public/2019/08/29/Dos命令/index.html","hash":"7a1c175fd61a3ec009406fe762c3fc29db8672c0","modified":1567124126905},{"_id":"public/2019/08/29/Html初识/index.html","hash":"d04678532a175f202322cbe998c84e84e5254bd5","modified":1567124126906},{"_id":"public/2019/08/28/MySQL常用配置/index.html","hash":"c185365b075170cd6f1bf6425133005c01f8f587","modified":1567124126906},{"_id":"public/2019/08/28/常用数据库的参数配置/index.html","hash":"b6fa84dd96da68f1d8f691de50b39be9055af1a3","modified":1567124126906},{"_id":"public/2019/08/28/Redis常用配置/index.html","hash":"416cd562a7f65e390bc48016f794bc8929d2ebfe","modified":1567124126906},{"_id":"public/2019/08/28/Redis命令/index.html","hash":"3de6824fb5e668727646d3203387417f32aab576","modified":1567124126906},{"_id":"public/2019/08/28/使用Hexo搭建博客系统/index.html","hash":"0217f2049655afda9764c10dc9b6389ef04d06f3","modified":1567124126906},{"_id":"public/archives/index.html","hash":"4f58c23f225b12814a4e57a3e5237b153cde2686","modified":1567124126906},{"_id":"public/archives/page/2/index.html","hash":"6fa4e1167dcf8bbf6e1334cd9b847e0afd20c22f","modified":1567124126906},{"_id":"public/archives/page/3/index.html","hash":"390fe9ed171e6e8aa07479231471d87d4bb964ac","modified":1567124126907},{"_id":"public/archives/2019/index.html","hash":"3674e87caa39aeda1b24f94a71133cf5d8cf0c3f","modified":1567124126907},{"_id":"public/archives/2019/page/2/index.html","hash":"ddbc460864aff477fc1a90cf692164b8fe9d622c","modified":1567124126907},{"_id":"public/archives/2019/page/3/index.html","hash":"1414e29fa9f0e7fbf581b1ab79635734e24e6a34","modified":1567124126907},{"_id":"public/archives/2019/08/index.html","hash":"458839cae7f9ae12993fd2602e1327c37465ef4a","modified":1567124126907},{"_id":"public/archives/2019/08/page/2/index.html","hash":"db97bf02a7f2e3a17c7d6e8a24a4d2264744b88e","modified":1567124126907},{"_id":"public/archives/2019/08/page/3/index.html","hash":"4aef706fa7f694ecfb65bd177b964582e8dd7639","modified":1567124126907},{"_id":"public/categories/学习笔记/index.html","hash":"7f20ad87acfd0ba5a3f405c284eff46a8a60ac50","modified":1567124126907},{"_id":"public/categories/学习笔记/page/2/index.html","hash":"322ba0fb21a362d34656abdf94b1a054d35c25e9","modified":1567124126907},{"_id":"public/categories/IDE工具/index.html","hash":"f812be429c1eb3d0e126899468383c5b7e94052f","modified":1567124126907},{"_id":"public/categories/配置文件/index.html","hash":"4ae828fad7557b741a299a1398530eb23a1cea70","modified":1567124126908},{"_id":"public/index.html","hash":"d7bf34893276cd11871e1329a3b81793d9a49567","modified":1567124126908},{"_id":"public/page/2/index.html","hash":"36631ec8fea7b5db5a5ea22e3e2a9351e7685172","modified":1567124126908},{"_id":"public/page/3/index.html","hash":"bf4eb9621b19c418448332e3f2918fac99de301b","modified":1567124126908},{"_id":"public/tags/docker/index.html","hash":"9ae792638db91f3083e73c0243109ef7c219af99","modified":1567124126908},{"_id":"public/tags/dos/index.html","hash":"ebad20efef429767dab5a7652357ddf5dffcfb71","modified":1567124126908},{"_id":"public/tags/eclipse/index.html","hash":"045085c78ea0ff4787803ce3574223eddf18a4a4","modified":1567124126908},{"_id":"public/tags/git/index.html","hash":"78313873bab01c433a618b9f6ca0a119d129f36a","modified":1567124126908},{"_id":"public/tags/hexo/index.html","hash":"f8b55fad50a91ac1589c918b8e37d7e77caeb79a","modified":1567124126908},{"_id":"public/tags/html/index.html","hash":"95acc68ccea518b8046319cf4d26e7c300d29a0a","modified":1567124126908},{"_id":"public/tags/jvm/index.html","hash":"d806fb545053d3439e650d9d724581a0e8306e1d","modified":1567124126909},{"_id":"public/tags/linux/index.html","hash":"7e9d6700b1d5185aee0196a437fda0b463bcfc36","modified":1567124126909},{"_id":"public/tags/mysql/index.html","hash":"bf29104309c87befd7a89cabf10b3c8a467b5302","modified":1567124126909},{"_id":"public/tags/mybatis/index.html","hash":"a3197a2dd78e5ef7470027043abd781dd52b2118","modified":1567124126909},{"_id":"public/tags/redis/index.html","hash":"f6920247d7d3ab13a91fc705fc3c5653636331e2","modified":1567124126909},{"_id":"public/tags/database/index.html","hash":"3b7c50a7185b79e7255c5495c12b0b0f8fb2f655","modified":1567124126909},{"_id":"public/tags/java/index.html","hash":"4f70d05a3902dd674f0975726b46c8a04d5902b7","modified":1567124126909},{"_id":"public/tags/log4j/index.html","hash":"3d4c505082d0fbf0bab4c7c7ca5c19a1cf16a7e5","modified":1567124126910},{"_id":"public/tags/logback/index.html","hash":"a4bc78bf37f49176c374e7a934a1905154df0616","modified":1567124126910},{"_id":"public/2019/08/29/Hexo插入音乐或视频/index.html","hash":"776612b982af026ee652b024f4a84db9ec538a4d","modified":1567124126910},{"_id":"public/2019/08/29/Linux之Shell初识/index.html","hash":"f1ed0a7d2a719b5c3b71a3fe7f7ce5e6029537e2","modified":1567124126911},{"_id":"public/2019/08/29/Linux命令/index.html","hash":"66165aafff32fe6117b02fb62ada871f7e16b4d8","modified":1567124126911},{"_id":"public/2019/08/29/Linux概述/index.html","hash":"6ee2ee97034e05f9113f0433a87a07e128ef95e7","modified":1567124126911},{"_id":"public/2019/08/29/JVM初识/index.html","hash":"d36893080050500d02fa6cfb7099baac1169f709","modified":1567124126911},{"_id":"public/2019/08/29/Java基础/index.html","hash":"a70003c95a05d532b68e45c05941e0d7513db0a8","modified":1567124126911},{"_id":"public/2019/08/29/Eclipse常用配置/index.html","hash":"6bf97f1f0293b31031f59aeab50998e2472cce28","modified":1567124126912},{"_id":"public/2019/08/28/LogBack配置/index.html","hash":"c371b071316cad10a545f011666a3643682d3c43","modified":1567124126912},{"_id":"public/2019/08/28/Log4j配置/index.html","hash":"a665396793301832bf9edc0306c141830bbc60eb","modified":1567124126912},{"_id":"public/2019/08/28/Mybatis逆向工程配置/index.html","hash":"7abdf571782af49bb0d8da1ce53592df80892d97","modified":1567124126912},{"_id":"public/2019/08/28/Mybatis常用配置/index.html","hash":"bfa2ec38aad10a0882cc76a6d99e20dcada11d0a","modified":1567124126912},{"_id":"public/2019/08/28/Docker入门/index.html","hash":"8ad4ed952eb7342c2deced3256175d990bad921b","modified":1567124126913},{"_id":"public/2019/08/28/Git入门/index.html","hash":"15b649e8a734292aac28461ac0bace2e92cc87b1","modified":1567124126913},{"_id":"public/2019/08/28/Maven入门/index.html","hash":"21b5cfef84874b176e5626674ec33ddbec0fec92","modified":1567124126913},{"_id":"public/tags/maven/index.html","hash":"5e84d8f22a61ca388b4c5abd344f51365730b56b","modified":1567124126934},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1567124126936},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1567124126936},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1567124126936},{"_id":"public/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1567124126936},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1567124126936},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1567124126937},{"_id":"public/img/45.jpg","hash":"88d8a2f0070f4a9d2537bc7f8a8e3371c007675a","modified":1567124126937},{"_id":"public/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1567124126937},{"_id":"public/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1567124126937},{"_id":"public/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1567124126937},{"_id":"public/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1567124126937},{"_id":"public/2019/08/29/JVM初识/classloader.png","hash":"13ecf04812f428dc3da2a6ddc34878a680963ed3","modified":1567124126937},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1567124126937},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1567124126938},{"_id":"public/assets/css/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1567124126938},{"_id":"public/2019/08/29/JVM初识/heap.png","hash":"4ac33041819c526419b706100f2ae018ce342b26","modified":1567124127529},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1567124127530},{"_id":"public/assets/js/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1567124127531},{"_id":"public/css/highlight-dark.css","hash":"8bb8e85dacc5cae5c7e8ad0478ccb79ad6913c6f","modified":1567124127540},{"_id":"public/css/highlight.css","hash":"a1b0ae73703be0e5b0e0c3b5379c7adc3074374f","modified":1567124127540},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1567124127541},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1567124127541},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1567124127541},{"_id":"public/share/css/share.css","hash":"5adab1c310173c8726cf848dd7a57a968d001418","modified":1567124127541},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1567124127541},{"_id":"public/2019/08/29/JVM初识/jvm.png","hash":"b976eacb04ce0551c7eeff50002877f05ed4b818","modified":1567124127541},{"_id":"public/share/js/social-share.js","hash":"9bfe34fe7691833e90815c5c862545bde581cf29","modified":1567124127858},{"_id":"public/css/style-dark.css","hash":"7144d828f9399138464e3c624a9a260e875ca283","modified":1567124127880},{"_id":"public/css/style.css","hash":"0f48b3f5ce89e7360a6d1efcce1395befac8c63e","modified":1567124127880},{"_id":"public/share/js/qrcode.js","hash":"9caa0d9a9ba4409a3f77540a1b15a7617aeb28e8","modified":1567124127963},{"_id":"public/img/bg-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1567124127987}],"Category":[{"name":"学习笔记","_id":"cjzxd8orm0004agtn8dp2hy4z"},{"name":"IDE工具","_id":"cjzxd8os9000fagtnwt7ho5e2"},{"name":"配置文件","_id":"cjzxd8osn000sagtn73segl6i"}],"Data":[],"Page":[{"title":"关于我","date":"2019-08-29T17:06:40.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2019-08-30 01:06:40\n---\n","updated":"2019-08-29T22:05:52.915Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjzxd8orf0001agtnp0i9c3bd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>","site":{"data":{}},"excerpt":"","more":""},{"title":"歌单","date":"2019-08-29T17:07:00.000Z","_content":"{% meting \"2658625565\" \"netease\" \"playlist\" \"theme:#FF4081\" \"mode:circulation\" \"mutex:true\" \"listmaxheight:340px\" \"preload:auto\" %}\n","source":"playlist/index.md","raw":"---\ntitle: 歌单\ndate: 2019-08-30 01:07:00\n---\n{% meting \"2658625565\" \"netease\" \"playlist\" \"theme:#FF4081\" \"mode:circulation\" \"mutex:true\" \"listmaxheight:340px\" \"preload:auto\" %}\n","updated":"2019-08-29T22:24:22.568Z","path":"playlist/index.html","comments":1,"layout":"page","_id":"cjzxd8ork0003agtn9u3yl9vi","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-dafHAAtA\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"2658625565\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#FF4081\"></div>\n","site":{"data":{}},"excerpt":"","more":"\n    <div id=\"aplayer-dafHAAtA\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"2658625565\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#FF4081\"></div>\n"}],"Post":[{"title":"Docker入门","date":"2019-08-28T09:09:05.000Z","description":"docker、docker入门、docker命令、dockfile","_content":"### what is\n- Docker是一个容器管理引擎，是一个轻量级的虚拟化技术；从镜像和容器的角度来定义一个应用；\n- 将应用代码和配置等打包成一个可运行的环境（image），从而实现开发和生产环境的完美对接，达到一种一次构建到处运行的目的；\n- repository、image、container为其最重要的三个组成部分。\n- image是由一层一层的文件系统组成，即UnionFS；其最底层是bootfs；\n- image都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部；这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。\n- 通过容器数据卷来实现数据持久化和数据共享；\n\n### 安装与卸载\n- centos安装步骤\n\n\t①卸载旧版本\n\t``` \n\t$sudo yum remove docker \\\n\tdocker-client \\\n\tdocker-client-latest \\\n\tdocker-common \\\n\tdocker-latest \\\n\tdocker-latest-logrotate \\\n\tdocker-logrotate \\\n\tdocker-engine\n\t```\n\t②安装依赖包\n\t```\n\t$sudo yum install -y yum-utils \\\n\tdevice-mapper-persistent-data \\\n\tlvm2\n\t```\n\t③配置仓库地址（这里使用阿里巴巴的国内镜像）\n\t```\n\t$sudo yum-config-manager \\\n    --add-repo \\\n\thttps://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\t\n\t#这里可以清理yum缓存文件\n\t$yum makecache fast\n\t```\n\t④安装最新版或者自行选择版本\n\t```\n\t#列出docker引擎的可用版本\n\t$yum list docker-ce --showduplicates | sort -r\n\t#选择版本进行安装\n\t#例如查到docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable\n\t#那么VERSION_STRING就是 docker-ce-18.09.1\n\t$sudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io\n\t\n\t#也可以直接安装最新版\n\t$sudo yum install docker-ce docker-ce-cli containerd.io\n\t```\n\t⑤启动\n\t```\n\t$sudo systemctl start docker\n\t```\n\t⑥测试\n\t```\n\t$ sudo docker run hello-world\n\t\n\t或者执行docker version\n\t```\n\t⑦配置阿里云的镜像加速\n\t```\n\t登录阿里云进入控制台，搜索容器镜像服务\n\t点击镜像加速器，然后找到centos的配置信息，按步骤配置即可\n\t\n\tvi /etc/docker/daemon.json\n\t#这里的镜像ID（u7dhnsts）不同人会不同\n\t{\"registry-mirrors\": [\"https://u7dhnsts.mirror.aliyuncs.com\"]  }\n\t\n\tsudo systemctl daemon-reload\n\tsudo systemctl restart docker\n\t```\n- 卸载\n\t```\n\t$ sudo yum remove docker-ce\n\t$ sudo rm -rf /var/lib/docker\n\t```\n### docker命令\n1. `docker --help|docker <command> --help`：查看帮助\n1. `docker images` ：查看镜像列表；\n1. `docker rmi -f $(docker images -qa)`：删除多个镜像；\n1. `docker ps`；查看正在运行的容器；\n1. `docker rm -f $(docker ps -qa)`：删除所有的容器；\n1. `docker run <containerName|containerID>` ：在镜像上创建一个容器（本地没有则会自动去远程仓库拉去）；    \n\t```\n\tOPTIONS说明（常用）：有些是一个减号，有些是两个减号\n\t--name=\"容器新名字\": 为容器指定一个名称；\n\t-d: 后台运行容器，并返回容器ID，也即启动守护式容器；\n\t-i：以交互模式运行容器，通常与 -t 同时使用；\n\t-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\t-P: 随机端口映射；\n\t-p: 指定端口映射，有以下四种格式\n\t\t  ip:hostPort:containerPort\n\t\t  ip::containerPort\n\t hostPort:containerPort\n\t\t  containerPort\n\t```     \n1. `docker search <imageName:tag>`：在仓库上搜索镜像，默认latest；\n1. `docker pull <imageName:tag>`：从远程拉取镜像到本地；\n1. `docker exec -it /bin/bash`：进入正在运行的容器；\n1. `docker commit -m \"xxx\" -a \"xxx\" <containerName|containerID> targetImage:tag`：基于容器生成一个新的镜像；\n1. `docker inspect <containerName|containerID>`：查看容器的详细信息；\n1. `docker info | docker version`：查看docker的简单信息；\n1. `docker logs -f <containerName|containerID>`：查看一个容器的历史记录\n1. `docker start|stop|restart <containerName|containerID>`：启动、停止、重启容器；\n1. `docker kill <containerName|containerID>`：强制停止容器；\n1. `docker cp  containerID:path hostPath`：从容器拷贝文件到主机；\n1. `docker build -t 新镜像名字:TAG `：从Dockerfile中创建镜像；\n1. `docker history 镜像名`：查看镜像的变更历史；\n\n### Dockerfile\n- Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本；\n- Dockerfile约定\n1. 每条保留字指令都必须为大写字母且后面要跟随至少一个参数；\n2. 指令按照从上到下，顺序执行；\n3. 每条指令都会创建一个新的镜像层，并对镜像进行提交；\n- Dockerfile大致流程\n1. docker从基础镜像运行一个容器；\n2. 执行一条指令并对容器作出修改；\n3. 执行类似docker commit的操作提交一个新的镜像层；\n4. docker再基于刚提交的镜像运行一个新容器；\n5. 执行dockerfile中的下一条指令直到所有指令都执行完成；\n- Dockerfile中的关键字\n1. `FROM`：基础镜像，当前新镜像是基于哪个镜像的；\n1. `MAINTAINER`：镜像维护者的姓名和邮箱地址；\n1. `RUN`：容器构建时需要运行的命令；\n1. `EXPOSE`：当前容器对外暴露出的端口；\n1. `WORKDIR`：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点；\n1. `ENV`：用来在构建镜像过程中设置环境变量；\n1. `ADD`：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包；\n1. `COPY`：类似ADD，拷贝文件和目录到镜像中；但不进行解压；\n1. `VOLUME`：容器数据卷，用于数据保存和持久化工作；\n1. `CMD`：指定一个容器启动时要运行的命令；多个CMD会被覆盖；CMD 会被 docker run 之后的参数替换；\n1. `ENTRYPOINT`：ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数，以追加的方式执行；\n1. `ONBUILD`：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发；\n- 自定义tomcat9\n\t```\n\tFROM         centos\n\tMAINTAINER    zzyy\n\t#把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下\n\tCOPY c.txt /usr/local/cincontainer.txt\n\t#把java与tomcat添加到容器中\n\tADD jdk-8u171-linux-x64.tar.gz /usr/local/\n\tADD apache-tomcat-9.0.8.tar.gz /usr/local/\n\t#安装vim编辑器\n\tRUN yum -y install vim\n\t#设置工作访问时候的WORKDIR路径，登录落脚点\n\tENV MYPATH /usr/local\n\tWORKDIR $MYPATH\n\t#配置java与tomcat环境变量\n\tENV JAVA_HOME /usr/local/jdk1.8.0_171\n\tENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n\tENV CATALINA_HOME /usr/local/apache-tomcat-9.0.8\n\tENV CATALINA_BASE /usr/local/apache-tomcat-9.0.8\n\tENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin\n\t#容器运行时监听的端口\n\tEXPOSE  8080\n\t#启动时运行tomcat\n\t# ENTRYPOINT [\"/usr/local/apache-tomcat-9.0.8/bin/startup.sh\" ]\n\t# CMD [\"/usr/local/apache-tomcat-9.0.8/bin/catalina.sh\",\"run\"]\n\tCMD /usr/local/apache-tomcat-9.0.8/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.8/bin/logs/catalina.out\n\t```\n### docker安装mysql5.7\n```\ndocker run -d --name mysql-5.7 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/local/mysql/data:/var/lib/mysql -v /usr/local/mysql/my.cnf:/etc/mysql/my.cnf -v /usr/local/mysql/conf.d:/etc/mysql/conf.d -v /usr/local//mysql/mysql.conf.d:/etc/mysql/mysql.conf.d -v /usr/local/mysql/log:/var/log/mysql --privileged=true mysql:5.7\n\n```\n","source":"_posts/Docker入门.md","raw":"---\ntitle: Docker入门\ndate: 2019-08-28 17:09:05\ntags: docker\ncategories: 学习笔记\ndescription: docker、docker入门、docker命令、dockfile\n---\n### what is\n- Docker是一个容器管理引擎，是一个轻量级的虚拟化技术；从镜像和容器的角度来定义一个应用；\n- 将应用代码和配置等打包成一个可运行的环境（image），从而实现开发和生产环境的完美对接，达到一种一次构建到处运行的目的；\n- repository、image、container为其最重要的三个组成部分。\n- image是由一层一层的文件系统组成，即UnionFS；其最底层是bootfs；\n- image都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部；这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。\n- 通过容器数据卷来实现数据持久化和数据共享；\n\n### 安装与卸载\n- centos安装步骤\n\n\t①卸载旧版本\n\t``` \n\t$sudo yum remove docker \\\n\tdocker-client \\\n\tdocker-client-latest \\\n\tdocker-common \\\n\tdocker-latest \\\n\tdocker-latest-logrotate \\\n\tdocker-logrotate \\\n\tdocker-engine\n\t```\n\t②安装依赖包\n\t```\n\t$sudo yum install -y yum-utils \\\n\tdevice-mapper-persistent-data \\\n\tlvm2\n\t```\n\t③配置仓库地址（这里使用阿里巴巴的国内镜像）\n\t```\n\t$sudo yum-config-manager \\\n    --add-repo \\\n\thttps://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\t\n\t#这里可以清理yum缓存文件\n\t$yum makecache fast\n\t```\n\t④安装最新版或者自行选择版本\n\t```\n\t#列出docker引擎的可用版本\n\t$yum list docker-ce --showduplicates | sort -r\n\t#选择版本进行安装\n\t#例如查到docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable\n\t#那么VERSION_STRING就是 docker-ce-18.09.1\n\t$sudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io\n\t\n\t#也可以直接安装最新版\n\t$sudo yum install docker-ce docker-ce-cli containerd.io\n\t```\n\t⑤启动\n\t```\n\t$sudo systemctl start docker\n\t```\n\t⑥测试\n\t```\n\t$ sudo docker run hello-world\n\t\n\t或者执行docker version\n\t```\n\t⑦配置阿里云的镜像加速\n\t```\n\t登录阿里云进入控制台，搜索容器镜像服务\n\t点击镜像加速器，然后找到centos的配置信息，按步骤配置即可\n\t\n\tvi /etc/docker/daemon.json\n\t#这里的镜像ID（u7dhnsts）不同人会不同\n\t{\"registry-mirrors\": [\"https://u7dhnsts.mirror.aliyuncs.com\"]  }\n\t\n\tsudo systemctl daemon-reload\n\tsudo systemctl restart docker\n\t```\n- 卸载\n\t```\n\t$ sudo yum remove docker-ce\n\t$ sudo rm -rf /var/lib/docker\n\t```\n### docker命令\n1. `docker --help|docker <command> --help`：查看帮助\n1. `docker images` ：查看镜像列表；\n1. `docker rmi -f $(docker images -qa)`：删除多个镜像；\n1. `docker ps`；查看正在运行的容器；\n1. `docker rm -f $(docker ps -qa)`：删除所有的容器；\n1. `docker run <containerName|containerID>` ：在镜像上创建一个容器（本地没有则会自动去远程仓库拉去）；    \n\t```\n\tOPTIONS说明（常用）：有些是一个减号，有些是两个减号\n\t--name=\"容器新名字\": 为容器指定一个名称；\n\t-d: 后台运行容器，并返回容器ID，也即启动守护式容器；\n\t-i：以交互模式运行容器，通常与 -t 同时使用；\n\t-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\t-P: 随机端口映射；\n\t-p: 指定端口映射，有以下四种格式\n\t\t  ip:hostPort:containerPort\n\t\t  ip::containerPort\n\t hostPort:containerPort\n\t\t  containerPort\n\t```     \n1. `docker search <imageName:tag>`：在仓库上搜索镜像，默认latest；\n1. `docker pull <imageName:tag>`：从远程拉取镜像到本地；\n1. `docker exec -it /bin/bash`：进入正在运行的容器；\n1. `docker commit -m \"xxx\" -a \"xxx\" <containerName|containerID> targetImage:tag`：基于容器生成一个新的镜像；\n1. `docker inspect <containerName|containerID>`：查看容器的详细信息；\n1. `docker info | docker version`：查看docker的简单信息；\n1. `docker logs -f <containerName|containerID>`：查看一个容器的历史记录\n1. `docker start|stop|restart <containerName|containerID>`：启动、停止、重启容器；\n1. `docker kill <containerName|containerID>`：强制停止容器；\n1. `docker cp  containerID:path hostPath`：从容器拷贝文件到主机；\n1. `docker build -t 新镜像名字:TAG `：从Dockerfile中创建镜像；\n1. `docker history 镜像名`：查看镜像的变更历史；\n\n### Dockerfile\n- Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本；\n- Dockerfile约定\n1. 每条保留字指令都必须为大写字母且后面要跟随至少一个参数；\n2. 指令按照从上到下，顺序执行；\n3. 每条指令都会创建一个新的镜像层，并对镜像进行提交；\n- Dockerfile大致流程\n1. docker从基础镜像运行一个容器；\n2. 执行一条指令并对容器作出修改；\n3. 执行类似docker commit的操作提交一个新的镜像层；\n4. docker再基于刚提交的镜像运行一个新容器；\n5. 执行dockerfile中的下一条指令直到所有指令都执行完成；\n- Dockerfile中的关键字\n1. `FROM`：基础镜像，当前新镜像是基于哪个镜像的；\n1. `MAINTAINER`：镜像维护者的姓名和邮箱地址；\n1. `RUN`：容器构建时需要运行的命令；\n1. `EXPOSE`：当前容器对外暴露出的端口；\n1. `WORKDIR`：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点；\n1. `ENV`：用来在构建镜像过程中设置环境变量；\n1. `ADD`：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包；\n1. `COPY`：类似ADD，拷贝文件和目录到镜像中；但不进行解压；\n1. `VOLUME`：容器数据卷，用于数据保存和持久化工作；\n1. `CMD`：指定一个容器启动时要运行的命令；多个CMD会被覆盖；CMD 会被 docker run 之后的参数替换；\n1. `ENTRYPOINT`：ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数，以追加的方式执行；\n1. `ONBUILD`：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发；\n- 自定义tomcat9\n\t```\n\tFROM         centos\n\tMAINTAINER    zzyy\n\t#把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下\n\tCOPY c.txt /usr/local/cincontainer.txt\n\t#把java与tomcat添加到容器中\n\tADD jdk-8u171-linux-x64.tar.gz /usr/local/\n\tADD apache-tomcat-9.0.8.tar.gz /usr/local/\n\t#安装vim编辑器\n\tRUN yum -y install vim\n\t#设置工作访问时候的WORKDIR路径，登录落脚点\n\tENV MYPATH /usr/local\n\tWORKDIR $MYPATH\n\t#配置java与tomcat环境变量\n\tENV JAVA_HOME /usr/local/jdk1.8.0_171\n\tENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n\tENV CATALINA_HOME /usr/local/apache-tomcat-9.0.8\n\tENV CATALINA_BASE /usr/local/apache-tomcat-9.0.8\n\tENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin\n\t#容器运行时监听的端口\n\tEXPOSE  8080\n\t#启动时运行tomcat\n\t# ENTRYPOINT [\"/usr/local/apache-tomcat-9.0.8/bin/startup.sh\" ]\n\t# CMD [\"/usr/local/apache-tomcat-9.0.8/bin/catalina.sh\",\"run\"]\n\tCMD /usr/local/apache-tomcat-9.0.8/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.8/bin/logs/catalina.out\n\t```\n### docker安装mysql5.7\n```\ndocker run -d --name mysql-5.7 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/local/mysql/data:/var/lib/mysql -v /usr/local/mysql/my.cnf:/etc/mysql/my.cnf -v /usr/local/mysql/conf.d:/etc/mysql/conf.d -v /usr/local//mysql/mysql.conf.d:/etc/mysql/mysql.conf.d -v /usr/local/mysql/log:/var/log/mysql --privileged=true mysql:5.7\n\n```\n","slug":"Docker入门","published":1,"updated":"2019-08-29T15:25:51.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8or40000agtnuwlxvlxb","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>Docker是一个容器管理引擎，是一个轻量级的虚拟化技术；从镜像和容器的角度来定义一个应用；</li>\n<li>将应用代码和配置等打包成一个可运行的环境（image），从而实现开发和生产环境的完美对接，达到一种一次构建到处运行的目的；</li>\n<li>repository、image、container为其最重要的三个组成部分。</li>\n<li>image是由一层一层的文件系统组成，即UnionFS；其最底层是bootfs；</li>\n<li>image都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部；这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。</li>\n<li>通过容器数据卷来实现数据持久化和数据共享；</li>\n</ul>\n<h3 id=\"安装与卸载\"><a href=\"#安装与卸载\" class=\"headerlink\" title=\"安装与卸载\"></a>安装与卸载</h3><ul>\n<li><p>centos安装步骤</p>\n<p>  ①卸载旧版本</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo yum remove docker \\</span><br><span class=\"line\">docker-client \\</span><br><span class=\"line\">docker-client-latest \\</span><br><span class=\"line\">docker-common \\</span><br><span class=\"line\">docker-latest \\</span><br><span class=\"line\">docker-latest-logrotate \\</span><br><span class=\"line\">docker-logrotate \\</span><br><span class=\"line\">docker-engine</span><br></pre></td></tr></table></figure>\n\n<p>  ②安装依赖包</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo yum install -y yum-utils \\</span><br><span class=\"line\">device-mapper-persistent-data \\</span><br><span class=\"line\">lvm2</span><br></pre></td></tr></table></figure>\n\n<p>  ③配置仓库地址（这里使用阿里巴巴的国内镜像）</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo yum-config-manager \\</span><br><span class=\"line\">   --add-repo \\</span><br><span class=\"line\">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\">#这里可以清理yum缓存文件</span><br><span class=\"line\">$yum makecache fast</span><br></pre></td></tr></table></figure>\n\n<p>  ④安装最新版或者自行选择版本</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列出docker引擎的可用版本</span><br><span class=\"line\">$yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\">#选择版本进行安装</span><br><span class=\"line\">#例如查到docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class=\"line\">#那么VERSION_STRING就是 docker-ce-18.09.1</span><br><span class=\"line\">$sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class=\"line\"></span><br><span class=\"line\">#也可以直接安装最新版</span><br><span class=\"line\">$sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<p>  ⑤启动</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<p>  ⑥测试</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run hello-world</span><br><span class=\"line\"></span><br><span class=\"line\">或者执行docker version</span><br></pre></td></tr></table></figure>\n\n<p>  ⑦配置阿里云的镜像加速</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录阿里云进入控制台，搜索容器镜像服务</span><br><span class=\"line\">点击镜像加速器，然后找到centos的配置信息，按步骤配置即可</span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/docker/daemon.json</span><br><span class=\"line\">#这里的镜像ID（u7dhnsts）不同人会不同</span><br><span class=\"line\">&#123;&quot;registry-mirrors&quot;: [&quot;https://u7dhnsts.mirror.aliyuncs.com&quot;]  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum remove docker-ce</span><br><span class=\"line\">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"docker命令\"><a href=\"#docker命令\" class=\"headerlink\" title=\"docker命令\"></a>docker命令</h3><ol>\n<li><p><code>docker --help|docker &lt;command&gt; --help</code>：查看帮助</p>\n</li>\n<li><p><code>docker images</code> ：查看镜像列表；</p>\n</li>\n<li><p><code>docker rmi -f $(docker images -qa)</code>：删除多个镜像；</p>\n</li>\n<li><p><code>docker ps</code>；查看正在运行的容器；</p>\n</li>\n<li><p><code>docker rm -f $(docker ps -qa)</code>：删除所有的容器；</p>\n</li>\n<li><p><code>docker run &lt;containerName|containerID&gt;</code> ：在镜像上创建一个容器（本地没有则会自动去远程仓库拉去）；    </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tOPTIONS说明（常用）：有些是一个减号，有些是两个减号</span><br><span class=\"line\">\t--name=&quot;容器新名字&quot;: 为容器指定一个名称；</span><br><span class=\"line\">\t-d: 后台运行容器，并返回容器ID，也即启动守护式容器；</span><br><span class=\"line\">\t-i：以交互模式运行容器，通常与 -t 同时使用；</span><br><span class=\"line\">\t-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class=\"line\">\t-P: 随机端口映射；</span><br><span class=\"line\">\t-p: 指定端口映射，有以下四种格式</span><br><span class=\"line\">\t\t  ip:hostPort:containerPort</span><br><span class=\"line\">\t\t  ip::containerPort</span><br><span class=\"line\">\t hostPort:containerPort</span><br><span class=\"line\">\t\t  containerPort</span><br><span class=\"line\">\t```     </span><br><span class=\"line\">1. `docker search &lt;imageName:tag&gt;`：在仓库上搜索镜像，默认latest；</span><br><span class=\"line\">1. `docker pull &lt;imageName:tag&gt;`：从远程拉取镜像到本地；</span><br><span class=\"line\">1. `docker exec -it /bin/bash`：进入正在运行的容器；</span><br><span class=\"line\">1. `docker commit -m &quot;xxx&quot; -a &quot;xxx&quot; &lt;containerName|containerID&gt; targetImage:tag`：基于容器生成一个新的镜像；</span><br><span class=\"line\">1. `docker inspect &lt;containerName|containerID&gt;`：查看容器的详细信息；</span><br><span class=\"line\">1. `docker info | docker version`：查看docker的简单信息；</span><br><span class=\"line\">1. `docker logs -f &lt;containerName|containerID&gt;`：查看一个容器的历史记录</span><br><span class=\"line\">1. `docker start|stop|restart &lt;containerName|containerID&gt;`：启动、停止、重启容器；</span><br><span class=\"line\">1. `docker kill &lt;containerName|containerID&gt;`：强制停止容器；</span><br><span class=\"line\">1. `docker cp  containerID:path hostPath`：从容器拷贝文件到主机；</span><br><span class=\"line\">1. `docker build -t 新镜像名字:TAG `：从Dockerfile中创建镜像；</span><br><span class=\"line\">1. `docker history 镜像名`：查看镜像的变更历史；</span><br><span class=\"line\"></span><br><span class=\"line\">### Dockerfile</span><br><span class=\"line\">- Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本；</span><br><span class=\"line\">- Dockerfile约定</span><br><span class=\"line\">1. 每条保留字指令都必须为大写字母且后面要跟随至少一个参数；</span><br><span class=\"line\">2. 指令按照从上到下，顺序执行；</span><br><span class=\"line\">3. 每条指令都会创建一个新的镜像层，并对镜像进行提交；</span><br><span class=\"line\">- Dockerfile大致流程</span><br><span class=\"line\">1. docker从基础镜像运行一个容器；</span><br><span class=\"line\">2. 执行一条指令并对容器作出修改；</span><br><span class=\"line\">3. 执行类似docker commit的操作提交一个新的镜像层；</span><br><span class=\"line\">4. docker再基于刚提交的镜像运行一个新容器；</span><br><span class=\"line\">5. 执行dockerfile中的下一条指令直到所有指令都执行完成；</span><br><span class=\"line\">- Dockerfile中的关键字</span><br><span class=\"line\">1. `FROM`：基础镜像，当前新镜像是基于哪个镜像的；</span><br><span class=\"line\">1. `MAINTAINER`：镜像维护者的姓名和邮箱地址；</span><br><span class=\"line\">1. `RUN`：容器构建时需要运行的命令；</span><br><span class=\"line\">1. `EXPOSE`：当前容器对外暴露出的端口；</span><br><span class=\"line\">1. `WORKDIR`：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点；</span><br><span class=\"line\">1. `ENV`：用来在构建镜像过程中设置环境变量；</span><br><span class=\"line\">1. `ADD`：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包；</span><br><span class=\"line\">1. `COPY`：类似ADD，拷贝文件和目录到镜像中；但不进行解压；</span><br><span class=\"line\">1. `VOLUME`：容器数据卷，用于数据保存和持久化工作；</span><br><span class=\"line\">1. `CMD`：指定一个容器启动时要运行的命令；多个CMD会被覆盖；CMD 会被 docker run 之后的参数替换；</span><br><span class=\"line\">1. `ENTRYPOINT`：ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数，以追加的方式执行；</span><br><span class=\"line\">1. `ONBUILD`：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发；</span><br><span class=\"line\">- 自定义tomcat9</span><br></pre></td></tr></table></figure>\n\n<p> FROM         centos<br> MAINTAINER    zzyy<br> #把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下<br> COPY c.txt /usr/local/cincontainer.txt<br> #把java与tomcat添加到容器中<br> ADD jdk-8u171-linux-x64.tar.gz /usr/local/<br> ADD apache-tomcat-9.0.8.tar.gz /usr/local/<br> #安装vim编辑器<br> RUN yum -y install vim<br> #设置工作访问时候的WORKDIR路径，登录落脚点<br> ENV MYPATH /usr/local<br> WORKDIR $MYPATH<br> #配置java与tomcat环境变量<br> ENV JAVA_HOME /usr/local/jdk1.8.0_171<br> ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br> ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.8<br> ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.8<br> ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin<br> #容器运行时监听的端口<br> EXPOSE  8080<br> #启动时运行tomcat</p>\n<h1 id=\"ENTRYPOINT-“-usr-local-apache-tomcat-9-0-8-bin-startup-sh”\"><a href=\"#ENTRYPOINT-“-usr-local-apache-tomcat-9-0-8-bin-startup-sh”\" class=\"headerlink\" title=\"ENTRYPOINT [“/usr/local/apache-tomcat-9.0.8/bin/startup.sh” ]\"></a>ENTRYPOINT [“/usr/local/apache-tomcat-9.0.8/bin/startup.sh” ]</h1><h1 id=\"CMD-“-usr-local-apache-tomcat-9-0-8-bin-catalina-sh”-”run”\"><a href=\"#CMD-“-usr-local-apache-tomcat-9-0-8-bin-catalina-sh”-”run”\" class=\"headerlink\" title=\"CMD [“/usr/local/apache-tomcat-9.0.8/bin/catalina.sh”,”run”]\"></a>CMD [“/usr/local/apache-tomcat-9.0.8/bin/catalina.sh”,”run”]</h1><p> CMD /usr/local/apache-tomcat-9.0.8/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.8/bin/logs/catalina.out</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### docker安装mysql5.7</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>docker run -d –name mysql-5.7 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/local/mysql/data:/var/lib/mysql -v /usr/local/mysql/my.cnf:/etc/mysql/my.cnf -v /usr/local/mysql/conf.d:/etc/mysql/conf.d -v /usr/local//mysql/mysql.conf.d:/etc/mysql/mysql.conf.d -v /usr/local/mysql/log:/var/log/mysql –privileged=true mysql:5.7</p>\n<pre><code></code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>Docker是一个容器管理引擎，是一个轻量级的虚拟化技术；从镜像和容器的角度来定义一个应用；</li>\n<li>将应用代码和配置等打包成一个可运行的环境（image），从而实现开发和生产环境的完美对接，达到一种一次构建到处运行的目的；</li>\n<li>repository、image、container为其最重要的三个组成部分。</li>\n<li>image是由一层一层的文件系统组成，即UnionFS；其最底层是bootfs；</li>\n<li>image都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部；这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。</li>\n<li>通过容器数据卷来实现数据持久化和数据共享；</li>\n</ul>\n<h3 id=\"安装与卸载\"><a href=\"#安装与卸载\" class=\"headerlink\" title=\"安装与卸载\"></a>安装与卸载</h3><ul>\n<li><p>centos安装步骤</p>\n<p>  ①卸载旧版本</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo yum remove docker \\</span><br><span class=\"line\">docker-client \\</span><br><span class=\"line\">docker-client-latest \\</span><br><span class=\"line\">docker-common \\</span><br><span class=\"line\">docker-latest \\</span><br><span class=\"line\">docker-latest-logrotate \\</span><br><span class=\"line\">docker-logrotate \\</span><br><span class=\"line\">docker-engine</span><br></pre></td></tr></table></figure>\n\n<p>  ②安装依赖包</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo yum install -y yum-utils \\</span><br><span class=\"line\">device-mapper-persistent-data \\</span><br><span class=\"line\">lvm2</span><br></pre></td></tr></table></figure>\n\n<p>  ③配置仓库地址（这里使用阿里巴巴的国内镜像）</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo yum-config-manager \\</span><br><span class=\"line\">   --add-repo \\</span><br><span class=\"line\">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\">#这里可以清理yum缓存文件</span><br><span class=\"line\">$yum makecache fast</span><br></pre></td></tr></table></figure>\n\n<p>  ④安装最新版或者自行选择版本</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列出docker引擎的可用版本</span><br><span class=\"line\">$yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\">#选择版本进行安装</span><br><span class=\"line\">#例如查到docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class=\"line\">#那么VERSION_STRING就是 docker-ce-18.09.1</span><br><span class=\"line\">$sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class=\"line\"></span><br><span class=\"line\">#也可以直接安装最新版</span><br><span class=\"line\">$sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<p>  ⑤启动</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<p>  ⑥测试</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run hello-world</span><br><span class=\"line\"></span><br><span class=\"line\">或者执行docker version</span><br></pre></td></tr></table></figure>\n\n<p>  ⑦配置阿里云的镜像加速</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录阿里云进入控制台，搜索容器镜像服务</span><br><span class=\"line\">点击镜像加速器，然后找到centos的配置信息，按步骤配置即可</span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/docker/daemon.json</span><br><span class=\"line\">#这里的镜像ID（u7dhnsts）不同人会不同</span><br><span class=\"line\">&#123;&quot;registry-mirrors&quot;: [&quot;https://u7dhnsts.mirror.aliyuncs.com&quot;]  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum remove docker-ce</span><br><span class=\"line\">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"docker命令\"><a href=\"#docker命令\" class=\"headerlink\" title=\"docker命令\"></a>docker命令</h3><ol>\n<li><p><code>docker --help|docker &lt;command&gt; --help</code>：查看帮助</p>\n</li>\n<li><p><code>docker images</code> ：查看镜像列表；</p>\n</li>\n<li><p><code>docker rmi -f $(docker images -qa)</code>：删除多个镜像；</p>\n</li>\n<li><p><code>docker ps</code>；查看正在运行的容器；</p>\n</li>\n<li><p><code>docker rm -f $(docker ps -qa)</code>：删除所有的容器；</p>\n</li>\n<li><p><code>docker run &lt;containerName|containerID&gt;</code> ：在镜像上创建一个容器（本地没有则会自动去远程仓库拉去）；    </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tOPTIONS说明（常用）：有些是一个减号，有些是两个减号</span><br><span class=\"line\">\t--name=&quot;容器新名字&quot;: 为容器指定一个名称；</span><br><span class=\"line\">\t-d: 后台运行容器，并返回容器ID，也即启动守护式容器；</span><br><span class=\"line\">\t-i：以交互模式运行容器，通常与 -t 同时使用；</span><br><span class=\"line\">\t-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class=\"line\">\t-P: 随机端口映射；</span><br><span class=\"line\">\t-p: 指定端口映射，有以下四种格式</span><br><span class=\"line\">\t\t  ip:hostPort:containerPort</span><br><span class=\"line\">\t\t  ip::containerPort</span><br><span class=\"line\">\t hostPort:containerPort</span><br><span class=\"line\">\t\t  containerPort</span><br><span class=\"line\">\t```     </span><br><span class=\"line\">1. `docker search &lt;imageName:tag&gt;`：在仓库上搜索镜像，默认latest；</span><br><span class=\"line\">1. `docker pull &lt;imageName:tag&gt;`：从远程拉取镜像到本地；</span><br><span class=\"line\">1. `docker exec -it /bin/bash`：进入正在运行的容器；</span><br><span class=\"line\">1. `docker commit -m &quot;xxx&quot; -a &quot;xxx&quot; &lt;containerName|containerID&gt; targetImage:tag`：基于容器生成一个新的镜像；</span><br><span class=\"line\">1. `docker inspect &lt;containerName|containerID&gt;`：查看容器的详细信息；</span><br><span class=\"line\">1. `docker info | docker version`：查看docker的简单信息；</span><br><span class=\"line\">1. `docker logs -f &lt;containerName|containerID&gt;`：查看一个容器的历史记录</span><br><span class=\"line\">1. `docker start|stop|restart &lt;containerName|containerID&gt;`：启动、停止、重启容器；</span><br><span class=\"line\">1. `docker kill &lt;containerName|containerID&gt;`：强制停止容器；</span><br><span class=\"line\">1. `docker cp  containerID:path hostPath`：从容器拷贝文件到主机；</span><br><span class=\"line\">1. `docker build -t 新镜像名字:TAG `：从Dockerfile中创建镜像；</span><br><span class=\"line\">1. `docker history 镜像名`：查看镜像的变更历史；</span><br><span class=\"line\"></span><br><span class=\"line\">### Dockerfile</span><br><span class=\"line\">- Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本；</span><br><span class=\"line\">- Dockerfile约定</span><br><span class=\"line\">1. 每条保留字指令都必须为大写字母且后面要跟随至少一个参数；</span><br><span class=\"line\">2. 指令按照从上到下，顺序执行；</span><br><span class=\"line\">3. 每条指令都会创建一个新的镜像层，并对镜像进行提交；</span><br><span class=\"line\">- Dockerfile大致流程</span><br><span class=\"line\">1. docker从基础镜像运行一个容器；</span><br><span class=\"line\">2. 执行一条指令并对容器作出修改；</span><br><span class=\"line\">3. 执行类似docker commit的操作提交一个新的镜像层；</span><br><span class=\"line\">4. docker再基于刚提交的镜像运行一个新容器；</span><br><span class=\"line\">5. 执行dockerfile中的下一条指令直到所有指令都执行完成；</span><br><span class=\"line\">- Dockerfile中的关键字</span><br><span class=\"line\">1. `FROM`：基础镜像，当前新镜像是基于哪个镜像的；</span><br><span class=\"line\">1. `MAINTAINER`：镜像维护者的姓名和邮箱地址；</span><br><span class=\"line\">1. `RUN`：容器构建时需要运行的命令；</span><br><span class=\"line\">1. `EXPOSE`：当前容器对外暴露出的端口；</span><br><span class=\"line\">1. `WORKDIR`：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点；</span><br><span class=\"line\">1. `ENV`：用来在构建镜像过程中设置环境变量；</span><br><span class=\"line\">1. `ADD`：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包；</span><br><span class=\"line\">1. `COPY`：类似ADD，拷贝文件和目录到镜像中；但不进行解压；</span><br><span class=\"line\">1. `VOLUME`：容器数据卷，用于数据保存和持久化工作；</span><br><span class=\"line\">1. `CMD`：指定一个容器启动时要运行的命令；多个CMD会被覆盖；CMD 会被 docker run 之后的参数替换；</span><br><span class=\"line\">1. `ENTRYPOINT`：ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数，以追加的方式执行；</span><br><span class=\"line\">1. `ONBUILD`：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发；</span><br><span class=\"line\">- 自定义tomcat9</span><br></pre></td></tr></table></figure>\n\n<p> FROM         centos<br> MAINTAINER    zzyy<br> #把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下<br> COPY c.txt /usr/local/cincontainer.txt<br> #把java与tomcat添加到容器中<br> ADD jdk-8u171-linux-x64.tar.gz /usr/local/<br> ADD apache-tomcat-9.0.8.tar.gz /usr/local/<br> #安装vim编辑器<br> RUN yum -y install vim<br> #设置工作访问时候的WORKDIR路径，登录落脚点<br> ENV MYPATH /usr/local<br> WORKDIR $MYPATH<br> #配置java与tomcat环境变量<br> ENV JAVA_HOME /usr/local/jdk1.8.0_171<br> ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br> ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.8<br> ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.8<br> ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin<br> #容器运行时监听的端口<br> EXPOSE  8080<br> #启动时运行tomcat</p>\n<h1 id=\"ENTRYPOINT-“-usr-local-apache-tomcat-9-0-8-bin-startup-sh”\"><a href=\"#ENTRYPOINT-“-usr-local-apache-tomcat-9-0-8-bin-startup-sh”\" class=\"headerlink\" title=\"ENTRYPOINT [“/usr/local/apache-tomcat-9.0.8/bin/startup.sh” ]\"></a>ENTRYPOINT [“/usr/local/apache-tomcat-9.0.8/bin/startup.sh” ]</h1><h1 id=\"CMD-“-usr-local-apache-tomcat-9-0-8-bin-catalina-sh”-”run”\"><a href=\"#CMD-“-usr-local-apache-tomcat-9-0-8-bin-catalina-sh”-”run”\" class=\"headerlink\" title=\"CMD [“/usr/local/apache-tomcat-9.0.8/bin/catalina.sh”,”run”]\"></a>CMD [“/usr/local/apache-tomcat-9.0.8/bin/catalina.sh”,”run”]</h1><p> CMD /usr/local/apache-tomcat-9.0.8/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.8/bin/logs/catalina.out</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### docker安装mysql5.7</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>docker run -d –name mysql-5.7 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/local/mysql/data:/var/lib/mysql -v /usr/local/mysql/my.cnf:/etc/mysql/my.cnf -v /usr/local/mysql/conf.d:/etc/mysql/conf.d -v /usr/local//mysql/mysql.conf.d:/etc/mysql/mysql.conf.d -v /usr/local/mysql/log:/var/log/mysql –privileged=true mysql:5.7</p>\n<pre><code></code></pre>"},{"title":"Dos命令","date":"2019-08-29T09:57:50.000Z","_content":"### dos 下查看端口\n- `netstat -ano | findstr 4000`：查看4000端口详细信息;\n- `tasklist | findstr 6068`：在任务列表中找到对应PID为6068的进程;\n- `taskkill /F /PID 6068`：强制杀死6068进程;\n\t\n","source":"_posts/Dos命令.md","raw":"---\ntitle: Dos命令\ndate: 2019-08-29 17:57:50\ntags: dos\ncategories: 学习笔记\n---\n### dos 下查看端口\n- `netstat -ano | findstr 4000`：查看4000端口详细信息;\n- `tasklist | findstr 6068`：在任务列表中找到对应PID为6068的进程;\n- `taskkill /F /PID 6068`：强制杀死6068进程;\n\t\n","slug":"Dos命令","published":1,"updated":"2019-08-29T10:02:04.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8orh0002agtnrrevwkzb","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"dos-下查看端口\"><a href=\"#dos-下查看端口\" class=\"headerlink\" title=\"dos 下查看端口\"></a>dos 下查看端口</h3><ul>\n<li><code>netstat -ano | findstr 4000</code>：查看4000端口详细信息;</li>\n<li><code>tasklist | findstr 6068</code>：在任务列表中找到对应PID为6068的进程;</li>\n<li><code>taskkill /F /PID 6068</code>：强制杀死6068进程;</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"dos-下查看端口\"><a href=\"#dos-下查看端口\" class=\"headerlink\" title=\"dos 下查看端口\"></a>dos 下查看端口</h3><ul>\n<li><code>netstat -ano | findstr 4000</code>：查看4000端口详细信息;</li>\n<li><code>tasklist | findstr 6068</code>：在任务列表中找到对应PID为6068的进程;</li>\n<li><code>taskkill /F /PID 6068</code>：强制杀死6068进程;</li>\n</ul>\n"},{"title":"Eclipse常用配置","date":"2019-08-28T16:48:08.000Z","_content":"\n### Eclispe常用配置\n1. Window->Preferences->General->勾选\"show heap status\";\n2. Window->Preferences->General->Appearance->取消勾选\"show most recently used tabs\";\n3. Window->Preferences->General->Appearance->Colors and Fonts->Basic->Text Font->Edit->调整字体大小;\n4. Window->Preferences->General->Content Types->Java Properties File->Default Encoding->修改为UTF-8->Update;\n5. Window->Preferences->General->Editors->Text Editors->Background color->背景色调整为RGB(199,237,204);\n6. Window->Preferences->General->Editors->Text Editors->Spelling->取消勾选\"enable spell checking\";\n7. Window->Preferences->General->Project Natures->取消勾选\"Automatically detect missing ...\";\n8. Window->Preferences->General->Sartup and Shutdown->仅保留git UI;\n9. Window->Preferences->General->Workspace->Text file encoding->修改为UTF-8;\n\n1. Window->Preferences->Install/Update->Automatic Updates->取消勾选\"Automatically find new ...\";\n2. Window->Preferences->Java->Code Style->Code Templates->Comments->Types->修改为`@author ${user}  <mailto:jmzc_top@aliyun.com>`;\n3. Window->Preferences->Java->Code Style->Code Templates->Code->去掉注释部分;\n4. Window->Preferences->Java->Code Style->Formatter->创建一个新的myself模板->然后去掉Comments选择卡中的JavaDoc和block comment格式化;\n5. Window->Preferences->Java->Editors->Content Assist->Auto activation triggers for java->修改为`abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ.`;\n6. Window->Preferences->Java->Editors->Content Assist->Advanced->取消勾选\"Java Proposals(Code Recommenders)\";\n7. Window->Preferences->Java->Editors->Templates->可以修改预定义模板或者新建模板;\n8. Window->Preferences->Java->Installed JREs->修改JRE为安装的JDK;\n\n1. Window->Preferences->JavaScript->Code Style->Formatter->创建一个新的myself模板->然后去掉Comments选择卡中的JavaDoc和block comment格式化;\n2. Window->Preferences->JavaScript->Editors->Content Assist->Auto activation triggers for javascript->修改为`abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ.`;\n\n1. Window->Preferences->Maven->Installings->添加外部的maven安装目录->进行勾选;\n2. Window->Preferences->Maven->User Settings->User Settings选择外部settings文件路径;\n\n1. Window->Preferences->Server->Runtime Environment->Add->添加外部tomcat;\n2. Window->Preferences->Web->JSP Files->修改Encoding为UTF-8;\n\n### sts插件(老版本地址推演)\n1. 在[sts插件官网](https://spring.io/tools3/sts/all)找到eclipse4.9.0的下载地址,如下：\n```\n分解：\nhttps://download.springsource.com/release/TOOLS/update (保留1)\n/3.9.9.RELEASE/e4.9\n/springsource-tool-suite (保留4)\n-3.9.9.RELEASE-e4.9.0\n-updatesite.zip (保留6)\n```\n2. 在[STS官网](https://spring.io/tools3/sts/legacy)找到对应的Eclipse的版本的下载地址,如下\n```\n分解：\nhttps://download.springsource.com/release/STS\n/3.9.6.RELEASE (保留2)\n/dist\n/e4.9 (保留3)\n/spring-tool-suite\n-3.9.6.RELEASE-e4.9.0 (保留5)\n-win32-x86_64.zip\n```\n3. 推算sts插件其他版本的地址，只需知道STS的下载地址，然后安装保留序号进行拼接即可；如需要下载eclispe4.7.3a的sts插件：\n- STS下载地址：https://download.springsource.com/release/STS/3.9.4.RELEASE/dist/e4.7/spring-tool-suite-3.9.4.RELEASE-e4.7.3a-win32-x86_64.zip\n- 按照上面的推导规则，得到sts插件的离线下载包地址为：\nhttps://download.springsource.com/release/TOOLS/update/3.9.4.RELEASE/e4.7/springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip\n4. 下载安装\n- 打开eclispe->Help->Install New Software->Add->Achieve->选择下载的压缩包->OK->选择带有IDE的4个进行安装（取消勾选下面的站点升级）\n\n### 安装lombok\n- [官网下载](https://www.projectlombok.org/)lombok.jar或者通过maven下载；\n- 双击jar，在出现的界面选择eclispe根目录中的eclispe.exe，再点击install/update即可;\n\n### uml插件\n- planUML安装\n\t1. 官网地址：http://plantuml.com/zh;\n\t2. Help->Install New Software->Add->添加地址(http://hallvard.github.io/plantuml )->全部安装即可;\n\t3. [下载Graphviz](https://www.graphviz.org/download/)并安装;\n\t4. Window->Preferences->PlantUML->配置dot.exe的路径;\n\t5. Window->Show View->PlanUML;\n- AmaterasUML安装\n\t1. Help->Install New Software->Add->添加地址(https://takezoe.github.io/amateras-update-site/)->全部安装即可;\n\n### eclipse手动安装插件\n1. 在eclipse根目录下建文件夹MyPlugins;\n2. 下载插件并解压得到包含features和plugins的文件夹XXX;\n3. 完成复制和建立文件夹的操作之后，如${eclipse_Home}\\MyPlugins\\XXX\\eclipse\\features和..\\plugins文件夹;\n4. 在eclipse_Home下建links文件夹,并建立一个p1_xxx.link文件,内容为`path=${eclipse_Home}/MyPlugins/xxx`\n\t- 注意:\n\t\t- 路径中是\"/\"或者\"\\\\\"  而不是\"\\\" ;\n\t\t- ${eclipse_Home}换成实际绝对地址：如D:\\\\eclipse\\\\MyPlugins\\\\quantum303;\n\t\t- link目录下的文件eclipse都要读入,小心！;\n\t\t- path下面应该有eclipse文件夹，而不是将path设置成eclipse文件夹;\n\t\t- 让path下面有plugins和features这两个目录;\n5.  删除${eclipse_Home}\\configuration中的org.eclipse.update目录;\n6.  重启eclipse,ok.  其实，myeclipse的插件安装就是如此操作的;\n\n### eclispe注释模板\n```\n文件(Files)注释标签：\n/**  \n* @Title: ${file_name}\n* @Package ${package_name}\n* @Description: ${todo}(用一句话描述该文件做什么)\n* @author A18ccms A18ccms_gmail_com  \n* @date ${date} ${time}\n* @version V1.0  \n*/\n\n类型(Types)注释标签（类的注释）：\n/**\n* @ClassName: ${type_name}\n* @Description: ${todo}(这里用一句话描述这个类的作用)\n* @author A18ccms a18ccms_gmail_com\n* @date ${date} ${time}\n*\n* ${tags}\n*/\n\n字段(Fields)注释标签：\n/**\n* @Fields ${field} : ${todo}(用一句话描述这个变量表示什么)\n*/\n\n构造函数标签：\n/**\n* <p>Title: </p>\n* <p>Description: </p>\n* ${tags}\n*/\n\n方法(Constructor & Methods)标签：\n/**\n* @Title: ${enclosing_method}\n* @Description: ${todo}(这里用一句话描述这个方法的作用)\n* @param ${tags}    设定文件\n* @return ${return_type}    返回类型\n* @throws\n*/\n\n覆盖方法(Overriding Methods)标签：\n/* (非 Javadoc)\n* <p>Title: ${enclosing_method}</p>\n* <p>Description: </p>\n* ${tags}\n* ${see_to_overridden}\n*/\n\n代表方法(Delegate Methods)标签：\n/**\n* ${tags}\n* ${see_to_target}\n*/\n\ngetter方法标签：\n/**\n* @return ${bare_field_name}\n*/\n\nsetter方法标签：\n/**\n* @param ${param} 要设置的 ${bare_field_name}\n*/\n```\n\n\n","source":"_posts/Eclipse常用配置.md","raw":"---\ntitle: Eclipse常用配置\ndate: 2019-08-29 00:48:08\ntags: eclipse\ncategories: IDE工具\n---\n\n### Eclispe常用配置\n1. Window->Preferences->General->勾选\"show heap status\";\n2. Window->Preferences->General->Appearance->取消勾选\"show most recently used tabs\";\n3. Window->Preferences->General->Appearance->Colors and Fonts->Basic->Text Font->Edit->调整字体大小;\n4. Window->Preferences->General->Content Types->Java Properties File->Default Encoding->修改为UTF-8->Update;\n5. Window->Preferences->General->Editors->Text Editors->Background color->背景色调整为RGB(199,237,204);\n6. Window->Preferences->General->Editors->Text Editors->Spelling->取消勾选\"enable spell checking\";\n7. Window->Preferences->General->Project Natures->取消勾选\"Automatically detect missing ...\";\n8. Window->Preferences->General->Sartup and Shutdown->仅保留git UI;\n9. Window->Preferences->General->Workspace->Text file encoding->修改为UTF-8;\n\n1. Window->Preferences->Install/Update->Automatic Updates->取消勾选\"Automatically find new ...\";\n2. Window->Preferences->Java->Code Style->Code Templates->Comments->Types->修改为`@author ${user}  <mailto:jmzc_top@aliyun.com>`;\n3. Window->Preferences->Java->Code Style->Code Templates->Code->去掉注释部分;\n4. Window->Preferences->Java->Code Style->Formatter->创建一个新的myself模板->然后去掉Comments选择卡中的JavaDoc和block comment格式化;\n5. Window->Preferences->Java->Editors->Content Assist->Auto activation triggers for java->修改为`abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ.`;\n6. Window->Preferences->Java->Editors->Content Assist->Advanced->取消勾选\"Java Proposals(Code Recommenders)\";\n7. Window->Preferences->Java->Editors->Templates->可以修改预定义模板或者新建模板;\n8. Window->Preferences->Java->Installed JREs->修改JRE为安装的JDK;\n\n1. Window->Preferences->JavaScript->Code Style->Formatter->创建一个新的myself模板->然后去掉Comments选择卡中的JavaDoc和block comment格式化;\n2. Window->Preferences->JavaScript->Editors->Content Assist->Auto activation triggers for javascript->修改为`abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ.`;\n\n1. Window->Preferences->Maven->Installings->添加外部的maven安装目录->进行勾选;\n2. Window->Preferences->Maven->User Settings->User Settings选择外部settings文件路径;\n\n1. Window->Preferences->Server->Runtime Environment->Add->添加外部tomcat;\n2. Window->Preferences->Web->JSP Files->修改Encoding为UTF-8;\n\n### sts插件(老版本地址推演)\n1. 在[sts插件官网](https://spring.io/tools3/sts/all)找到eclipse4.9.0的下载地址,如下：\n```\n分解：\nhttps://download.springsource.com/release/TOOLS/update (保留1)\n/3.9.9.RELEASE/e4.9\n/springsource-tool-suite (保留4)\n-3.9.9.RELEASE-e4.9.0\n-updatesite.zip (保留6)\n```\n2. 在[STS官网](https://spring.io/tools3/sts/legacy)找到对应的Eclipse的版本的下载地址,如下\n```\n分解：\nhttps://download.springsource.com/release/STS\n/3.9.6.RELEASE (保留2)\n/dist\n/e4.9 (保留3)\n/spring-tool-suite\n-3.9.6.RELEASE-e4.9.0 (保留5)\n-win32-x86_64.zip\n```\n3. 推算sts插件其他版本的地址，只需知道STS的下载地址，然后安装保留序号进行拼接即可；如需要下载eclispe4.7.3a的sts插件：\n- STS下载地址：https://download.springsource.com/release/STS/3.9.4.RELEASE/dist/e4.7/spring-tool-suite-3.9.4.RELEASE-e4.7.3a-win32-x86_64.zip\n- 按照上面的推导规则，得到sts插件的离线下载包地址为：\nhttps://download.springsource.com/release/TOOLS/update/3.9.4.RELEASE/e4.7/springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip\n4. 下载安装\n- 打开eclispe->Help->Install New Software->Add->Achieve->选择下载的压缩包->OK->选择带有IDE的4个进行安装（取消勾选下面的站点升级）\n\n### 安装lombok\n- [官网下载](https://www.projectlombok.org/)lombok.jar或者通过maven下载；\n- 双击jar，在出现的界面选择eclispe根目录中的eclispe.exe，再点击install/update即可;\n\n### uml插件\n- planUML安装\n\t1. 官网地址：http://plantuml.com/zh;\n\t2. Help->Install New Software->Add->添加地址(http://hallvard.github.io/plantuml )->全部安装即可;\n\t3. [下载Graphviz](https://www.graphviz.org/download/)并安装;\n\t4. Window->Preferences->PlantUML->配置dot.exe的路径;\n\t5. Window->Show View->PlanUML;\n- AmaterasUML安装\n\t1. Help->Install New Software->Add->添加地址(https://takezoe.github.io/amateras-update-site/)->全部安装即可;\n\n### eclipse手动安装插件\n1. 在eclipse根目录下建文件夹MyPlugins;\n2. 下载插件并解压得到包含features和plugins的文件夹XXX;\n3. 完成复制和建立文件夹的操作之后，如${eclipse_Home}\\MyPlugins\\XXX\\eclipse\\features和..\\plugins文件夹;\n4. 在eclipse_Home下建links文件夹,并建立一个p1_xxx.link文件,内容为`path=${eclipse_Home}/MyPlugins/xxx`\n\t- 注意:\n\t\t- 路径中是\"/\"或者\"\\\\\"  而不是\"\\\" ;\n\t\t- ${eclipse_Home}换成实际绝对地址：如D:\\\\eclipse\\\\MyPlugins\\\\quantum303;\n\t\t- link目录下的文件eclipse都要读入,小心！;\n\t\t- path下面应该有eclipse文件夹，而不是将path设置成eclipse文件夹;\n\t\t- 让path下面有plugins和features这两个目录;\n5.  删除${eclipse_Home}\\configuration中的org.eclipse.update目录;\n6.  重启eclipse,ok.  其实，myeclipse的插件安装就是如此操作的;\n\n### eclispe注释模板\n```\n文件(Files)注释标签：\n/**  \n* @Title: ${file_name}\n* @Package ${package_name}\n* @Description: ${todo}(用一句话描述该文件做什么)\n* @author A18ccms A18ccms_gmail_com  \n* @date ${date} ${time}\n* @version V1.0  \n*/\n\n类型(Types)注释标签（类的注释）：\n/**\n* @ClassName: ${type_name}\n* @Description: ${todo}(这里用一句话描述这个类的作用)\n* @author A18ccms a18ccms_gmail_com\n* @date ${date} ${time}\n*\n* ${tags}\n*/\n\n字段(Fields)注释标签：\n/**\n* @Fields ${field} : ${todo}(用一句话描述这个变量表示什么)\n*/\n\n构造函数标签：\n/**\n* <p>Title: </p>\n* <p>Description: </p>\n* ${tags}\n*/\n\n方法(Constructor & Methods)标签：\n/**\n* @Title: ${enclosing_method}\n* @Description: ${todo}(这里用一句话描述这个方法的作用)\n* @param ${tags}    设定文件\n* @return ${return_type}    返回类型\n* @throws\n*/\n\n覆盖方法(Overriding Methods)标签：\n/* (非 Javadoc)\n* <p>Title: ${enclosing_method}</p>\n* <p>Description: </p>\n* ${tags}\n* ${see_to_overridden}\n*/\n\n代表方法(Delegate Methods)标签：\n/**\n* ${tags}\n* ${see_to_target}\n*/\n\ngetter方法标签：\n/**\n* @return ${bare_field_name}\n*/\n\nsetter方法标签：\n/**\n* @param ${param} 要设置的 ${bare_field_name}\n*/\n```\n\n\n","slug":"Eclipse常用配置","published":1,"updated":"2019-08-28T19:47:56.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8orq0006agtn47axcbo2","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"Eclispe常用配置\"><a href=\"#Eclispe常用配置\" class=\"headerlink\" title=\"Eclispe常用配置\"></a>Eclispe常用配置</h3><ol>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;勾选”show heap status”;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Appearance-&gt;取消勾选”show most recently used tabs”;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Appearance-&gt;Colors and Fonts-&gt;Basic-&gt;Text Font-&gt;Edit-&gt;调整字体大小;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Content Types-&gt;Java Properties File-&gt;Default Encoding-&gt;修改为UTF-8-&gt;Update;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Editors-&gt;Text Editors-&gt;Background color-&gt;背景色调整为RGB(199,237,204);</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Editors-&gt;Text Editors-&gt;Spelling-&gt;取消勾选”enable spell checking”;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Project Natures-&gt;取消勾选”Automatically detect missing …”;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Sartup and Shutdown-&gt;仅保留git UI;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Workspace-&gt;Text file encoding-&gt;修改为UTF-8;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Install/Update-&gt;Automatic Updates-&gt;取消勾选”Automatically find new …”;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Code Style-&gt;Code Templates-&gt;Comments-&gt;Types-&gt;修改为<code>@author ${user}  &lt;mailto:jmzc_top@aliyun.com&gt;</code>;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Code Style-&gt;Code Templates-&gt;Code-&gt;去掉注释部分;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Code Style-&gt;Formatter-&gt;创建一个新的myself模板-&gt;然后去掉Comments选择卡中的JavaDoc和block comment格式化;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Editors-&gt;Content Assist-&gt;Auto activation triggers for java-&gt;修改为<code>abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ.</code>;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Editors-&gt;Content Assist-&gt;Advanced-&gt;取消勾选”Java Proposals(Code Recommenders)”;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Editors-&gt;Templates-&gt;可以修改预定义模板或者新建模板;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Installed JREs-&gt;修改JRE为安装的JDK;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;JavaScript-&gt;Code Style-&gt;Formatter-&gt;创建一个新的myself模板-&gt;然后去掉Comments选择卡中的JavaDoc和block comment格式化;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;JavaScript-&gt;Editors-&gt;Content Assist-&gt;Auto activation triggers for javascript-&gt;修改为<code>abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ.</code>;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Maven-&gt;Installings-&gt;添加外部的maven安装目录-&gt;进行勾选;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Maven-&gt;User Settings-&gt;User Settings选择外部settings文件路径;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Server-&gt;Runtime Environment-&gt;Add-&gt;添加外部tomcat;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Web-&gt;JSP Files-&gt;修改Encoding为UTF-8;</p>\n</li>\n</ol>\n<h3 id=\"sts插件-老版本地址推演\"><a href=\"#sts插件-老版本地址推演\" class=\"headerlink\" title=\"sts插件(老版本地址推演)\"></a>sts插件(老版本地址推演)</h3><ol>\n<li><p>在<a href=\"https://spring.io/tools3/sts/all\" target=\"_blank\" rel=\"noopener\">sts插件官网</a>找到eclipse4.9.0的下载地址,如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分解：</span><br><span class=\"line\">https://download.springsource.com/release/TOOLS/update (保留1)</span><br><span class=\"line\">/3.9.9.RELEASE/e4.9</span><br><span class=\"line\">/springsource-tool-suite (保留4)</span><br><span class=\"line\">-3.9.9.RELEASE-e4.9.0</span><br><span class=\"line\">-updatesite.zip (保留6)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<a href=\"https://spring.io/tools3/sts/legacy\" target=\"_blank\" rel=\"noopener\">STS官网</a>找到对应的Eclipse的版本的下载地址,如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分解：</span><br><span class=\"line\">https://download.springsource.com/release/STS</span><br><span class=\"line\">/3.9.6.RELEASE (保留2)</span><br><span class=\"line\">/dist</span><br><span class=\"line\">/e4.9 (保留3)</span><br><span class=\"line\">/spring-tool-suite</span><br><span class=\"line\">-3.9.6.RELEASE-e4.9.0 (保留5)</span><br><span class=\"line\">-win32-x86_64.zip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推算sts插件其他版本的地址，只需知道STS的下载地址，然后安装保留序号进行拼接即可；如需要下载eclispe4.7.3a的sts插件：</p>\n</li>\n</ol>\n<ul>\n<li>STS下载地址：<a href=\"https://download.springsource.com/release/STS/3.9.4.RELEASE/dist/e4.7/spring-tool-suite-3.9.4.RELEASE-e4.7.3a-win32-x86_64.zip\" target=\"_blank\" rel=\"noopener\">https://download.springsource.com/release/STS/3.9.4.RELEASE/dist/e4.7/spring-tool-suite-3.9.4.RELEASE-e4.7.3a-win32-x86_64.zip</a></li>\n<li>按照上面的推导规则，得到sts插件的离线下载包地址为：<br><a href=\"https://download.springsource.com/release/TOOLS/update/3.9.4.RELEASE/e4.7/springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip\" target=\"_blank\" rel=\"noopener\">https://download.springsource.com/release/TOOLS/update/3.9.4.RELEASE/e4.7/springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip</a></li>\n</ul>\n<ol start=\"4\">\n<li>下载安装</li>\n</ol>\n<ul>\n<li>打开eclispe-&gt;Help-&gt;Install New Software-&gt;Add-&gt;Achieve-&gt;选择下载的压缩包-&gt;OK-&gt;选择带有IDE的4个进行安装（取消勾选下面的站点升级）</li>\n</ul>\n<h3 id=\"安装lombok\"><a href=\"#安装lombok\" class=\"headerlink\" title=\"安装lombok\"></a>安装lombok</h3><ul>\n<li><a href=\"https://www.projectlombok.org/\" target=\"_blank\" rel=\"noopener\">官网下载</a>lombok.jar或者通过maven下载；</li>\n<li>双击jar，在出现的界面选择eclispe根目录中的eclispe.exe，再点击install/update即可;</li>\n</ul>\n<h3 id=\"uml插件\"><a href=\"#uml插件\" class=\"headerlink\" title=\"uml插件\"></a>uml插件</h3><ul>\n<li>planUML安装<ol>\n<li>官网地址：<a href=\"http://plantuml.com/zh\" target=\"_blank\" rel=\"noopener\">http://plantuml.com/zh</a>;</li>\n<li>Help-&gt;Install New Software-&gt;Add-&gt;添加地址(<a href=\"http://hallvard.github.io/plantuml\" target=\"_blank\" rel=\"noopener\">http://hallvard.github.io/plantuml</a> )-&gt;全部安装即可;</li>\n<li><a href=\"https://www.graphviz.org/download/\" target=\"_blank\" rel=\"noopener\">下载Graphviz</a>并安装;</li>\n<li>Window-&gt;Preferences-&gt;PlantUML-&gt;配置dot.exe的路径;</li>\n<li>Window-&gt;Show View-&gt;PlanUML;</li>\n</ol>\n</li>\n<li>AmaterasUML安装<ol>\n<li>Help-&gt;Install New Software-&gt;Add-&gt;添加地址(<a href=\"https://takezoe.github.io/amateras-update-site/)-&gt;全部安装即可\" target=\"_blank\" rel=\"noopener\">https://takezoe.github.io/amateras-update-site/)-&gt;全部安装即可</a>;</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"eclipse手动安装插件\"><a href=\"#eclipse手动安装插件\" class=\"headerlink\" title=\"eclipse手动安装插件\"></a>eclipse手动安装插件</h3><ol>\n<li>在eclipse根目录下建文件夹MyPlugins;</li>\n<li>下载插件并解压得到包含features和plugins的文件夹XXX;</li>\n<li>完成复制和建立文件夹的操作之后，如${eclipse_Home}\\MyPlugins\\XXX\\eclipse\\features和..\\plugins文件夹;</li>\n<li>在eclipse_Home下建links文件夹,并建立一个p1_xxx.link文件,内容为<code>path=${eclipse_Home}/MyPlugins/xxx</code><ul>\n<li>注意:<ul>\n<li>路径中是”/“或者”\\“  而不是”&quot; ;</li>\n<li>${eclipse_Home}换成实际绝对地址：如D:\\eclipse\\MyPlugins\\quantum303;</li>\n<li>link目录下的文件eclipse都要读入,小心！;</li>\n<li>path下面应该有eclipse文件夹，而不是将path设置成eclipse文件夹;</li>\n<li>让path下面有plugins和features这两个目录;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>删除${eclipse_Home}\\configuration中的org.eclipse.update目录;</li>\n<li>重启eclipse,ok.  其实，myeclipse的插件安装就是如此操作的;</li>\n</ol>\n<h3 id=\"eclispe注释模板\"><a href=\"#eclispe注释模板\" class=\"headerlink\" title=\"eclispe注释模板\"></a>eclispe注释模板</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件(Files)注释标签：</span><br><span class=\"line\">/**  </span><br><span class=\"line\">* @Title: $&#123;file_name&#125;</span><br><span class=\"line\">* @Package $&#123;package_name&#125;</span><br><span class=\"line\">* @Description: $&#123;todo&#125;(用一句话描述该文件做什么)</span><br><span class=\"line\">* @author A18ccms A18ccms_gmail_com  </span><br><span class=\"line\">* @date $&#123;date&#125; $&#123;time&#125;</span><br><span class=\"line\">* @version V1.0  </span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">类型(Types)注释标签（类的注释）：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* @ClassName: $&#123;type_name&#125;</span><br><span class=\"line\">* @Description: $&#123;todo&#125;(这里用一句话描述这个类的作用)</span><br><span class=\"line\">* @author A18ccms a18ccms_gmail_com</span><br><span class=\"line\">* @date $&#123;date&#125; $&#123;time&#125;</span><br><span class=\"line\">*</span><br><span class=\"line\">* $&#123;tags&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">字段(Fields)注释标签：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* @Fields $&#123;field&#125; : $&#123;todo&#125;(用一句话描述这个变量表示什么)</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">构造函数标签：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* &lt;p&gt;Title: &lt;/p&gt;</span><br><span class=\"line\">* &lt;p&gt;Description: &lt;/p&gt;</span><br><span class=\"line\">* $&#123;tags&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">方法(Constructor &amp; Methods)标签：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* @Title: $&#123;enclosing_method&#125;</span><br><span class=\"line\">* @Description: $&#123;todo&#125;(这里用一句话描述这个方法的作用)</span><br><span class=\"line\">* @param $&#123;tags&#125;    设定文件</span><br><span class=\"line\">* @return $&#123;return_type&#125;    返回类型</span><br><span class=\"line\">* @throws</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">覆盖方法(Overriding Methods)标签：</span><br><span class=\"line\">/* (非 Javadoc)</span><br><span class=\"line\">* &lt;p&gt;Title: $&#123;enclosing_method&#125;&lt;/p&gt;</span><br><span class=\"line\">* &lt;p&gt;Description: &lt;/p&gt;</span><br><span class=\"line\">* $&#123;tags&#125;</span><br><span class=\"line\">* $&#123;see_to_overridden&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">代表方法(Delegate Methods)标签：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* $&#123;tags&#125;</span><br><span class=\"line\">* $&#123;see_to_target&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">getter方法标签：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* @return $&#123;bare_field_name&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">setter方法标签：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* @param $&#123;param&#125; 要设置的 $&#123;bare_field_name&#125;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Eclispe常用配置\"><a href=\"#Eclispe常用配置\" class=\"headerlink\" title=\"Eclispe常用配置\"></a>Eclispe常用配置</h3><ol>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;勾选”show heap status”;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Appearance-&gt;取消勾选”show most recently used tabs”;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Appearance-&gt;Colors and Fonts-&gt;Basic-&gt;Text Font-&gt;Edit-&gt;调整字体大小;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Content Types-&gt;Java Properties File-&gt;Default Encoding-&gt;修改为UTF-8-&gt;Update;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Editors-&gt;Text Editors-&gt;Background color-&gt;背景色调整为RGB(199,237,204);</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Editors-&gt;Text Editors-&gt;Spelling-&gt;取消勾选”enable spell checking”;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Project Natures-&gt;取消勾选”Automatically detect missing …”;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Sartup and Shutdown-&gt;仅保留git UI;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;General-&gt;Workspace-&gt;Text file encoding-&gt;修改为UTF-8;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Install/Update-&gt;Automatic Updates-&gt;取消勾选”Automatically find new …”;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Code Style-&gt;Code Templates-&gt;Comments-&gt;Types-&gt;修改为<code>@author ${user}  &lt;mailto:jmzc_top@aliyun.com&gt;</code>;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Code Style-&gt;Code Templates-&gt;Code-&gt;去掉注释部分;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Code Style-&gt;Formatter-&gt;创建一个新的myself模板-&gt;然后去掉Comments选择卡中的JavaDoc和block comment格式化;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Editors-&gt;Content Assist-&gt;Auto activation triggers for java-&gt;修改为<code>abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ.</code>;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Editors-&gt;Content Assist-&gt;Advanced-&gt;取消勾选”Java Proposals(Code Recommenders)”;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Editors-&gt;Templates-&gt;可以修改预定义模板或者新建模板;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Java-&gt;Installed JREs-&gt;修改JRE为安装的JDK;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;JavaScript-&gt;Code Style-&gt;Formatter-&gt;创建一个新的myself模板-&gt;然后去掉Comments选择卡中的JavaDoc和block comment格式化;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;JavaScript-&gt;Editors-&gt;Content Assist-&gt;Auto activation triggers for javascript-&gt;修改为<code>abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ.</code>;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Maven-&gt;Installings-&gt;添加外部的maven安装目录-&gt;进行勾选;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Maven-&gt;User Settings-&gt;User Settings选择外部settings文件路径;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Server-&gt;Runtime Environment-&gt;Add-&gt;添加外部tomcat;</p>\n</li>\n<li><p>Window-&gt;Preferences-&gt;Web-&gt;JSP Files-&gt;修改Encoding为UTF-8;</p>\n</li>\n</ol>\n<h3 id=\"sts插件-老版本地址推演\"><a href=\"#sts插件-老版本地址推演\" class=\"headerlink\" title=\"sts插件(老版本地址推演)\"></a>sts插件(老版本地址推演)</h3><ol>\n<li><p>在<a href=\"https://spring.io/tools3/sts/all\" target=\"_blank\" rel=\"noopener\">sts插件官网</a>找到eclipse4.9.0的下载地址,如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分解：</span><br><span class=\"line\">https://download.springsource.com/release/TOOLS/update (保留1)</span><br><span class=\"line\">/3.9.9.RELEASE/e4.9</span><br><span class=\"line\">/springsource-tool-suite (保留4)</span><br><span class=\"line\">-3.9.9.RELEASE-e4.9.0</span><br><span class=\"line\">-updatesite.zip (保留6)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<a href=\"https://spring.io/tools3/sts/legacy\" target=\"_blank\" rel=\"noopener\">STS官网</a>找到对应的Eclipse的版本的下载地址,如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分解：</span><br><span class=\"line\">https://download.springsource.com/release/STS</span><br><span class=\"line\">/3.9.6.RELEASE (保留2)</span><br><span class=\"line\">/dist</span><br><span class=\"line\">/e4.9 (保留3)</span><br><span class=\"line\">/spring-tool-suite</span><br><span class=\"line\">-3.9.6.RELEASE-e4.9.0 (保留5)</span><br><span class=\"line\">-win32-x86_64.zip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推算sts插件其他版本的地址，只需知道STS的下载地址，然后安装保留序号进行拼接即可；如需要下载eclispe4.7.3a的sts插件：</p>\n</li>\n</ol>\n<ul>\n<li>STS下载地址：<a href=\"https://download.springsource.com/release/STS/3.9.4.RELEASE/dist/e4.7/spring-tool-suite-3.9.4.RELEASE-e4.7.3a-win32-x86_64.zip\" target=\"_blank\" rel=\"noopener\">https://download.springsource.com/release/STS/3.9.4.RELEASE/dist/e4.7/spring-tool-suite-3.9.4.RELEASE-e4.7.3a-win32-x86_64.zip</a></li>\n<li>按照上面的推导规则，得到sts插件的离线下载包地址为：<br><a href=\"https://download.springsource.com/release/TOOLS/update/3.9.4.RELEASE/e4.7/springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip\" target=\"_blank\" rel=\"noopener\">https://download.springsource.com/release/TOOLS/update/3.9.4.RELEASE/e4.7/springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip</a></li>\n</ul>\n<ol start=\"4\">\n<li>下载安装</li>\n</ol>\n<ul>\n<li>打开eclispe-&gt;Help-&gt;Install New Software-&gt;Add-&gt;Achieve-&gt;选择下载的压缩包-&gt;OK-&gt;选择带有IDE的4个进行安装（取消勾选下面的站点升级）</li>\n</ul>\n<h3 id=\"安装lombok\"><a href=\"#安装lombok\" class=\"headerlink\" title=\"安装lombok\"></a>安装lombok</h3><ul>\n<li><a href=\"https://www.projectlombok.org/\" target=\"_blank\" rel=\"noopener\">官网下载</a>lombok.jar或者通过maven下载；</li>\n<li>双击jar，在出现的界面选择eclispe根目录中的eclispe.exe，再点击install/update即可;</li>\n</ul>\n<h3 id=\"uml插件\"><a href=\"#uml插件\" class=\"headerlink\" title=\"uml插件\"></a>uml插件</h3><ul>\n<li>planUML安装<ol>\n<li>官网地址：<a href=\"http://plantuml.com/zh\" target=\"_blank\" rel=\"noopener\">http://plantuml.com/zh</a>;</li>\n<li>Help-&gt;Install New Software-&gt;Add-&gt;添加地址(<a href=\"http://hallvard.github.io/plantuml\" target=\"_blank\" rel=\"noopener\">http://hallvard.github.io/plantuml</a> )-&gt;全部安装即可;</li>\n<li><a href=\"https://www.graphviz.org/download/\" target=\"_blank\" rel=\"noopener\">下载Graphviz</a>并安装;</li>\n<li>Window-&gt;Preferences-&gt;PlantUML-&gt;配置dot.exe的路径;</li>\n<li>Window-&gt;Show View-&gt;PlanUML;</li>\n</ol>\n</li>\n<li>AmaterasUML安装<ol>\n<li>Help-&gt;Install New Software-&gt;Add-&gt;添加地址(<a href=\"https://takezoe.github.io/amateras-update-site/)-&gt;全部安装即可\" target=\"_blank\" rel=\"noopener\">https://takezoe.github.io/amateras-update-site/)-&gt;全部安装即可</a>;</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"eclipse手动安装插件\"><a href=\"#eclipse手动安装插件\" class=\"headerlink\" title=\"eclipse手动安装插件\"></a>eclipse手动安装插件</h3><ol>\n<li>在eclipse根目录下建文件夹MyPlugins;</li>\n<li>下载插件并解压得到包含features和plugins的文件夹XXX;</li>\n<li>完成复制和建立文件夹的操作之后，如${eclipse_Home}\\MyPlugins\\XXX\\eclipse\\features和..\\plugins文件夹;</li>\n<li>在eclipse_Home下建links文件夹,并建立一个p1_xxx.link文件,内容为<code>path=${eclipse_Home}/MyPlugins/xxx</code><ul>\n<li>注意:<ul>\n<li>路径中是”/“或者”\\“  而不是”&quot; ;</li>\n<li>${eclipse_Home}换成实际绝对地址：如D:\\eclipse\\MyPlugins\\quantum303;</li>\n<li>link目录下的文件eclipse都要读入,小心！;</li>\n<li>path下面应该有eclipse文件夹，而不是将path设置成eclipse文件夹;</li>\n<li>让path下面有plugins和features这两个目录;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>删除${eclipse_Home}\\configuration中的org.eclipse.update目录;</li>\n<li>重启eclipse,ok.  其实，myeclipse的插件安装就是如此操作的;</li>\n</ol>\n<h3 id=\"eclispe注释模板\"><a href=\"#eclispe注释模板\" class=\"headerlink\" title=\"eclispe注释模板\"></a>eclispe注释模板</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件(Files)注释标签：</span><br><span class=\"line\">/**  </span><br><span class=\"line\">* @Title: $&#123;file_name&#125;</span><br><span class=\"line\">* @Package $&#123;package_name&#125;</span><br><span class=\"line\">* @Description: $&#123;todo&#125;(用一句话描述该文件做什么)</span><br><span class=\"line\">* @author A18ccms A18ccms_gmail_com  </span><br><span class=\"line\">* @date $&#123;date&#125; $&#123;time&#125;</span><br><span class=\"line\">* @version V1.0  </span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">类型(Types)注释标签（类的注释）：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* @ClassName: $&#123;type_name&#125;</span><br><span class=\"line\">* @Description: $&#123;todo&#125;(这里用一句话描述这个类的作用)</span><br><span class=\"line\">* @author A18ccms a18ccms_gmail_com</span><br><span class=\"line\">* @date $&#123;date&#125; $&#123;time&#125;</span><br><span class=\"line\">*</span><br><span class=\"line\">* $&#123;tags&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">字段(Fields)注释标签：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* @Fields $&#123;field&#125; : $&#123;todo&#125;(用一句话描述这个变量表示什么)</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">构造函数标签：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* &lt;p&gt;Title: &lt;/p&gt;</span><br><span class=\"line\">* &lt;p&gt;Description: &lt;/p&gt;</span><br><span class=\"line\">* $&#123;tags&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">方法(Constructor &amp; Methods)标签：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* @Title: $&#123;enclosing_method&#125;</span><br><span class=\"line\">* @Description: $&#123;todo&#125;(这里用一句话描述这个方法的作用)</span><br><span class=\"line\">* @param $&#123;tags&#125;    设定文件</span><br><span class=\"line\">* @return $&#123;return_type&#125;    返回类型</span><br><span class=\"line\">* @throws</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">覆盖方法(Overriding Methods)标签：</span><br><span class=\"line\">/* (非 Javadoc)</span><br><span class=\"line\">* &lt;p&gt;Title: $&#123;enclosing_method&#125;&lt;/p&gt;</span><br><span class=\"line\">* &lt;p&gt;Description: &lt;/p&gt;</span><br><span class=\"line\">* $&#123;tags&#125;</span><br><span class=\"line\">* $&#123;see_to_overridden&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">代表方法(Delegate Methods)标签：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* $&#123;tags&#125;</span><br><span class=\"line\">* $&#123;see_to_target&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">getter方法标签：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* @return $&#123;bare_field_name&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">setter方法标签：</span><br><span class=\"line\">/**</span><br><span class=\"line\">* @param $&#123;param&#125; 要设置的 $&#123;bare_field_name&#125;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Git入门","date":"2019-08-28T09:03:45.000Z","_content":"### what is\n- git 是一个免费开源的分布式版本控制工具；\n- [书籍-Pro Git](https://git-scm.com/book/en/v2)：有关git的一切可阅读此书获取；\n\n### why use it\n- 既可以进行本地版本控制，又可以进行分布式版本控制；\n- 不存在集中式版本控制工具的单点故障问题；\n- 具有强大的分支管理；\n- 由于是Linus开发，天然可以使用Linux命令；\n\n### Git分支\n- 假设有三个目录，并做了提交;\n  ```\n  $ git add README test.rb LICENSE\n  $ git commit -m 'The initial commit of my project'\n  ```\n- Git会对每个子目录进行校验，并将它们作为树对象存储在Git存储库中;然后Git创建一个提交对象，该对象具有元数据和指向根项目树的指针，因此它可以在需要时重新创建该快照。\n- ![A commit and its tree](https://git-scm.com/book/en/v2/images/commit-and-tree.png );\n- 如果进行一些更改并再次提交，则下一个提交会存储指向紧接其之前的提交的指针。\n- ![Commits and their parents](https://git-scm.com/book/en/v2/images/commits-and-parents.png)；\n- Git中的一个分支只是一个指向其中一个提交的轻量级可移动指针。Git中的默认分支名称是master。当你开始提交时，你会得到一个master指向你最后一次提交的分支。每次提交时，master分支指针都会自动向前移动。\n- ![A branch and its commit history](https://git-scm.com/book/en/v2/images/branch-and-history.png);\n- Git中的“主”分支不是特殊分支。它与任何其他分支完全一样。几乎每个存储库都有一个的唯一原因是该git init命令默认创建它，并且大多数人都不愿意更改它。\n\n### how to use it\n- 安装\n\n  1. [Linux说明](https://git-scm.com/download/linux);   \n  2. [macOS下载地址](https://git-scm.com/download/mac);   \n  3. [Windows下载地址]( https://git-scm.com/download/win);             \n- 首次配置\n  ```\n  # 安装Git时应该做的第一件事是设置用户名和电子邮件地址\n  # --system：指定系统级别，--global：指定用户级别\n  $ git config --global user.name \"John Doe\"\n  $ git config --global user.email johndoe@example.com\n\n  # 使用以下方法查看所有设置及其来源\n  $ git config --list --show-origin\n  ```\n- 获取帮助\n  ```\n  $ git help <verb>\n  $ git <verb> --help\n  $ man git-<verb>\n\n  # 如果您不需要完整的联机帮助页面帮助，但只需要快速了解Git命令的可用选项，您可以使用-h或--help,如：\n  $ git add -h\n   ```\n- 常用命令\n  1. `$ git init`：在现有目录中初始化存储库；\n  1. `$ git add xxx`：将xxx文件从工作区添加到暂存区；untrace-stage；\n  1. `$ git commit -m 'initial project version'`：从暂存区永久提交到当前分支；stage-unmodified；\n  1. `$ git clone https://github.com/libgit2/libgit2 mylibgit`：克隆存储库到本地并修改存储库的目录名；\n  1. `$ git status`：查看文件状态，主要查看文件内容是否发生了变化；\n  1. `$ git diff`：查看工作区与暂存区的更改；\n  1. `$ git diff --cached`：查看暂存区与上次提交的更改；\n  1. `$ git log  [--pretty=oneline]`：查看提交历史，用于回退过去；\n  1. `$ git reflog`：查看命令历史，用于追溯未来；\n  1. `$ git reset --hard commitID`：切换版本；\n  1. `$ git rm --cached README`：删除暂存区文件；\n  1. `$ git checkout xxx`：同步到工作区；\n  1. `$ git commit --amend`：重做提交；\n  1. `$ git remote -v`：查看远程时要使用的短名称存储的URL；\n  1. `$ git remote add <shortname> <url>`：为远程库添加一个新的短名称；\n  1. `$ git fetch <remote>`：从远处库抓取数据；\n  1. `$ git push <remote> <branch>`：推送当前分支到远程库\n  1. `$ git remote rename pb paul`：更改远程库别名pb为paul；\n  1. `$ git remote remove paul`：删除一个远程库url；\n  1. `$ git push <remote>`：抓取并合并到本地；\n  1. `$ git branch testing`：创建一个testing分支；\n  1. `$ git checkout testing`:切换分支；\n  1. `$ git merge hotfix`：合并hotfix分支到当前分支上；\n  1. `$ git branch -d hotfix`：删除分支；\n  1. `$ git branch -v`：查看每个分支上的最后一次提交；\n  1. `$ git branch --merged`：查看已经合并了的分支，不带星号的分支可以删除；\n  1. `$ git push <remote> <branch>`：将本地分支推送到一个名称不同的远程分支；\n  1. `$ git checkout -b sf origin/serverfix`：设置名称与远程分支不同的本地分支；\n  1. `git branch -u origin/serverfix`：更新当前分支为远程分支；\n  1. `$ git push origin --delete serverfix`：完成合并删除远程分支；\n\n### 参考文献\n- [书籍-Pro Git](https://git-scm.com/book/en/v2);\n- [博客园-Git命令总结](https://www.cnblogs.com/chris0710/p/8925977.html);\n- [廖雪峰-Git教程](https://www.liaoxuefeng.com/wiki/896043488029600);\n\n","source":"_posts/Git入门.md","raw":"---\ntitle: Git入门\ndate: 2019-08-28 17:03:45\ntags: git\ncategories: 学习笔记\n---\n### what is\n- git 是一个免费开源的分布式版本控制工具；\n- [书籍-Pro Git](https://git-scm.com/book/en/v2)：有关git的一切可阅读此书获取；\n\n### why use it\n- 既可以进行本地版本控制，又可以进行分布式版本控制；\n- 不存在集中式版本控制工具的单点故障问题；\n- 具有强大的分支管理；\n- 由于是Linus开发，天然可以使用Linux命令；\n\n### Git分支\n- 假设有三个目录，并做了提交;\n  ```\n  $ git add README test.rb LICENSE\n  $ git commit -m 'The initial commit of my project'\n  ```\n- Git会对每个子目录进行校验，并将它们作为树对象存储在Git存储库中;然后Git创建一个提交对象，该对象具有元数据和指向根项目树的指针，因此它可以在需要时重新创建该快照。\n- ![A commit and its tree](https://git-scm.com/book/en/v2/images/commit-and-tree.png );\n- 如果进行一些更改并再次提交，则下一个提交会存储指向紧接其之前的提交的指针。\n- ![Commits and their parents](https://git-scm.com/book/en/v2/images/commits-and-parents.png)；\n- Git中的一个分支只是一个指向其中一个提交的轻量级可移动指针。Git中的默认分支名称是master。当你开始提交时，你会得到一个master指向你最后一次提交的分支。每次提交时，master分支指针都会自动向前移动。\n- ![A branch and its commit history](https://git-scm.com/book/en/v2/images/branch-and-history.png);\n- Git中的“主”分支不是特殊分支。它与任何其他分支完全一样。几乎每个存储库都有一个的唯一原因是该git init命令默认创建它，并且大多数人都不愿意更改它。\n\n### how to use it\n- 安装\n\n  1. [Linux说明](https://git-scm.com/download/linux);   \n  2. [macOS下载地址](https://git-scm.com/download/mac);   \n  3. [Windows下载地址]( https://git-scm.com/download/win);             \n- 首次配置\n  ```\n  # 安装Git时应该做的第一件事是设置用户名和电子邮件地址\n  # --system：指定系统级别，--global：指定用户级别\n  $ git config --global user.name \"John Doe\"\n  $ git config --global user.email johndoe@example.com\n\n  # 使用以下方法查看所有设置及其来源\n  $ git config --list --show-origin\n  ```\n- 获取帮助\n  ```\n  $ git help <verb>\n  $ git <verb> --help\n  $ man git-<verb>\n\n  # 如果您不需要完整的联机帮助页面帮助，但只需要快速了解Git命令的可用选项，您可以使用-h或--help,如：\n  $ git add -h\n   ```\n- 常用命令\n  1. `$ git init`：在现有目录中初始化存储库；\n  1. `$ git add xxx`：将xxx文件从工作区添加到暂存区；untrace-stage；\n  1. `$ git commit -m 'initial project version'`：从暂存区永久提交到当前分支；stage-unmodified；\n  1. `$ git clone https://github.com/libgit2/libgit2 mylibgit`：克隆存储库到本地并修改存储库的目录名；\n  1. `$ git status`：查看文件状态，主要查看文件内容是否发生了变化；\n  1. `$ git diff`：查看工作区与暂存区的更改；\n  1. `$ git diff --cached`：查看暂存区与上次提交的更改；\n  1. `$ git log  [--pretty=oneline]`：查看提交历史，用于回退过去；\n  1. `$ git reflog`：查看命令历史，用于追溯未来；\n  1. `$ git reset --hard commitID`：切换版本；\n  1. `$ git rm --cached README`：删除暂存区文件；\n  1. `$ git checkout xxx`：同步到工作区；\n  1. `$ git commit --amend`：重做提交；\n  1. `$ git remote -v`：查看远程时要使用的短名称存储的URL；\n  1. `$ git remote add <shortname> <url>`：为远程库添加一个新的短名称；\n  1. `$ git fetch <remote>`：从远处库抓取数据；\n  1. `$ git push <remote> <branch>`：推送当前分支到远程库\n  1. `$ git remote rename pb paul`：更改远程库别名pb为paul；\n  1. `$ git remote remove paul`：删除一个远程库url；\n  1. `$ git push <remote>`：抓取并合并到本地；\n  1. `$ git branch testing`：创建一个testing分支；\n  1. `$ git checkout testing`:切换分支；\n  1. `$ git merge hotfix`：合并hotfix分支到当前分支上；\n  1. `$ git branch -d hotfix`：删除分支；\n  1. `$ git branch -v`：查看每个分支上的最后一次提交；\n  1. `$ git branch --merged`：查看已经合并了的分支，不带星号的分支可以删除；\n  1. `$ git push <remote> <branch>`：将本地分支推送到一个名称不同的远程分支；\n  1. `$ git checkout -b sf origin/serverfix`：设置名称与远程分支不同的本地分支；\n  1. `git branch -u origin/serverfix`：更新当前分支为远程分支；\n  1. `$ git push origin --delete serverfix`：完成合并删除远程分支；\n\n### 参考文献\n- [书籍-Pro Git](https://git-scm.com/book/en/v2);\n- [博客园-Git命令总结](https://www.cnblogs.com/chris0710/p/8925977.html);\n- [廖雪峰-Git教程](https://www.liaoxuefeng.com/wiki/896043488029600);\n\n","slug":"Git入门","published":1,"updated":"2019-08-28T09:04:20.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8ors0007agtng0lxby31","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>git 是一个免费开源的分布式版本控制工具；</li>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">书籍-Pro Git</a>：有关git的一切可阅读此书获取；</li>\n</ul>\n<h3 id=\"why-use-it\"><a href=\"#why-use-it\" class=\"headerlink\" title=\"why use it\"></a>why use it</h3><ul>\n<li>既可以进行本地版本控制，又可以进行分布式版本控制；</li>\n<li>不存在集中式版本控制工具的单点故障问题；</li>\n<li>具有强大的分支管理；</li>\n<li>由于是Linus开发，天然可以使用Linux命令；</li>\n</ul>\n<h3 id=\"Git分支\"><a href=\"#Git分支\" class=\"headerlink\" title=\"Git分支\"></a>Git分支</h3><ul>\n<li><p>假设有三个目录，并做了提交;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add README test.rb LICENSE</span><br><span class=\"line\">$ git commit -m &apos;The initial commit of my project&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Git会对每个子目录进行校验，并将它们作为树对象存储在Git存储库中;然后Git创建一个提交对象，该对象具有元数据和指向根项目树的指针，因此它可以在需要时重新创建该快照。</p>\n</li>\n<li><p><img src=\"https://git-scm.com/book/en/v2/images/commit-and-tree.png\" alt=\"A commit and its tree\">;</p>\n</li>\n<li><p>如果进行一些更改并再次提交，则下一个提交会存储指向紧接其之前的提交的指针。</p>\n</li>\n<li><p><img src=\"https://git-scm.com/book/en/v2/images/commits-and-parents.png\" alt=\"Commits and their parents\">；</p>\n</li>\n<li><p>Git中的一个分支只是一个指向其中一个提交的轻量级可移动指针。Git中的默认分支名称是master。当你开始提交时，你会得到一个master指向你最后一次提交的分支。每次提交时，master分支指针都会自动向前移动。</p>\n</li>\n<li><p><img src=\"https://git-scm.com/book/en/v2/images/branch-and-history.png\" alt=\"A branch and its commit history\">;</p>\n</li>\n<li><p>Git中的“主”分支不是特殊分支。它与任何其他分支完全一样。几乎每个存储库都有一个的唯一原因是该git init命令默认创建它，并且大多数人都不愿意更改它。</p>\n</li>\n</ul>\n<h3 id=\"how-to-use-it\"><a href=\"#how-to-use-it\" class=\"headerlink\" title=\"how to use it\"></a>how to use it</h3><ul>\n<li><p>安装</p>\n<ol>\n<li><a href=\"https://git-scm.com/download/linux\" target=\"_blank\" rel=\"noopener\">Linux说明</a>;   </li>\n<li><a href=\"https://git-scm.com/download/mac\" target=\"_blank\" rel=\"noopener\">macOS下载地址</a>;   </li>\n<li><a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">Windows下载地址</a>;             </li>\n</ol>\n</li>\n<li><p>首次配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装Git时应该做的第一件事是设置用户名和电子邮件地址</span><br><span class=\"line\"># --system：指定系统级别，--global：指定用户级别</span><br><span class=\"line\">$ git config --global user.name &quot;John Doe&quot;</span><br><span class=\"line\">$ git config --global user.email johndoe@example.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用以下方法查看所有设置及其来源</span><br><span class=\"line\">$ git config --list --show-origin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取帮助</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git help &lt;verb&gt;</span><br><span class=\"line\">$ git &lt;verb&gt; --help</span><br><span class=\"line\">$ man git-&lt;verb&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果您不需要完整的联机帮助页面帮助，但只需要快速了解Git命令的可用选项，您可以使用-h或--help,如：</span><br><span class=\"line\">$ git add -h</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常用命令</p>\n<ol>\n<li><code>$ git init</code>：在现有目录中初始化存储库；</li>\n<li><code>$ git add xxx</code>：将xxx文件从工作区添加到暂存区；untrace-stage；</li>\n<li><code>$ git commit -m &#39;initial project version&#39;</code>：从暂存区永久提交到当前分支；stage-unmodified；</li>\n<li><code>$ git clone https://github.com/libgit2/libgit2 mylibgit</code>：克隆存储库到本地并修改存储库的目录名；</li>\n<li><code>$ git status</code>：查看文件状态，主要查看文件内容是否发生了变化；</li>\n<li><code>$ git diff</code>：查看工作区与暂存区的更改；</li>\n<li><code>$ git diff --cached</code>：查看暂存区与上次提交的更改；</li>\n<li><code>$ git log  [--pretty=oneline]</code>：查看提交历史，用于回退过去；</li>\n<li><code>$ git reflog</code>：查看命令历史，用于追溯未来；</li>\n<li><code>$ git reset --hard commitID</code>：切换版本；</li>\n<li><code>$ git rm --cached README</code>：删除暂存区文件；</li>\n<li><code>$ git checkout xxx</code>：同步到工作区；</li>\n<li><code>$ git commit --amend</code>：重做提交；</li>\n<li><code>$ git remote -v</code>：查看远程时要使用的短名称存储的URL；</li>\n<li><code>$ git remote add &lt;shortname&gt; &lt;url&gt;</code>：为远程库添加一个新的短名称；</li>\n<li><code>$ git fetch &lt;remote&gt;</code>：从远处库抓取数据；</li>\n<li><code>$ git push &lt;remote&gt; &lt;branch&gt;</code>：推送当前分支到远程库</li>\n<li><code>$ git remote rename pb paul</code>：更改远程库别名pb为paul；</li>\n<li><code>$ git remote remove paul</code>：删除一个远程库url；</li>\n<li><code>$ git push &lt;remote&gt;</code>：抓取并合并到本地；</li>\n<li><code>$ git branch testing</code>：创建一个testing分支；</li>\n<li><code>$ git checkout testing</code>:切换分支；</li>\n<li><code>$ git merge hotfix</code>：合并hotfix分支到当前分支上；</li>\n<li><code>$ git branch -d hotfix</code>：删除分支；</li>\n<li><code>$ git branch -v</code>：查看每个分支上的最后一次提交；</li>\n<li><code>$ git branch --merged</code>：查看已经合并了的分支，不带星号的分支可以删除；</li>\n<li><code>$ git push &lt;remote&gt; &lt;branch&gt;</code>：将本地分支推送到一个名称不同的远程分支；</li>\n<li><code>$ git checkout -b sf origin/serverfix</code>：设置名称与远程分支不同的本地分支；</li>\n<li><code>git branch -u origin/serverfix</code>：更新当前分支为远程分支；</li>\n<li><code>$ git push origin --delete serverfix</code>：完成合并删除远程分支；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ul>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">书籍-Pro Git</a>;</li>\n<li><a href=\"https://www.cnblogs.com/chris0710/p/8925977.html\" target=\"_blank\" rel=\"noopener\">博客园-Git命令总结</a>;</li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰-Git教程</a>;</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>git 是一个免费开源的分布式版本控制工具；</li>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">书籍-Pro Git</a>：有关git的一切可阅读此书获取；</li>\n</ul>\n<h3 id=\"why-use-it\"><a href=\"#why-use-it\" class=\"headerlink\" title=\"why use it\"></a>why use it</h3><ul>\n<li>既可以进行本地版本控制，又可以进行分布式版本控制；</li>\n<li>不存在集中式版本控制工具的单点故障问题；</li>\n<li>具有强大的分支管理；</li>\n<li>由于是Linus开发，天然可以使用Linux命令；</li>\n</ul>\n<h3 id=\"Git分支\"><a href=\"#Git分支\" class=\"headerlink\" title=\"Git分支\"></a>Git分支</h3><ul>\n<li><p>假设有三个目录，并做了提交;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add README test.rb LICENSE</span><br><span class=\"line\">$ git commit -m &apos;The initial commit of my project&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Git会对每个子目录进行校验，并将它们作为树对象存储在Git存储库中;然后Git创建一个提交对象，该对象具有元数据和指向根项目树的指针，因此它可以在需要时重新创建该快照。</p>\n</li>\n<li><p><img src=\"https://git-scm.com/book/en/v2/images/commit-and-tree.png\" alt=\"A commit and its tree\">;</p>\n</li>\n<li><p>如果进行一些更改并再次提交，则下一个提交会存储指向紧接其之前的提交的指针。</p>\n</li>\n<li><p><img src=\"https://git-scm.com/book/en/v2/images/commits-and-parents.png\" alt=\"Commits and their parents\">；</p>\n</li>\n<li><p>Git中的一个分支只是一个指向其中一个提交的轻量级可移动指针。Git中的默认分支名称是master。当你开始提交时，你会得到一个master指向你最后一次提交的分支。每次提交时，master分支指针都会自动向前移动。</p>\n</li>\n<li><p><img src=\"https://git-scm.com/book/en/v2/images/branch-and-history.png\" alt=\"A branch and its commit history\">;</p>\n</li>\n<li><p>Git中的“主”分支不是特殊分支。它与任何其他分支完全一样。几乎每个存储库都有一个的唯一原因是该git init命令默认创建它，并且大多数人都不愿意更改它。</p>\n</li>\n</ul>\n<h3 id=\"how-to-use-it\"><a href=\"#how-to-use-it\" class=\"headerlink\" title=\"how to use it\"></a>how to use it</h3><ul>\n<li><p>安装</p>\n<ol>\n<li><a href=\"https://git-scm.com/download/linux\" target=\"_blank\" rel=\"noopener\">Linux说明</a>;   </li>\n<li><a href=\"https://git-scm.com/download/mac\" target=\"_blank\" rel=\"noopener\">macOS下载地址</a>;   </li>\n<li><a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">Windows下载地址</a>;             </li>\n</ol>\n</li>\n<li><p>首次配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装Git时应该做的第一件事是设置用户名和电子邮件地址</span><br><span class=\"line\"># --system：指定系统级别，--global：指定用户级别</span><br><span class=\"line\">$ git config --global user.name &quot;John Doe&quot;</span><br><span class=\"line\">$ git config --global user.email johndoe@example.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用以下方法查看所有设置及其来源</span><br><span class=\"line\">$ git config --list --show-origin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取帮助</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git help &lt;verb&gt;</span><br><span class=\"line\">$ git &lt;verb&gt; --help</span><br><span class=\"line\">$ man git-&lt;verb&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果您不需要完整的联机帮助页面帮助，但只需要快速了解Git命令的可用选项，您可以使用-h或--help,如：</span><br><span class=\"line\">$ git add -h</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常用命令</p>\n<ol>\n<li><code>$ git init</code>：在现有目录中初始化存储库；</li>\n<li><code>$ git add xxx</code>：将xxx文件从工作区添加到暂存区；untrace-stage；</li>\n<li><code>$ git commit -m &#39;initial project version&#39;</code>：从暂存区永久提交到当前分支；stage-unmodified；</li>\n<li><code>$ git clone https://github.com/libgit2/libgit2 mylibgit</code>：克隆存储库到本地并修改存储库的目录名；</li>\n<li><code>$ git status</code>：查看文件状态，主要查看文件内容是否发生了变化；</li>\n<li><code>$ git diff</code>：查看工作区与暂存区的更改；</li>\n<li><code>$ git diff --cached</code>：查看暂存区与上次提交的更改；</li>\n<li><code>$ git log  [--pretty=oneline]</code>：查看提交历史，用于回退过去；</li>\n<li><code>$ git reflog</code>：查看命令历史，用于追溯未来；</li>\n<li><code>$ git reset --hard commitID</code>：切换版本；</li>\n<li><code>$ git rm --cached README</code>：删除暂存区文件；</li>\n<li><code>$ git checkout xxx</code>：同步到工作区；</li>\n<li><code>$ git commit --amend</code>：重做提交；</li>\n<li><code>$ git remote -v</code>：查看远程时要使用的短名称存储的URL；</li>\n<li><code>$ git remote add &lt;shortname&gt; &lt;url&gt;</code>：为远程库添加一个新的短名称；</li>\n<li><code>$ git fetch &lt;remote&gt;</code>：从远处库抓取数据；</li>\n<li><code>$ git push &lt;remote&gt; &lt;branch&gt;</code>：推送当前分支到远程库</li>\n<li><code>$ git remote rename pb paul</code>：更改远程库别名pb为paul；</li>\n<li><code>$ git remote remove paul</code>：删除一个远程库url；</li>\n<li><code>$ git push &lt;remote&gt;</code>：抓取并合并到本地；</li>\n<li><code>$ git branch testing</code>：创建一个testing分支；</li>\n<li><code>$ git checkout testing</code>:切换分支；</li>\n<li><code>$ git merge hotfix</code>：合并hotfix分支到当前分支上；</li>\n<li><code>$ git branch -d hotfix</code>：删除分支；</li>\n<li><code>$ git branch -v</code>：查看每个分支上的最后一次提交；</li>\n<li><code>$ git branch --merged</code>：查看已经合并了的分支，不带星号的分支可以删除；</li>\n<li><code>$ git push &lt;remote&gt; &lt;branch&gt;</code>：将本地分支推送到一个名称不同的远程分支；</li>\n<li><code>$ git checkout -b sf origin/serverfix</code>：设置名称与远程分支不同的本地分支；</li>\n<li><code>git branch -u origin/serverfix</code>：更新当前分支为远程分支；</li>\n<li><code>$ git push origin --delete serverfix</code>：完成合并删除远程分支；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ul>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">书籍-Pro Git</a>;</li>\n<li><a href=\"https://www.cnblogs.com/chris0710/p/8925977.html\" target=\"_blank\" rel=\"noopener\">博客园-Git命令总结</a>;</li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰-Git教程</a>;</li>\n</ul>\n"},{"title":"Hexo插入音乐或视频","date":"2019-08-29T10:50:33.000Z","_content":"### 使用hexo-tag-aplayer插件\n- 官网地址：[hexo-tag-aplayer](https://github.com/grzhan/hexo-tag-aplayer);\n- 安装命令：`npm install --save hexo-tag-aplayer`;\n- 语法格式：\n\t```\n\t{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}\n\t```\n- 语法参数说明：\n\t```\n\ttitle : 曲目标题;\n\tauthor: 曲目作者\n\turl: 音乐文件 URL 地址;\n\tpicture_url: (可选) 音乐对应的图片地址;\n\tnarrow: （可选）播放器袖珍风格;\n\tautoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能;\n\twidth:xxx: (可选) 播放器宽度 (默认: 100%);\n\tlrc:xxx: （可选）歌词文件 URL 地址;\n\t```\n- 当开启Hexo的文章资源文件夹功能时可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用;\n\t1. hexo根路径配置文件中开启配置，`post_asset_folder: true`;\n\t2. 正确的引用图片方式是使用下列的标签插件而不是 markdown ：\n\t\t```\n\t\t{% asset_path slug %}\n\t\t{% asset_img slug [title] %}\n\t\t{% asset_link slug [title] %}\n\t\t\n\t\t例如：要引入一个图片:\n\t\t{% asset_img example.jpg This is an example image %}\n\t\t```\n\t3. 开启资源目录后，只需在歌词和路径属性中填写文件名即可，例如：\n\t\t```\n\t\t{% aplayer \"Caffeine\" \"Jeff Williams\" \"caffeine.mp3\" \"picture.jpg\" \"lrc:caffeine.txt\" %}\n\t\t```\n#### 歌词标签\n- 除了使用标签 lrc 选项来设定歌词，你也可以直接使用 aplayerlrc 标签来直接插入歌词文本在博客中;\n\t```\n\t{% aplayerlrc \"title\" \"author\" \"url\" \"autoplay\" %}\n\t[00:00.00]lrc here\n\t{% endaplayerlrc %}\n\t```\n#### 播放列表\n```\n{% aplayerlist %}\n{\n\t\"narrow\": false,      // （可选）播放器袖珍风格\n\t\"autoplay\": true,     // （可选) 自动播放，移动端浏览器暂时不支持此功能\n\t\"mode\": \"random\",     // （可选）曲目循环类型，有 'random', 'single', 'circulation', 'order' (列表)， 默认：'circulation' \n\t\"showlrc\": 3,         // （可选）歌词显示配置项，可选项有：1,2,3\n\t\"mutex\": true,        // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停\n\t\"theme\": \"#e6d0b2\",\t  // （可选）播放器风格色彩设置，默认：#b7daff\n\t\"preload\": \"metadata\",      // （可选）音乐文件预载入模式，可选项： 'none' 'metadata' 'auto', 默认: 'auto'\n\t\"listmaxheight\": \"513px\",   // (可选) 该播放列表的最大长度\n\t\"music\": [\n\t\t{\n\t\t\t\"title\": \"CoCo\",\n\t\t\t\"author\": \"Jeff Williams\",\n\t\t\t\"url\": \"caffeine.mp3\",\n\t\t\t\"pic\": \"caffeine.jpeg\",\n\t\t\t\"lrc\": \"caffeine.txt\"\n\t\t},\n\t\t{\n\t\t\t\"title\": \"アイロニ\",\n\t\t\t\"author\": \"鹿乃\",\n\t\t\t\"url\": \"irony.mp3\",\n\t\t\t\"pic\": \"irony.jpg\"\n\t\t}\n\t]\n}\n{% endaplayerlist %}\n```\n#### MeingJS 支持 (3.0 新功能)\n- MetingJS 是基于Meting API的APlayer衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、\n百度等平台的音乐播放;\n- 如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 _config.yml 中设置：\n\t```\n\taplayer:\n\t  meting: true\n\t```\n- 接着就可以通过 {% meting ...%} 在文章中使用 MetingJS 播放器了(开启后似乎不能使用第一种方式):\n\t```\n\t<!-- 简单示例 (id, server, type)  -->\n\t{% meting \"60198\" \"netease\" \"playlist\" %}\n\n\t<!-- 进阶示例 -->\n\t{% meting \"60198\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\"%}\n\t```\n- 有关 {% meting %} 的选项列表如下:\n\t```\n\tid\t必须值\t歌曲 id / 播放列表 id / 相册 id / 搜索关键字\n\tserver\t必须值\t音乐平台: netease, tencent, kugou, xiami, baidu\n\ttype\t必须值\tsong, playlist, album, search, artist\n\tfixed\tfalse\t开启固定模式\n\tmini\tfalse\t开启迷你模式\n\tloop\tall\t列表循环模式：all, one,none\n\torder\tlist\t列表播放模式： list, random\n\tvolume\t0.7\t播放器音量\n\tlrctype\t0\t歌词格式类型\n\tlistfolded\tfalse\t指定音乐播放列表是否折叠\n\tstoragename\tmetingjs\tLocalStorage 中存储播放器设定的键名\n\tautoplay\ttrue\t自动播放，移动端浏览器暂时不支持此功能\n\tmutex\ttrue\t该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停\n\tlistmaxheight\t340px\t播放列表的最大长度\n\tpreload\tauto\t音乐文件预载入模式，可选项： none, metadata, auto\n\ttheme\t#ad7a86\t播放器风格色彩设置\n\t```\n### hexo-tag-dplayer插件(好像不太好用)\n- 官网地址：[hexo-tag-dplayer](https://github.com/MoePlayer/hexo-tag-dplayer);\n- 安装命令：`npm install hexo-tag-dplayer --save`;\n- 语法格式：\n```\n{% dplayer key=value ... %}\n```\n- 语法参数说明：\n\t```\n\t常用选项：url、loop、volume、autoplay、hotkey、logo、mutex、highlight、preload、theme;\n\t\n\tautoplay\tfalse\t视频自动播放;\n\ttheme\t'#b7daff'\t主题色;\n\tloop\tfalse\t视频循环播放;\n\thotkey\ttrue\t开启热键，支持快进、快退、音量控制、播放暂停;\n\tpreload\t'auto'\t视频预加载，可选值: 'none', 'metadata', 'auto';\n\tvolume\t0.7\t默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效;\n\tlogo\t-\t在左上角展示一个 logo，你可以通过 CSS 调整它的大小和位置;\n\thighlight\t[]\t自定义进度条提示点;\n\tmutex\ttrue\t互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器;\n\t\n\turl\t-\t视频链接;\n\tpic\t-\t视频封面;\n\tthumbnails\t-\t视频缩略图;\n\t\n\ttype\t'webvtt'\t字幕类型，可选值: 'webvtt', 'ass'，目前只支持 webvtt;\n\tfontSize\t'20px'\t字幕字号;\n\tbottom\t'40px'\t字幕距离播放器底部的距离，取值形如: '10px' '10%';\n\tcolor\t'#fff'\t字幕颜色;\n\t\n\tid\trequired\t弹幕池id，必须唯一;\n\tapi\trequired\t见[弹幕接口](http://dplayer.js.org/zh/guide.html#%E5%BC%B9%E5%B9%95%E6%8E%A5%E5%8F%A3);\n\taddition\t-\t额外外挂弹幕,见[bilibili 弹幕](http://dplayer.js.org/zh/guide.html#bilibili-%E5%BC%B9%E5%B9%95);\n\ttoken\t-\t弹幕后端验证 token;\n\tmaximum\t-\t弹幕最大数量;\n\tunlimited\tfalse\t海量弹幕模式;\n\tuser\t'DIYgod'\t弹幕用户名;\n\t\n\t其他参数请参考[dplayer](https://github.com/MoePlayer/DPlayer);\n\t```\n###  举例\n```\n{% dplayer \"url=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.mp4\" \"addition=https://dplayer.daoapp.io/bilibili?aid=4157142\" \"api=https://api.prprpr.me/dplayer/\" \"pic=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.jpg\" \"id=9E2E3368B56CDBB4\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %}\n```\n{% meting \"27789126\" \"netease\" \"song\" %}\n{% dplayer \"url=http://p0e6ktyto.bkt.clouddn.com/MSN%20%E6%9C%80%E5%90%8E%E7%9A%84%E4%B8%89%E9%87%8D%E5%A5%8F_%20%E7%BB%9D%E5%94%B12017_%E9%AB%98%E6%B8%85.mp4\"  \"pic=https://i.imgur.com/n3YAGhq.jpg\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %}","source":"_posts/Hexo插入音乐或视频.md","raw":"---\ntitle: Hexo插入音乐或视频\ndate: 2019-08-29 18:50:33\ntags: hexo\ncategories: 学习笔记\n---\n### 使用hexo-tag-aplayer插件\n- 官网地址：[hexo-tag-aplayer](https://github.com/grzhan/hexo-tag-aplayer);\n- 安装命令：`npm install --save hexo-tag-aplayer`;\n- 语法格式：\n\t```\n\t{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}\n\t```\n- 语法参数说明：\n\t```\n\ttitle : 曲目标题;\n\tauthor: 曲目作者\n\turl: 音乐文件 URL 地址;\n\tpicture_url: (可选) 音乐对应的图片地址;\n\tnarrow: （可选）播放器袖珍风格;\n\tautoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能;\n\twidth:xxx: (可选) 播放器宽度 (默认: 100%);\n\tlrc:xxx: （可选）歌词文件 URL 地址;\n\t```\n- 当开启Hexo的文章资源文件夹功能时可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用;\n\t1. hexo根路径配置文件中开启配置，`post_asset_folder: true`;\n\t2. 正确的引用图片方式是使用下列的标签插件而不是 markdown ：\n\t\t```\n\t\t{% asset_path slug %}\n\t\t{% asset_img slug [title] %}\n\t\t{% asset_link slug [title] %}\n\t\t\n\t\t例如：要引入一个图片:\n\t\t{% asset_img example.jpg This is an example image %}\n\t\t```\n\t3. 开启资源目录后，只需在歌词和路径属性中填写文件名即可，例如：\n\t\t```\n\t\t{% aplayer \"Caffeine\" \"Jeff Williams\" \"caffeine.mp3\" \"picture.jpg\" \"lrc:caffeine.txt\" %}\n\t\t```\n#### 歌词标签\n- 除了使用标签 lrc 选项来设定歌词，你也可以直接使用 aplayerlrc 标签来直接插入歌词文本在博客中;\n\t```\n\t{% aplayerlrc \"title\" \"author\" \"url\" \"autoplay\" %}\n\t[00:00.00]lrc here\n\t{% endaplayerlrc %}\n\t```\n#### 播放列表\n```\n{% aplayerlist %}\n{\n\t\"narrow\": false,      // （可选）播放器袖珍风格\n\t\"autoplay\": true,     // （可选) 自动播放，移动端浏览器暂时不支持此功能\n\t\"mode\": \"random\",     // （可选）曲目循环类型，有 'random', 'single', 'circulation', 'order' (列表)， 默认：'circulation' \n\t\"showlrc\": 3,         // （可选）歌词显示配置项，可选项有：1,2,3\n\t\"mutex\": true,        // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停\n\t\"theme\": \"#e6d0b2\",\t  // （可选）播放器风格色彩设置，默认：#b7daff\n\t\"preload\": \"metadata\",      // （可选）音乐文件预载入模式，可选项： 'none' 'metadata' 'auto', 默认: 'auto'\n\t\"listmaxheight\": \"513px\",   // (可选) 该播放列表的最大长度\n\t\"music\": [\n\t\t{\n\t\t\t\"title\": \"CoCo\",\n\t\t\t\"author\": \"Jeff Williams\",\n\t\t\t\"url\": \"caffeine.mp3\",\n\t\t\t\"pic\": \"caffeine.jpeg\",\n\t\t\t\"lrc\": \"caffeine.txt\"\n\t\t},\n\t\t{\n\t\t\t\"title\": \"アイロニ\",\n\t\t\t\"author\": \"鹿乃\",\n\t\t\t\"url\": \"irony.mp3\",\n\t\t\t\"pic\": \"irony.jpg\"\n\t\t}\n\t]\n}\n{% endaplayerlist %}\n```\n#### MeingJS 支持 (3.0 新功能)\n- MetingJS 是基于Meting API的APlayer衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、\n百度等平台的音乐播放;\n- 如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 _config.yml 中设置：\n\t```\n\taplayer:\n\t  meting: true\n\t```\n- 接着就可以通过 {% meting ...%} 在文章中使用 MetingJS 播放器了(开启后似乎不能使用第一种方式):\n\t```\n\t<!-- 简单示例 (id, server, type)  -->\n\t{% meting \"60198\" \"netease\" \"playlist\" %}\n\n\t<!-- 进阶示例 -->\n\t{% meting \"60198\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\"%}\n\t```\n- 有关 {% meting %} 的选项列表如下:\n\t```\n\tid\t必须值\t歌曲 id / 播放列表 id / 相册 id / 搜索关键字\n\tserver\t必须值\t音乐平台: netease, tencent, kugou, xiami, baidu\n\ttype\t必须值\tsong, playlist, album, search, artist\n\tfixed\tfalse\t开启固定模式\n\tmini\tfalse\t开启迷你模式\n\tloop\tall\t列表循环模式：all, one,none\n\torder\tlist\t列表播放模式： list, random\n\tvolume\t0.7\t播放器音量\n\tlrctype\t0\t歌词格式类型\n\tlistfolded\tfalse\t指定音乐播放列表是否折叠\n\tstoragename\tmetingjs\tLocalStorage 中存储播放器设定的键名\n\tautoplay\ttrue\t自动播放，移动端浏览器暂时不支持此功能\n\tmutex\ttrue\t该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停\n\tlistmaxheight\t340px\t播放列表的最大长度\n\tpreload\tauto\t音乐文件预载入模式，可选项： none, metadata, auto\n\ttheme\t#ad7a86\t播放器风格色彩设置\n\t```\n### hexo-tag-dplayer插件(好像不太好用)\n- 官网地址：[hexo-tag-dplayer](https://github.com/MoePlayer/hexo-tag-dplayer);\n- 安装命令：`npm install hexo-tag-dplayer --save`;\n- 语法格式：\n```\n{% dplayer key=value ... %}\n```\n- 语法参数说明：\n\t```\n\t常用选项：url、loop、volume、autoplay、hotkey、logo、mutex、highlight、preload、theme;\n\t\n\tautoplay\tfalse\t视频自动播放;\n\ttheme\t'#b7daff'\t主题色;\n\tloop\tfalse\t视频循环播放;\n\thotkey\ttrue\t开启热键，支持快进、快退、音量控制、播放暂停;\n\tpreload\t'auto'\t视频预加载，可选值: 'none', 'metadata', 'auto';\n\tvolume\t0.7\t默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效;\n\tlogo\t-\t在左上角展示一个 logo，你可以通过 CSS 调整它的大小和位置;\n\thighlight\t[]\t自定义进度条提示点;\n\tmutex\ttrue\t互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器;\n\t\n\turl\t-\t视频链接;\n\tpic\t-\t视频封面;\n\tthumbnails\t-\t视频缩略图;\n\t\n\ttype\t'webvtt'\t字幕类型，可选值: 'webvtt', 'ass'，目前只支持 webvtt;\n\tfontSize\t'20px'\t字幕字号;\n\tbottom\t'40px'\t字幕距离播放器底部的距离，取值形如: '10px' '10%';\n\tcolor\t'#fff'\t字幕颜色;\n\t\n\tid\trequired\t弹幕池id，必须唯一;\n\tapi\trequired\t见[弹幕接口](http://dplayer.js.org/zh/guide.html#%E5%BC%B9%E5%B9%95%E6%8E%A5%E5%8F%A3);\n\taddition\t-\t额外外挂弹幕,见[bilibili 弹幕](http://dplayer.js.org/zh/guide.html#bilibili-%E5%BC%B9%E5%B9%95);\n\ttoken\t-\t弹幕后端验证 token;\n\tmaximum\t-\t弹幕最大数量;\n\tunlimited\tfalse\t海量弹幕模式;\n\tuser\t'DIYgod'\t弹幕用户名;\n\t\n\t其他参数请参考[dplayer](https://github.com/MoePlayer/DPlayer);\n\t```\n###  举例\n```\n{% dplayer \"url=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.mp4\" \"addition=https://dplayer.daoapp.io/bilibili?aid=4157142\" \"api=https://api.prprpr.me/dplayer/\" \"pic=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.jpg\" \"id=9E2E3368B56CDBB4\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %}\n```\n{% meting \"27789126\" \"netease\" \"song\" %}\n{% dplayer \"url=http://p0e6ktyto.bkt.clouddn.com/MSN%20%E6%9C%80%E5%90%8E%E7%9A%84%E4%B8%89%E9%87%8D%E5%A5%8F_%20%E7%BB%9D%E5%94%B12017_%E9%AB%98%E6%B8%85.mp4\"  \"pic=https://i.imgur.com/n3YAGhq.jpg\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %}","slug":"Hexo插入音乐或视频","published":1,"updated":"2019-08-30T00:14:49.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8orv0008agtnl1vu2svf","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"使用hexo-tag-aplayer插件\"><a href=\"#使用hexo-tag-aplayer插件\" class=\"headerlink\" title=\"使用hexo-tag-aplayer插件\"></a>使用hexo-tag-aplayer插件</h3><ul>\n<li><p>官网地址：<a href=\"https://github.com/grzhan/hexo-tag-aplayer\" target=\"_blank\" rel=\"noopener\">hexo-tag-aplayer</a>;</p>\n</li>\n<li><p>安装命令：<code>npm install --save hexo-tag-aplayer</code>;</p>\n</li>\n<li><p>语法格式：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>语法参数说明：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title : 曲目标题;</span><br><span class=\"line\">author: 曲目作者</span><br><span class=\"line\">url: 音乐文件 URL 地址;</span><br><span class=\"line\">picture_url: (可选) 音乐对应的图片地址;</span><br><span class=\"line\">narrow: （可选）播放器袖珍风格;</span><br><span class=\"line\">autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能;</span><br><span class=\"line\">width:xxx: (可选) 播放器宽度 (默认: 100%);</span><br><span class=\"line\">lrc:xxx: （可选）歌词文件 URL 地址;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当开启Hexo的文章资源文件夹功能时可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用;</p>\n<ol>\n<li><p>hexo根路径配置文件中开启配置，<code>post_asset_folder: true</code>;</p>\n</li>\n<li><p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">例如：要引入一个图片:</span><br><span class=\"line\">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启资源目录后，只需在歌词和路径属性中填写文件名即可，例如：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;picture.jpg&quot; &quot;lrc:caffeine.txt&quot; %&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"歌词标签\"><a href=\"#歌词标签\" class=\"headerlink\" title=\"歌词标签\"></a>歌词标签</h4><ul>\n<li>除了使用标签 lrc 选项来设定歌词，你也可以直接使用 aplayerlrc 标签来直接插入歌词文本在博客中;  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayerlrc &quot;title&quot; &quot;author&quot; &quot;url&quot; &quot;autoplay&quot; %&#125;</span><br><span class=\"line\">[00:00.00]lrc here</span><br><span class=\"line\">&#123;% endaplayerlrc %&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"播放列表\"><a href=\"#播放列表\" class=\"headerlink\" title=\"播放列表\"></a>播放列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayerlist %&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;narrow&quot;: false,      // （可选）播放器袖珍风格</span><br><span class=\"line\">\t&quot;autoplay&quot;: true,     // （可选) 自动播放，移动端浏览器暂时不支持此功能</span><br><span class=\"line\">\t&quot;mode&quot;: &quot;random&quot;,     // （可选）曲目循环类型，有 &apos;random&apos;, &apos;single&apos;, &apos;circulation&apos;, &apos;order&apos; (列表)， 默认：&apos;circulation&apos; </span><br><span class=\"line\">\t&quot;showlrc&quot;: 3,         // （可选）歌词显示配置项，可选项有：1,2,3</span><br><span class=\"line\">\t&quot;mutex&quot;: true,        // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class=\"line\">\t&quot;theme&quot;: &quot;#e6d0b2&quot;,\t  // （可选）播放器风格色彩设置，默认：#b7daff</span><br><span class=\"line\">\t&quot;preload&quot;: &quot;metadata&quot;,      // （可选）音乐文件预载入模式，可选项： &apos;none&apos; &apos;metadata&apos; &apos;auto&apos;, 默认: &apos;auto&apos;</span><br><span class=\"line\">\t&quot;listmaxheight&quot;: &quot;513px&quot;,   // (可选) 该播放列表的最大长度</span><br><span class=\"line\">\t&quot;music&quot;: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;title&quot;: &quot;CoCo&quot;,</span><br><span class=\"line\">\t\t\t&quot;author&quot;: &quot;Jeff Williams&quot;,</span><br><span class=\"line\">\t\t\t&quot;url&quot;: &quot;caffeine.mp3&quot;,</span><br><span class=\"line\">\t\t\t&quot;pic&quot;: &quot;caffeine.jpeg&quot;,</span><br><span class=\"line\">\t\t\t&quot;lrc&quot;: &quot;caffeine.txt&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;title&quot;: &quot;アイロニ&quot;,</span><br><span class=\"line\">\t\t\t&quot;author&quot;: &quot;鹿乃&quot;,</span><br><span class=\"line\">\t\t\t&quot;url&quot;: &quot;irony.mp3&quot;,</span><br><span class=\"line\">\t\t\t&quot;pic&quot;: &quot;irony.jpg&quot;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MeingJS-支持-3-0-新功能\"><a href=\"#MeingJS-支持-3-0-新功能\" class=\"headerlink\" title=\"MeingJS 支持 (3.0 新功能)\"></a>MeingJS 支持 (3.0 新功能)</h4><ul>\n<li><p>MetingJS 是基于Meting API的APlayer衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、<br>百度等平台的音乐播放;</p>\n</li>\n<li><p>如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 _config.yml 中设置：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aplayer:</span><br><span class=\"line\">  meting: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接着就可以通过 \n    <div id=\"aplayer-HSsATgLi\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"...\" data-server=\"undefined\" data-type=\"undefined\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"></div> 在文章中使用 MetingJS 播放器了(开启后似乎不能使用第一种方式):</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 简单示例 (id, server, type)  --&gt;</span><br><span class=\"line\">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 进阶示例 --&gt;</span><br><span class=\"line\">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>有关 \n    <div id=\"aplayer-KuAfBAEy\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"undefined\" data-server=\"undefined\" data-type=\"undefined\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"></div> 的选项列表如下:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id\t必须值\t歌曲 id / 播放列表 id / 相册 id / 搜索关键字</span><br><span class=\"line\">server\t必须值\t音乐平台: netease, tencent, kugou, xiami, baidu</span><br><span class=\"line\">type\t必须值\tsong, playlist, album, search, artist</span><br><span class=\"line\">fixed\tfalse\t开启固定模式</span><br><span class=\"line\">mini\tfalse\t开启迷你模式</span><br><span class=\"line\">loop\tall\t列表循环模式：all, one,none</span><br><span class=\"line\">order\tlist\t列表播放模式： list, random</span><br><span class=\"line\">volume\t0.7\t播放器音量</span><br><span class=\"line\">lrctype\t0\t歌词格式类型</span><br><span class=\"line\">listfolded\tfalse\t指定音乐播放列表是否折叠</span><br><span class=\"line\">storagename\tmetingjs\tLocalStorage 中存储播放器设定的键名</span><br><span class=\"line\">autoplay\ttrue\t自动播放，移动端浏览器暂时不支持此功能</span><br><span class=\"line\">mutex\ttrue\t该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class=\"line\">listmaxheight\t340px\t播放列表的最大长度</span><br><span class=\"line\">preload\tauto\t音乐文件预载入模式，可选项： none, metadata, auto</span><br><span class=\"line\">theme\t#ad7a86\t播放器风格色彩设置</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"hexo-tag-dplayer插件-好像不太好用\"><a href=\"#hexo-tag-dplayer插件-好像不太好用\" class=\"headerlink\" title=\"hexo-tag-dplayer插件(好像不太好用)\"></a>hexo-tag-dplayer插件(好像不太好用)</h3><ul>\n<li><p>官网地址：<a href=\"https://github.com/MoePlayer/hexo-tag-dplayer\" target=\"_blank\" rel=\"noopener\">hexo-tag-dplayer</a>;</p>\n</li>\n<li><p>安装命令：<code>npm install hexo-tag-dplayer --save</code>;</p>\n</li>\n<li><p>语法格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% dplayer key=value ... %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>语法参数说明：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常用选项：url、loop、volume、autoplay、hotkey、logo、mutex、highlight、preload、theme;</span><br><span class=\"line\"></span><br><span class=\"line\">autoplay\tfalse\t视频自动播放;</span><br><span class=\"line\">theme\t&apos;#b7daff&apos;\t主题色;</span><br><span class=\"line\">loop\tfalse\t视频循环播放;</span><br><span class=\"line\">hotkey\ttrue\t开启热键，支持快进、快退、音量控制、播放暂停;</span><br><span class=\"line\">preload\t&apos;auto&apos;\t视频预加载，可选值: &apos;none&apos;, &apos;metadata&apos;, &apos;auto&apos;;</span><br><span class=\"line\">volume\t0.7\t默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效;</span><br><span class=\"line\">logo\t-\t在左上角展示一个 logo，你可以通过 CSS 调整它的大小和位置;</span><br><span class=\"line\">highlight\t[]\t自定义进度条提示点;</span><br><span class=\"line\">mutex\ttrue\t互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器;</span><br><span class=\"line\"></span><br><span class=\"line\">url\t-\t视频链接;</span><br><span class=\"line\">pic\t-\t视频封面;</span><br><span class=\"line\">thumbnails\t-\t视频缩略图;</span><br><span class=\"line\"></span><br><span class=\"line\">type\t&apos;webvtt&apos;\t字幕类型，可选值: &apos;webvtt&apos;, &apos;ass&apos;，目前只支持 webvtt;</span><br><span class=\"line\">fontSize\t&apos;20px&apos;\t字幕字号;</span><br><span class=\"line\">bottom\t&apos;40px&apos;\t字幕距离播放器底部的距离，取值形如: &apos;10px&apos; &apos;10%&apos;;</span><br><span class=\"line\">color\t&apos;#fff&apos;\t字幕颜色;</span><br><span class=\"line\"></span><br><span class=\"line\">id\trequired\t弹幕池id，必须唯一;</span><br><span class=\"line\">api\trequired\t见[弹幕接口](http://dplayer.js.org/zh/guide.html#%E5%BC%B9%E5%B9%95%E6%8E%A5%E5%8F%A3);</span><br><span class=\"line\">addition\t-\t额外外挂弹幕,见[bilibili 弹幕](http://dplayer.js.org/zh/guide.html#bilibili-%E5%BC%B9%E5%B9%95);</span><br><span class=\"line\">token\t-\t弹幕后端验证 token;</span><br><span class=\"line\">maximum\t-\t弹幕最大数量;</span><br><span class=\"line\">unlimited\tfalse\t海量弹幕模式;</span><br><span class=\"line\">user\t&apos;DIYgod&apos;\t弹幕用户名;</span><br><span class=\"line\"></span><br><span class=\"line\">其他参数请参考[dplayer](https://github.com/MoePlayer/DPlayer);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% dplayer &quot;url=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.mp4&quot; &quot;addition=https://dplayer.daoapp.io/bilibili?aid=4157142&quot; &quot;api=https://api.prprpr.me/dplayer/&quot; &quot;pic=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.jpg&quot; &quot;id=9E2E3368B56CDBB4&quot; &quot;loop=yes&quot; &quot;theme=#FADFA3&quot; &quot;autoplay=false&quot; &quot;token=tokendemo&quot; %&#125;</span><br></pre></td></tr></table></figure>\n\n\n    <div id=\"aplayer-oAqXflQZ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"27789126\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"></div>\n<div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p0e6ktyto.bkt.clouddn.com/MSN%20%E6%9C%80%E5%90%8E%E7%9A%84%E4%B8%89%E9%87%8D%E5%A5%8F_%20%E7%BB%9D%E5%94%B12017_%E9%AB%98%E6%B8%85.mp4\",\"pic\":\"https://i.imgur.com/n3YAGhq.jpg\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"使用hexo-tag-aplayer插件\"><a href=\"#使用hexo-tag-aplayer插件\" class=\"headerlink\" title=\"使用hexo-tag-aplayer插件\"></a>使用hexo-tag-aplayer插件</h3><ul>\n<li><p>官网地址：<a href=\"https://github.com/grzhan/hexo-tag-aplayer\" target=\"_blank\" rel=\"noopener\">hexo-tag-aplayer</a>;</p>\n</li>\n<li><p>安装命令：<code>npm install --save hexo-tag-aplayer</code>;</p>\n</li>\n<li><p>语法格式：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>语法参数说明：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title : 曲目标题;</span><br><span class=\"line\">author: 曲目作者</span><br><span class=\"line\">url: 音乐文件 URL 地址;</span><br><span class=\"line\">picture_url: (可选) 音乐对应的图片地址;</span><br><span class=\"line\">narrow: （可选）播放器袖珍风格;</span><br><span class=\"line\">autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能;</span><br><span class=\"line\">width:xxx: (可选) 播放器宽度 (默认: 100%);</span><br><span class=\"line\">lrc:xxx: （可选）歌词文件 URL 地址;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当开启Hexo的文章资源文件夹功能时可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用;</p>\n<ol>\n<li><p>hexo根路径配置文件中开启配置，<code>post_asset_folder: true</code>;</p>\n</li>\n<li><p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">例如：要引入一个图片:</span><br><span class=\"line\">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启资源目录后，只需在歌词和路径属性中填写文件名即可，例如：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;picture.jpg&quot; &quot;lrc:caffeine.txt&quot; %&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"歌词标签\"><a href=\"#歌词标签\" class=\"headerlink\" title=\"歌词标签\"></a>歌词标签</h4><ul>\n<li>除了使用标签 lrc 选项来设定歌词，你也可以直接使用 aplayerlrc 标签来直接插入歌词文本在博客中;  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayerlrc &quot;title&quot; &quot;author&quot; &quot;url&quot; &quot;autoplay&quot; %&#125;</span><br><span class=\"line\">[00:00.00]lrc here</span><br><span class=\"line\">&#123;% endaplayerlrc %&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"播放列表\"><a href=\"#播放列表\" class=\"headerlink\" title=\"播放列表\"></a>播放列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayerlist %&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;narrow&quot;: false,      // （可选）播放器袖珍风格</span><br><span class=\"line\">\t&quot;autoplay&quot;: true,     // （可选) 自动播放，移动端浏览器暂时不支持此功能</span><br><span class=\"line\">\t&quot;mode&quot;: &quot;random&quot;,     // （可选）曲目循环类型，有 &apos;random&apos;, &apos;single&apos;, &apos;circulation&apos;, &apos;order&apos; (列表)， 默认：&apos;circulation&apos; </span><br><span class=\"line\">\t&quot;showlrc&quot;: 3,         // （可选）歌词显示配置项，可选项有：1,2,3</span><br><span class=\"line\">\t&quot;mutex&quot;: true,        // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class=\"line\">\t&quot;theme&quot;: &quot;#e6d0b2&quot;,\t  // （可选）播放器风格色彩设置，默认：#b7daff</span><br><span class=\"line\">\t&quot;preload&quot;: &quot;metadata&quot;,      // （可选）音乐文件预载入模式，可选项： &apos;none&apos; &apos;metadata&apos; &apos;auto&apos;, 默认: &apos;auto&apos;</span><br><span class=\"line\">\t&quot;listmaxheight&quot;: &quot;513px&quot;,   // (可选) 该播放列表的最大长度</span><br><span class=\"line\">\t&quot;music&quot;: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;title&quot;: &quot;CoCo&quot;,</span><br><span class=\"line\">\t\t\t&quot;author&quot;: &quot;Jeff Williams&quot;,</span><br><span class=\"line\">\t\t\t&quot;url&quot;: &quot;caffeine.mp3&quot;,</span><br><span class=\"line\">\t\t\t&quot;pic&quot;: &quot;caffeine.jpeg&quot;,</span><br><span class=\"line\">\t\t\t&quot;lrc&quot;: &quot;caffeine.txt&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;title&quot;: &quot;アイロニ&quot;,</span><br><span class=\"line\">\t\t\t&quot;author&quot;: &quot;鹿乃&quot;,</span><br><span class=\"line\">\t\t\t&quot;url&quot;: &quot;irony.mp3&quot;,</span><br><span class=\"line\">\t\t\t&quot;pic&quot;: &quot;irony.jpg&quot;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MeingJS-支持-3-0-新功能\"><a href=\"#MeingJS-支持-3-0-新功能\" class=\"headerlink\" title=\"MeingJS 支持 (3.0 新功能)\"></a>MeingJS 支持 (3.0 新功能)</h4><ul>\n<li><p>MetingJS 是基于Meting API的APlayer衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、<br>百度等平台的音乐播放;</p>\n</li>\n<li><p>如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 _config.yml 中设置：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aplayer:</span><br><span class=\"line\">  meting: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接着就可以通过 \n    <div id=\"aplayer-HSsATgLi\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"...\" data-server=\"undefined\" data-type=\"undefined\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"></div> 在文章中使用 MetingJS 播放器了(开启后似乎不能使用第一种方式):</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 简单示例 (id, server, type)  --&gt;</span><br><span class=\"line\">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 进阶示例 --&gt;</span><br><span class=\"line\">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>有关 \n    <div id=\"aplayer-KuAfBAEy\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"undefined\" data-server=\"undefined\" data-type=\"undefined\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"></div> 的选项列表如下:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id\t必须值\t歌曲 id / 播放列表 id / 相册 id / 搜索关键字</span><br><span class=\"line\">server\t必须值\t音乐平台: netease, tencent, kugou, xiami, baidu</span><br><span class=\"line\">type\t必须值\tsong, playlist, album, search, artist</span><br><span class=\"line\">fixed\tfalse\t开启固定模式</span><br><span class=\"line\">mini\tfalse\t开启迷你模式</span><br><span class=\"line\">loop\tall\t列表循环模式：all, one,none</span><br><span class=\"line\">order\tlist\t列表播放模式： list, random</span><br><span class=\"line\">volume\t0.7\t播放器音量</span><br><span class=\"line\">lrctype\t0\t歌词格式类型</span><br><span class=\"line\">listfolded\tfalse\t指定音乐播放列表是否折叠</span><br><span class=\"line\">storagename\tmetingjs\tLocalStorage 中存储播放器设定的键名</span><br><span class=\"line\">autoplay\ttrue\t自动播放，移动端浏览器暂时不支持此功能</span><br><span class=\"line\">mutex\ttrue\t该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class=\"line\">listmaxheight\t340px\t播放列表的最大长度</span><br><span class=\"line\">preload\tauto\t音乐文件预载入模式，可选项： none, metadata, auto</span><br><span class=\"line\">theme\t#ad7a86\t播放器风格色彩设置</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"hexo-tag-dplayer插件-好像不太好用\"><a href=\"#hexo-tag-dplayer插件-好像不太好用\" class=\"headerlink\" title=\"hexo-tag-dplayer插件(好像不太好用)\"></a>hexo-tag-dplayer插件(好像不太好用)</h3><ul>\n<li><p>官网地址：<a href=\"https://github.com/MoePlayer/hexo-tag-dplayer\" target=\"_blank\" rel=\"noopener\">hexo-tag-dplayer</a>;</p>\n</li>\n<li><p>安装命令：<code>npm install hexo-tag-dplayer --save</code>;</p>\n</li>\n<li><p>语法格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% dplayer key=value ... %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>语法参数说明：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常用选项：url、loop、volume、autoplay、hotkey、logo、mutex、highlight、preload、theme;</span><br><span class=\"line\"></span><br><span class=\"line\">autoplay\tfalse\t视频自动播放;</span><br><span class=\"line\">theme\t&apos;#b7daff&apos;\t主题色;</span><br><span class=\"line\">loop\tfalse\t视频循环播放;</span><br><span class=\"line\">hotkey\ttrue\t开启热键，支持快进、快退、音量控制、播放暂停;</span><br><span class=\"line\">preload\t&apos;auto&apos;\t视频预加载，可选值: &apos;none&apos;, &apos;metadata&apos;, &apos;auto&apos;;</span><br><span class=\"line\">volume\t0.7\t默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效;</span><br><span class=\"line\">logo\t-\t在左上角展示一个 logo，你可以通过 CSS 调整它的大小和位置;</span><br><span class=\"line\">highlight\t[]\t自定义进度条提示点;</span><br><span class=\"line\">mutex\ttrue\t互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器;</span><br><span class=\"line\"></span><br><span class=\"line\">url\t-\t视频链接;</span><br><span class=\"line\">pic\t-\t视频封面;</span><br><span class=\"line\">thumbnails\t-\t视频缩略图;</span><br><span class=\"line\"></span><br><span class=\"line\">type\t&apos;webvtt&apos;\t字幕类型，可选值: &apos;webvtt&apos;, &apos;ass&apos;，目前只支持 webvtt;</span><br><span class=\"line\">fontSize\t&apos;20px&apos;\t字幕字号;</span><br><span class=\"line\">bottom\t&apos;40px&apos;\t字幕距离播放器底部的距离，取值形如: &apos;10px&apos; &apos;10%&apos;;</span><br><span class=\"line\">color\t&apos;#fff&apos;\t字幕颜色;</span><br><span class=\"line\"></span><br><span class=\"line\">id\trequired\t弹幕池id，必须唯一;</span><br><span class=\"line\">api\trequired\t见[弹幕接口](http://dplayer.js.org/zh/guide.html#%E5%BC%B9%E5%B9%95%E6%8E%A5%E5%8F%A3);</span><br><span class=\"line\">addition\t-\t额外外挂弹幕,见[bilibili 弹幕](http://dplayer.js.org/zh/guide.html#bilibili-%E5%BC%B9%E5%B9%95);</span><br><span class=\"line\">token\t-\t弹幕后端验证 token;</span><br><span class=\"line\">maximum\t-\t弹幕最大数量;</span><br><span class=\"line\">unlimited\tfalse\t海量弹幕模式;</span><br><span class=\"line\">user\t&apos;DIYgod&apos;\t弹幕用户名;</span><br><span class=\"line\"></span><br><span class=\"line\">其他参数请参考[dplayer](https://github.com/MoePlayer/DPlayer);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% dplayer &quot;url=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.mp4&quot; &quot;addition=https://dplayer.daoapp.io/bilibili?aid=4157142&quot; &quot;api=https://api.prprpr.me/dplayer/&quot; &quot;pic=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.jpg&quot; &quot;id=9E2E3368B56CDBB4&quot; &quot;loop=yes&quot; &quot;theme=#FADFA3&quot; &quot;autoplay=false&quot; &quot;token=tokendemo&quot; %&#125;</span><br></pre></td></tr></table></figure>\n\n\n    <div id=\"aplayer-oAqXflQZ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"27789126\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"></div>\n<div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p0e6ktyto.bkt.clouddn.com/MSN%20%E6%9C%80%E5%90%8E%E7%9A%84%E4%B8%89%E9%87%8D%E5%A5%8F_%20%E7%BB%9D%E5%94%B12017_%E9%AB%98%E6%B8%85.mp4\",\"pic\":\"https://i.imgur.com/n3YAGhq.jpg\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>"},{"title":"Html初识","date":"2019-08-29T04:57:50.000Z","_content":"### 一 软件的架构\n- C/S架构：(client-server)客户端服务器架构：    \n  1. 用户需要安装客户端来使用软件；\n  2. 每次服务端更新后需要更新客户端；\n  3. 针对不同的操作系统，需要开发不同的客户端程序，跨平台性差；\n  4. 使用自有协议，相对来说安全性较好；\n- B/S架构：(browser-server)浏览器服务器架构:    \n  1. 不需要安装客户端，只要有一个浏览器即可；\n  2. 软件更新不需要更新客户端；\n  3. 由于只需开发服务端，跨平台性较好；\n  4. 使用公共的http协议或者https协议，相对C/S架构来说可能安全性稍差；\n\n- 网页组成：根据w3c的标准，一个网页主要由结构、表现和行为组成，即html、css和js。\n\n### 二 HTML\n- html：hypertext markup language,超文本标记语言：\n  1. 不是一门编程语言，而是一门告诉浏览器如何组织页面的标记语言，决定了网页的结构；\n  2. 元素是html的基本单位，通常情况下，一个元素有开始标签、结束标签和内容构成；\n  3. HTML标签不区分大小写，从可读性和一致性方面通常使用小写字母；\n  4. 元素按照性质可分成块级元素和内联元素两大类别；\n  5. 没有内容的元素称之为空元素；\n  6. 可以在开始标签中为元素添加属性，属性通常是一组由等号连接的名值对，值用引号包裹；\n  7. 当属性没有值或者其值为属性名本身，这样的属性称之为布尔属性；\n- 完整的html页面的组成:   \n  1. 文档类型声明<!doctype html>，h5声明，最短的有效的文档声明；\n  2. html根元素，包裹了一个完整html页面；\n  3. head元素，包裹了所有想包含在html页面中但不想在页面中显示的内容，如标题、描述、关键字、字符集等；\n  4. body元素，包裹了所有想在网页中显示的内容，如文本、图片、音频、视频等；\n\n### 三 HTML元素\n- 元数据：meta\n- 标题和段落：h、p\n- 超链接和图片：a、img、figure、picture\n- 列表：ul、ol、dl\n- 实体：`&amp; &nbsp; &lt; &gt; &copy; &quote;`\n- 表格：table、tr、td、th、colgroup、col、thead、tfoot、tbody、caption\n- 表单：form、input（text、password、file、hidden、checkbox、radio、email、number、tel、search）、textarea、select、fieldset\n- 语气：em、strong、ins、del、small\n- 引用：blockquote、q、cite\n- 缩略语和上下标：abbr、sup、sub\n- 代码：code、pre\n- 换行和水平分割线：br、hr\n- 布局：div、span\n- 语义布局：header、nav、main、section、article、aside、footer\n- 音频和视频：audio、video\n\n### 四 CSS\n- css：cascading style sheets，层叠样式表：\n  1. 指定文档如何呈现给用户的语言，用来定义文档的样式和布局，决定了网页的表现；\n  2. css的基本单位就是一个个css规则，一个规则由选择器和css声明块组成（与值配对的属性称之为css声明）；\n  3. css工作原理： 浏览器加载html并解析，然后加载css并解析，在然后将解析后的html和css在dom树上进行渲染，最后呈现给用户；\n  4. 添加样式表的方式：外部样式表、内部样式表和内联样式表；\n### 五 css选择器\n- 基本选择器：元素选择器、类选择器、ID选择器、通用选择器、分组选择器；\n- 关系选择器：子元素选择器（>）、后代选择器、交集选择器、兄弟选择器(+、~)\n- 属性选择器：E[att]、E[att=\"val\"]、E[att^=\"val\"]、E[att$=\"val\"]、E[att*=\"val\"]、E[att|=\"val\"]、E[att~=\"val\"]\n- 伪类选择器：E:link、E:visited、E:hover、E:active、E:focus、E:not()、E:first-child、、E:nth-child(n)、E:nth-of-type(n)、E:empty、E:checked、E:disabled、E:enabled\n- 伪元素选择器：E:after/E::after、E:before/E::before\n\n### 六css中单位\n- 长度单位：px、em、百分比\n- 颜色单位：rgb、代表颜色的单词、十六进制\n### 七 规则优先级\n- 在外部添加样式的情况下，id选择器>类选择器、伪类选择器、属性选择器>元素选择器、伪元素选择器\n\n","source":"_posts/Html初识.md","raw":"---\ntitle: Html初识\ndate: 2019-08-29 12:57:50\ntags: html\ncategories: 学习笔记\n---\n### 一 软件的架构\n- C/S架构：(client-server)客户端服务器架构：    \n  1. 用户需要安装客户端来使用软件；\n  2. 每次服务端更新后需要更新客户端；\n  3. 针对不同的操作系统，需要开发不同的客户端程序，跨平台性差；\n  4. 使用自有协议，相对来说安全性较好；\n- B/S架构：(browser-server)浏览器服务器架构:    \n  1. 不需要安装客户端，只要有一个浏览器即可；\n  2. 软件更新不需要更新客户端；\n  3. 由于只需开发服务端，跨平台性较好；\n  4. 使用公共的http协议或者https协议，相对C/S架构来说可能安全性稍差；\n\n- 网页组成：根据w3c的标准，一个网页主要由结构、表现和行为组成，即html、css和js。\n\n### 二 HTML\n- html：hypertext markup language,超文本标记语言：\n  1. 不是一门编程语言，而是一门告诉浏览器如何组织页面的标记语言，决定了网页的结构；\n  2. 元素是html的基本单位，通常情况下，一个元素有开始标签、结束标签和内容构成；\n  3. HTML标签不区分大小写，从可读性和一致性方面通常使用小写字母；\n  4. 元素按照性质可分成块级元素和内联元素两大类别；\n  5. 没有内容的元素称之为空元素；\n  6. 可以在开始标签中为元素添加属性，属性通常是一组由等号连接的名值对，值用引号包裹；\n  7. 当属性没有值或者其值为属性名本身，这样的属性称之为布尔属性；\n- 完整的html页面的组成:   \n  1. 文档类型声明<!doctype html>，h5声明，最短的有效的文档声明；\n  2. html根元素，包裹了一个完整html页面；\n  3. head元素，包裹了所有想包含在html页面中但不想在页面中显示的内容，如标题、描述、关键字、字符集等；\n  4. body元素，包裹了所有想在网页中显示的内容，如文本、图片、音频、视频等；\n\n### 三 HTML元素\n- 元数据：meta\n- 标题和段落：h、p\n- 超链接和图片：a、img、figure、picture\n- 列表：ul、ol、dl\n- 实体：`&amp; &nbsp; &lt; &gt; &copy; &quote;`\n- 表格：table、tr、td、th、colgroup、col、thead、tfoot、tbody、caption\n- 表单：form、input（text、password、file、hidden、checkbox、radio、email、number、tel、search）、textarea、select、fieldset\n- 语气：em、strong、ins、del、small\n- 引用：blockquote、q、cite\n- 缩略语和上下标：abbr、sup、sub\n- 代码：code、pre\n- 换行和水平分割线：br、hr\n- 布局：div、span\n- 语义布局：header、nav、main、section、article、aside、footer\n- 音频和视频：audio、video\n\n### 四 CSS\n- css：cascading style sheets，层叠样式表：\n  1. 指定文档如何呈现给用户的语言，用来定义文档的样式和布局，决定了网页的表现；\n  2. css的基本单位就是一个个css规则，一个规则由选择器和css声明块组成（与值配对的属性称之为css声明）；\n  3. css工作原理： 浏览器加载html并解析，然后加载css并解析，在然后将解析后的html和css在dom树上进行渲染，最后呈现给用户；\n  4. 添加样式表的方式：外部样式表、内部样式表和内联样式表；\n### 五 css选择器\n- 基本选择器：元素选择器、类选择器、ID选择器、通用选择器、分组选择器；\n- 关系选择器：子元素选择器（>）、后代选择器、交集选择器、兄弟选择器(+、~)\n- 属性选择器：E[att]、E[att=\"val\"]、E[att^=\"val\"]、E[att$=\"val\"]、E[att*=\"val\"]、E[att|=\"val\"]、E[att~=\"val\"]\n- 伪类选择器：E:link、E:visited、E:hover、E:active、E:focus、E:not()、E:first-child、、E:nth-child(n)、E:nth-of-type(n)、E:empty、E:checked、E:disabled、E:enabled\n- 伪元素选择器：E:after/E::after、E:before/E::before\n\n### 六css中单位\n- 长度单位：px、em、百分比\n- 颜色单位：rgb、代表颜色的单词、十六进制\n### 七 规则优先级\n- 在外部添加样式的情况下，id选择器>类选择器、伪类选择器、属性选择器>元素选择器、伪元素选择器\n\n","slug":"Html初识","published":1,"updated":"2019-08-29T04:59:06.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8os4000cagtn39jvfasy","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"一-软件的架构\"><a href=\"#一-软件的架构\" class=\"headerlink\" title=\"一 软件的架构\"></a>一 软件的架构</h3><ul>\n<li><p>C/S架构：(client-server)客户端服务器架构：    </p>\n<ol>\n<li>用户需要安装客户端来使用软件；</li>\n<li>每次服务端更新后需要更新客户端；</li>\n<li>针对不同的操作系统，需要开发不同的客户端程序，跨平台性差；</li>\n<li>使用自有协议，相对来说安全性较好；</li>\n</ol>\n</li>\n<li><p>B/S架构：(browser-server)浏览器服务器架构:    </p>\n<ol>\n<li>不需要安装客户端，只要有一个浏览器即可；</li>\n<li>软件更新不需要更新客户端；</li>\n<li>由于只需开发服务端，跨平台性较好；</li>\n<li>使用公共的http协议或者https协议，相对C/S架构来说可能安全性稍差；</li>\n</ol>\n</li>\n<li><p>网页组成：根据w3c的标准，一个网页主要由结构、表现和行为组成，即html、css和js。</p>\n</li>\n</ul>\n<h3 id=\"二-HTML\"><a href=\"#二-HTML\" class=\"headerlink\" title=\"二 HTML\"></a>二 HTML</h3><ul>\n<li>html：hypertext markup language,超文本标记语言：<ol>\n<li>不是一门编程语言，而是一门告诉浏览器如何组织页面的标记语言，决定了网页的结构；</li>\n<li>元素是html的基本单位，通常情况下，一个元素有开始标签、结束标签和内容构成；</li>\n<li>HTML标签不区分大小写，从可读性和一致性方面通常使用小写字母；</li>\n<li>元素按照性质可分成块级元素和内联元素两大类别；</li>\n<li>没有内容的元素称之为空元素；</li>\n<li>可以在开始标签中为元素添加属性，属性通常是一组由等号连接的名值对，值用引号包裹；</li>\n<li>当属性没有值或者其值为属性名本身，这样的属性称之为布尔属性；</li>\n</ol>\n</li>\n<li>完整的html页面的组成:   <ol>\n<li>文档类型声明<!doctype html>，h5声明，最短的有效的文档声明；</li>\n<li>html根元素，包裹了一个完整html页面；</li>\n<li>head元素，包裹了所有想包含在html页面中但不想在页面中显示的内容，如标题、描述、关键字、字符集等；</li>\n<li>body元素，包裹了所有想在网页中显示的内容，如文本、图片、音频、视频等；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"三-HTML元素\"><a href=\"#三-HTML元素\" class=\"headerlink\" title=\"三 HTML元素\"></a>三 HTML元素</h3><ul>\n<li>元数据：meta</li>\n<li>标题和段落：h、p</li>\n<li>超链接和图片：a、img、figure、picture</li>\n<li>列表：ul、ol、dl</li>\n<li>实体：<code>&amp;amp; &amp;nbsp; &amp;lt; &amp;gt; &amp;copy; &amp;quote;</code></li>\n<li>表格：table、tr、td、th、colgroup、col、thead、tfoot、tbody、caption</li>\n<li>表单：form、input（text、password、file、hidden、checkbox、radio、email、number、tel、search）、textarea、select、fieldset</li>\n<li>语气：em、strong、ins、del、small</li>\n<li>引用：blockquote、q、cite</li>\n<li>缩略语和上下标：abbr、sup、sub</li>\n<li>代码：code、pre</li>\n<li>换行和水平分割线：br、hr</li>\n<li>布局：div、span</li>\n<li>语义布局：header、nav、main、section、article、aside、footer</li>\n<li>音频和视频：audio、video</li>\n</ul>\n<h3 id=\"四-CSS\"><a href=\"#四-CSS\" class=\"headerlink\" title=\"四 CSS\"></a>四 CSS</h3><ul>\n<li>css：cascading style sheets，层叠样式表：<ol>\n<li>指定文档如何呈现给用户的语言，用来定义文档的样式和布局，决定了网页的表现；</li>\n<li>css的基本单位就是一个个css规则，一个规则由选择器和css声明块组成（与值配对的属性称之为css声明）；</li>\n<li>css工作原理： 浏览器加载html并解析，然后加载css并解析，在然后将解析后的html和css在dom树上进行渲染，最后呈现给用户；</li>\n<li>添加样式表的方式：外部样式表、内部样式表和内联样式表；<h3 id=\"五-css选择器\"><a href=\"#五-css选择器\" class=\"headerlink\" title=\"五 css选择器\"></a>五 css选择器</h3></li>\n</ol>\n</li>\n<li>基本选择器：元素选择器、类选择器、ID选择器、通用选择器、分组选择器；</li>\n<li>关系选择器：子元素选择器（&gt;）、后代选择器、交集选择器、兄弟选择器(+、~)</li>\n<li>属性选择器：E[att]、E[att=”val”]、E[att^=”val”]、E[att$=”val”]、E[att*=”val”]、E[att|=”val”]、E[att~=”val”]</li>\n<li>伪类选择器：E:link、E:visited、E:hover、E:active、E:focus、E:not()、E:first-child、、E:nth-child(n)、E:nth-of-type(n)、E:empty、E:checked、E:disabled、E:enabled</li>\n<li>伪元素选择器：E:after/E::after、E:before/E::before</li>\n</ul>\n<h3 id=\"六css中单位\"><a href=\"#六css中单位\" class=\"headerlink\" title=\"六css中单位\"></a>六css中单位</h3><ul>\n<li>长度单位：px、em、百分比</li>\n<li>颜色单位：rgb、代表颜色的单词、十六进制<h3 id=\"七-规则优先级\"><a href=\"#七-规则优先级\" class=\"headerlink\" title=\"七 规则优先级\"></a>七 规则优先级</h3></li>\n<li>在外部添加样式的情况下，id选择器&gt;类选择器、伪类选择器、属性选择器&gt;元素选择器、伪元素选择器</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一-软件的架构\"><a href=\"#一-软件的架构\" class=\"headerlink\" title=\"一 软件的架构\"></a>一 软件的架构</h3><ul>\n<li><p>C/S架构：(client-server)客户端服务器架构：    </p>\n<ol>\n<li>用户需要安装客户端来使用软件；</li>\n<li>每次服务端更新后需要更新客户端；</li>\n<li>针对不同的操作系统，需要开发不同的客户端程序，跨平台性差；</li>\n<li>使用自有协议，相对来说安全性较好；</li>\n</ol>\n</li>\n<li><p>B/S架构：(browser-server)浏览器服务器架构:    </p>\n<ol>\n<li>不需要安装客户端，只要有一个浏览器即可；</li>\n<li>软件更新不需要更新客户端；</li>\n<li>由于只需开发服务端，跨平台性较好；</li>\n<li>使用公共的http协议或者https协议，相对C/S架构来说可能安全性稍差；</li>\n</ol>\n</li>\n<li><p>网页组成：根据w3c的标准，一个网页主要由结构、表现和行为组成，即html、css和js。</p>\n</li>\n</ul>\n<h3 id=\"二-HTML\"><a href=\"#二-HTML\" class=\"headerlink\" title=\"二 HTML\"></a>二 HTML</h3><ul>\n<li>html：hypertext markup language,超文本标记语言：<ol>\n<li>不是一门编程语言，而是一门告诉浏览器如何组织页面的标记语言，决定了网页的结构；</li>\n<li>元素是html的基本单位，通常情况下，一个元素有开始标签、结束标签和内容构成；</li>\n<li>HTML标签不区分大小写，从可读性和一致性方面通常使用小写字母；</li>\n<li>元素按照性质可分成块级元素和内联元素两大类别；</li>\n<li>没有内容的元素称之为空元素；</li>\n<li>可以在开始标签中为元素添加属性，属性通常是一组由等号连接的名值对，值用引号包裹；</li>\n<li>当属性没有值或者其值为属性名本身，这样的属性称之为布尔属性；</li>\n</ol>\n</li>\n<li>完整的html页面的组成:   <ol>\n<li>文档类型声明<!doctype html>，h5声明，最短的有效的文档声明；</li>\n<li>html根元素，包裹了一个完整html页面；</li>\n<li>head元素，包裹了所有想包含在html页面中但不想在页面中显示的内容，如标题、描述、关键字、字符集等；</li>\n<li>body元素，包裹了所有想在网页中显示的内容，如文本、图片、音频、视频等；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"三-HTML元素\"><a href=\"#三-HTML元素\" class=\"headerlink\" title=\"三 HTML元素\"></a>三 HTML元素</h3><ul>\n<li>元数据：meta</li>\n<li>标题和段落：h、p</li>\n<li>超链接和图片：a、img、figure、picture</li>\n<li>列表：ul、ol、dl</li>\n<li>实体：<code>&amp;amp; &amp;nbsp; &amp;lt; &amp;gt; &amp;copy; &amp;quote;</code></li>\n<li>表格：table、tr、td、th、colgroup、col、thead、tfoot、tbody、caption</li>\n<li>表单：form、input（text、password、file、hidden、checkbox、radio、email、number、tel、search）、textarea、select、fieldset</li>\n<li>语气：em、strong、ins、del、small</li>\n<li>引用：blockquote、q、cite</li>\n<li>缩略语和上下标：abbr、sup、sub</li>\n<li>代码：code、pre</li>\n<li>换行和水平分割线：br、hr</li>\n<li>布局：div、span</li>\n<li>语义布局：header、nav、main、section、article、aside、footer</li>\n<li>音频和视频：audio、video</li>\n</ul>\n<h3 id=\"四-CSS\"><a href=\"#四-CSS\" class=\"headerlink\" title=\"四 CSS\"></a>四 CSS</h3><ul>\n<li>css：cascading style sheets，层叠样式表：<ol>\n<li>指定文档如何呈现给用户的语言，用来定义文档的样式和布局，决定了网页的表现；</li>\n<li>css的基本单位就是一个个css规则，一个规则由选择器和css声明块组成（与值配对的属性称之为css声明）；</li>\n<li>css工作原理： 浏览器加载html并解析，然后加载css并解析，在然后将解析后的html和css在dom树上进行渲染，最后呈现给用户；</li>\n<li>添加样式表的方式：外部样式表、内部样式表和内联样式表；<h3 id=\"五-css选择器\"><a href=\"#五-css选择器\" class=\"headerlink\" title=\"五 css选择器\"></a>五 css选择器</h3></li>\n</ol>\n</li>\n<li>基本选择器：元素选择器、类选择器、ID选择器、通用选择器、分组选择器；</li>\n<li>关系选择器：子元素选择器（&gt;）、后代选择器、交集选择器、兄弟选择器(+、~)</li>\n<li>属性选择器：E[att]、E[att=”val”]、E[att^=”val”]、E[att$=”val”]、E[att*=”val”]、E[att|=”val”]、E[att~=”val”]</li>\n<li>伪类选择器：E:link、E:visited、E:hover、E:active、E:focus、E:not()、E:first-child、、E:nth-child(n)、E:nth-of-type(n)、E:empty、E:checked、E:disabled、E:enabled</li>\n<li>伪元素选择器：E:after/E::after、E:before/E::before</li>\n</ul>\n<h3 id=\"六css中单位\"><a href=\"#六css中单位\" class=\"headerlink\" title=\"六css中单位\"></a>六css中单位</h3><ul>\n<li>长度单位：px、em、百分比</li>\n<li>颜色单位：rgb、代表颜色的单词、十六进制<h3 id=\"七-规则优先级\"><a href=\"#七-规则优先级\" class=\"headerlink\" title=\"七 规则优先级\"></a>七 规则优先级</h3></li>\n<li>在外部添加样式的情况下，id选择器&gt;类选择器、伪类选择器、属性选择器&gt;元素选择器、伪元素选择器</li>\n</ul>\n"},{"title":"JVM初识","date":"2019-08-29T05:01:43.000Z","_content":"### JVM内存模型\n- JVM是运行在操作系统之上的，它与硬件没有直接的交互；\n{% asset_img jvm.png JVM模型 %}\n- 堆空间和方法区被线程共享;程序计数器、虚拟机栈和本地方法栈被线程私有；\n- 常见的JVM实现有SUN hotspot、BEA jrockit、IBM j9；\n\n### 类装载器\n- 负责加载class文件，class文件在文件开头有特定的文件标示，并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定;\n- 装载过程：\n\t1. 加载：查找并加载字节码文件到内存\n\t\t- 准确说是将字节码文件的内容加载到运行时数据区的方法区中，并在内存中创建一个Class对象。\n\t2. 连接\n\t\t- 验证：验证字节码文件的正确性\n\t\t- 准备：为静态变量分配空间并进行默认初始化\n\t\t- 解析：将符号引用转变为直接引用\n\t3. 初始化：为静态变量进行真实初始化\n\t\t- 只有在首次主\n- 装载器分类\n{% asset_img classloader.png 类装载器继承体系 %}\n- 虚拟机自带的加载器:\n\t启动类加载器（Bootstrap）C++\n\t扩展类加载器（Extension）Java\n\t应用程序类加载器（App）Java\n\t也叫系统类加载器，加载当前应用的classpath的所有类\n- 用户自定义加载器  Java.lang.ClassLoader的子类，用户可以定制类的加载方式;\n\n### 执行引擎\n- Execution Engine执行引擎负责解释命令，提交操作系统执行（java、javac）;\n\n### Native Interface本地接口\n- Java语言本身不能对操作系统底层进行访问和操作，但是可以通过JNI接口调用其他语言来实现对底层的访问;\n\n### 本地方法栈\n- 登记native方法，在Execution Engine执行时加载本地方法库;\n\n### PC寄存器\n- 每个线程都有一个程序计数器，是线程私有的,就是一个指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址,也即将要执行的指令代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记;\n\n### 虚拟机栈\n- 主管Java程序的运行，在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程一结束该栈就Over，生命周期和线程一致，是线程私有的。基本类型的变量、实例方法、引用类型变量都是在函数的栈内存中分配。\n- java.lang.StackOverflowError：当线程请求深度大于虚拟机允许的深度时发生异常;\n\n### 方法区\n- 方法区是线程共享的，通常用来保存装载的类的元结构信息。\n比如：运行时常量池+静态变量+常量+字段+方法字节码+在类/实例/接口初始化用到的特殊方法等。\n- 通常和永久区关联在一起(Java7之前)，但具体的跟JVM的实现和版本有关。\n\n### 堆空间\n- 一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行。\n- 堆内存逻辑上分为三部分：新生+养老+永久（JDK8以前）;\n{% asset_img heap.png 堆内存模型 %}\n#### 新生区\n- 新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命；\n- 新生区又分为两部分：伊甸区（Eden）和幸存者区（Survivor），所有的类都是在伊甸区被new出来的。幸存区有两个： 0区（Survivor 0 space）和1区（Survivor 1 space）;\n- 当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(MinorGC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。然后将伊甸园中的剩余对象移动到幸存0区.若幸存0区也满了，再对该区进行垃圾回收，然后移动到1区。那如果1区也满了呢？再移动到养老区。若养老区也满了，那么这个时候将产生MajorGC（FullGC），进行养老区的内存清理。若养老区执行了FullGC之后发现依然无法进行对象的保存，就会产生OOM异常“OutOfMemoryError”。\n- 如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够。原因有二：\n\t1. Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。(初始大小一般是物理内存1/64,最大1/4)\n\t2. 代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）。\n\t3. 新生代调整参数：-Xmn；永久代调整参数：-XX:PermSize和-XX:MaxPermSize。\n\t4. -XX:+PrintGCDetails  :输出GC处理日志。\n- 使用如下API获取JVM堆内存参数\n\t```\n\tlong maxMemory = Runtime.getRuntime().maxMemory() ;//返回 Java 虚拟机试图使用的最大内存量。\n\tlong totalMemory = Runtime.getRuntime().totalMemory() ;//返回 Java 虚拟机中的内存总量。\n\t```\n### JVM采用分代回收机制\n- 新生代使用复制算法copying，会浪费50%空间；\n- 年老代使用标记清除和标记整理算法mark-sweep（会产生不连续的内存碎片）和mark-compack；\n\n\n","source":"_posts/JVM初识.md","raw":"---\ntitle: JVM初识\ndate: 2019-08-29 13:01:43\ntags: jvm\ncategories: 学习笔记\n---\n### JVM内存模型\n- JVM是运行在操作系统之上的，它与硬件没有直接的交互；\n{% asset_img jvm.png JVM模型 %}\n- 堆空间和方法区被线程共享;程序计数器、虚拟机栈和本地方法栈被线程私有；\n- 常见的JVM实现有SUN hotspot、BEA jrockit、IBM j9；\n\n### 类装载器\n- 负责加载class文件，class文件在文件开头有特定的文件标示，并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定;\n- 装载过程：\n\t1. 加载：查找并加载字节码文件到内存\n\t\t- 准确说是将字节码文件的内容加载到运行时数据区的方法区中，并在内存中创建一个Class对象。\n\t2. 连接\n\t\t- 验证：验证字节码文件的正确性\n\t\t- 准备：为静态变量分配空间并进行默认初始化\n\t\t- 解析：将符号引用转变为直接引用\n\t3. 初始化：为静态变量进行真实初始化\n\t\t- 只有在首次主\n- 装载器分类\n{% asset_img classloader.png 类装载器继承体系 %}\n- 虚拟机自带的加载器:\n\t启动类加载器（Bootstrap）C++\n\t扩展类加载器（Extension）Java\n\t应用程序类加载器（App）Java\n\t也叫系统类加载器，加载当前应用的classpath的所有类\n- 用户自定义加载器  Java.lang.ClassLoader的子类，用户可以定制类的加载方式;\n\n### 执行引擎\n- Execution Engine执行引擎负责解释命令，提交操作系统执行（java、javac）;\n\n### Native Interface本地接口\n- Java语言本身不能对操作系统底层进行访问和操作，但是可以通过JNI接口调用其他语言来实现对底层的访问;\n\n### 本地方法栈\n- 登记native方法，在Execution Engine执行时加载本地方法库;\n\n### PC寄存器\n- 每个线程都有一个程序计数器，是线程私有的,就是一个指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址,也即将要执行的指令代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记;\n\n### 虚拟机栈\n- 主管Java程序的运行，在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程一结束该栈就Over，生命周期和线程一致，是线程私有的。基本类型的变量、实例方法、引用类型变量都是在函数的栈内存中分配。\n- java.lang.StackOverflowError：当线程请求深度大于虚拟机允许的深度时发生异常;\n\n### 方法区\n- 方法区是线程共享的，通常用来保存装载的类的元结构信息。\n比如：运行时常量池+静态变量+常量+字段+方法字节码+在类/实例/接口初始化用到的特殊方法等。\n- 通常和永久区关联在一起(Java7之前)，但具体的跟JVM的实现和版本有关。\n\n### 堆空间\n- 一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行。\n- 堆内存逻辑上分为三部分：新生+养老+永久（JDK8以前）;\n{% asset_img heap.png 堆内存模型 %}\n#### 新生区\n- 新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命；\n- 新生区又分为两部分：伊甸区（Eden）和幸存者区（Survivor），所有的类都是在伊甸区被new出来的。幸存区有两个： 0区（Survivor 0 space）和1区（Survivor 1 space）;\n- 当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(MinorGC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。然后将伊甸园中的剩余对象移动到幸存0区.若幸存0区也满了，再对该区进行垃圾回收，然后移动到1区。那如果1区也满了呢？再移动到养老区。若养老区也满了，那么这个时候将产生MajorGC（FullGC），进行养老区的内存清理。若养老区执行了FullGC之后发现依然无法进行对象的保存，就会产生OOM异常“OutOfMemoryError”。\n- 如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够。原因有二：\n\t1. Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。(初始大小一般是物理内存1/64,最大1/4)\n\t2. 代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）。\n\t3. 新生代调整参数：-Xmn；永久代调整参数：-XX:PermSize和-XX:MaxPermSize。\n\t4. -XX:+PrintGCDetails  :输出GC处理日志。\n- 使用如下API获取JVM堆内存参数\n\t```\n\tlong maxMemory = Runtime.getRuntime().maxMemory() ;//返回 Java 虚拟机试图使用的最大内存量。\n\tlong totalMemory = Runtime.getRuntime().totalMemory() ;//返回 Java 虚拟机中的内存总量。\n\t```\n### JVM采用分代回收机制\n- 新生代使用复制算法copying，会浪费50%空间；\n- 年老代使用标记清除和标记整理算法mark-sweep（会产生不连续的内存碎片）和mark-compack；\n\n\n","slug":"JVM初识","published":1,"updated":"2019-08-29T12:07:07.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8os7000dagtn5oin3uoo","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"JVM内存模型\"><a href=\"#JVM内存模型\" class=\"headerlink\" title=\"JVM内存模型\"></a>JVM内存模型</h3><ul>\n<li>JVM是运行在操作系统之上的，它与硬件没有直接的交互；<img src=\"/2019/08/29/JVM初识/jvm.png\" title=\"JVM模型\"></li>\n<li>堆空间和方法区被线程共享;程序计数器、虚拟机栈和本地方法栈被线程私有；</li>\n<li>常见的JVM实现有SUN hotspot、BEA jrockit、IBM j9；</li>\n</ul>\n<h3 id=\"类装载器\"><a href=\"#类装载器\" class=\"headerlink\" title=\"类装载器\"></a>类装载器</h3><ul>\n<li>负责加载class文件，class文件在文件开头有特定的文件标示，并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定;</li>\n<li>装载过程：<ol>\n<li>加载：查找并加载字节码文件到内存<ul>\n<li>准确说是将字节码文件的内容加载到运行时数据区的方法区中，并在内存中创建一个Class对象。</li>\n</ul>\n</li>\n<li>连接<ul>\n<li>验证：验证字节码文件的正确性</li>\n<li>准备：为静态变量分配空间并进行默认初始化</li>\n<li>解析：将符号引用转变为直接引用</li>\n</ul>\n</li>\n<li>初始化：为静态变量进行真实初始化<ul>\n<li>只有在首次主</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>装载器分类<img src=\"/2019/08/29/JVM初识/classloader.png\" title=\"类装载器继承体系\"></li>\n<li>虚拟机自带的加载器:<br>  启动类加载器（Bootstrap）C++<br>  扩展类加载器（Extension）Java<br>  应用程序类加载器（App）Java<br>  也叫系统类加载器，加载当前应用的classpath的所有类</li>\n<li>用户自定义加载器  Java.lang.ClassLoader的子类，用户可以定制类的加载方式;</li>\n</ul>\n<h3 id=\"执行引擎\"><a href=\"#执行引擎\" class=\"headerlink\" title=\"执行引擎\"></a>执行引擎</h3><ul>\n<li>Execution Engine执行引擎负责解释命令，提交操作系统执行（java、javac）;</li>\n</ul>\n<h3 id=\"Native-Interface本地接口\"><a href=\"#Native-Interface本地接口\" class=\"headerlink\" title=\"Native Interface本地接口\"></a>Native Interface本地接口</h3><ul>\n<li>Java语言本身不能对操作系统底层进行访问和操作，但是可以通过JNI接口调用其他语言来实现对底层的访问;</li>\n</ul>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><ul>\n<li>登记native方法，在Execution Engine执行时加载本地方法库;</li>\n</ul>\n<h3 id=\"PC寄存器\"><a href=\"#PC寄存器\" class=\"headerlink\" title=\"PC寄存器\"></a>PC寄存器</h3><ul>\n<li>每个线程都有一个程序计数器，是线程私有的,就是一个指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址,也即将要执行的指令代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记;</li>\n</ul>\n<h3 id=\"虚拟机栈\"><a href=\"#虚拟机栈\" class=\"headerlink\" title=\"虚拟机栈\"></a>虚拟机栈</h3><ul>\n<li>主管Java程序的运行，在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程一结束该栈就Over，生命周期和线程一致，是线程私有的。基本类型的变量、实例方法、引用类型变量都是在函数的栈内存中分配。</li>\n<li>java.lang.StackOverflowError：当线程请求深度大于虚拟机允许的深度时发生异常;</li>\n</ul>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><ul>\n<li>方法区是线程共享的，通常用来保存装载的类的元结构信息。<br>比如：运行时常量池+静态变量+常量+字段+方法字节码+在类/实例/接口初始化用到的特殊方法等。</li>\n<li>通常和永久区关联在一起(Java7之前)，但具体的跟JVM的实现和版本有关。</li>\n</ul>\n<h3 id=\"堆空间\"><a href=\"#堆空间\" class=\"headerlink\" title=\"堆空间\"></a>堆空间</h3><ul>\n<li>一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行。</li>\n<li>堆内存逻辑上分为三部分：新生+养老+永久（JDK8以前）;<img src=\"/2019/08/29/JVM初识/heap.png\" title=\"堆内存模型\">\n<h4 id=\"新生区\"><a href=\"#新生区\" class=\"headerlink\" title=\"新生区\"></a>新生区</h4></li>\n<li>新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命；</li>\n<li>新生区又分为两部分：伊甸区（Eden）和幸存者区（Survivor），所有的类都是在伊甸区被new出来的。幸存区有两个： 0区（Survivor 0 space）和1区（Survivor 1 space）;</li>\n<li>当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(MinorGC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。然后将伊甸园中的剩余对象移动到幸存0区.若幸存0区也满了，再对该区进行垃圾回收，然后移动到1区。那如果1区也满了呢？再移动到养老区。若养老区也满了，那么这个时候将产生MajorGC（FullGC），进行养老区的内存清理。若养老区执行了FullGC之后发现依然无法进行对象的保存，就会产生OOM异常“OutOfMemoryError”。</li>\n<li>如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够。原因有二：<ol>\n<li>Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。(初始大小一般是物理内存1/64,最大1/4)</li>\n<li>代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）。</li>\n<li>新生代调整参数：-Xmn；永久代调整参数：-XX:PermSize和-XX:MaxPermSize。</li>\n<li>-XX:+PrintGCDetails  :输出GC处理日志。</li>\n</ol>\n</li>\n<li>使用如下API获取JVM堆内存参数  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long maxMemory = Runtime.getRuntime().maxMemory() ;//返回 Java 虚拟机试图使用的最大内存量。</span><br><span class=\"line\">long totalMemory = Runtime.getRuntime().totalMemory() ;//返回 Java 虚拟机中的内存总量。</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"JVM采用分代回收机制\"><a href=\"#JVM采用分代回收机制\" class=\"headerlink\" title=\"JVM采用分代回收机制\"></a>JVM采用分代回收机制</h3><ul>\n<li>新生代使用复制算法copying，会浪费50%空间；</li>\n<li>年老代使用标记清除和标记整理算法mark-sweep（会产生不连续的内存碎片）和mark-compack；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JVM内存模型\"><a href=\"#JVM内存模型\" class=\"headerlink\" title=\"JVM内存模型\"></a>JVM内存模型</h3><ul>\n<li>JVM是运行在操作系统之上的，它与硬件没有直接的交互；<img src=\"/2019/08/29/JVM初识/jvm.png\" title=\"JVM模型\"></li>\n<li>堆空间和方法区被线程共享;程序计数器、虚拟机栈和本地方法栈被线程私有；</li>\n<li>常见的JVM实现有SUN hotspot、BEA jrockit、IBM j9；</li>\n</ul>\n<h3 id=\"类装载器\"><a href=\"#类装载器\" class=\"headerlink\" title=\"类装载器\"></a>类装载器</h3><ul>\n<li>负责加载class文件，class文件在文件开头有特定的文件标示，并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定;</li>\n<li>装载过程：<ol>\n<li>加载：查找并加载字节码文件到内存<ul>\n<li>准确说是将字节码文件的内容加载到运行时数据区的方法区中，并在内存中创建一个Class对象。</li>\n</ul>\n</li>\n<li>连接<ul>\n<li>验证：验证字节码文件的正确性</li>\n<li>准备：为静态变量分配空间并进行默认初始化</li>\n<li>解析：将符号引用转变为直接引用</li>\n</ul>\n</li>\n<li>初始化：为静态变量进行真实初始化<ul>\n<li>只有在首次主</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>装载器分类<img src=\"/2019/08/29/JVM初识/classloader.png\" title=\"类装载器继承体系\"></li>\n<li>虚拟机自带的加载器:<br>  启动类加载器（Bootstrap）C++<br>  扩展类加载器（Extension）Java<br>  应用程序类加载器（App）Java<br>  也叫系统类加载器，加载当前应用的classpath的所有类</li>\n<li>用户自定义加载器  Java.lang.ClassLoader的子类，用户可以定制类的加载方式;</li>\n</ul>\n<h3 id=\"执行引擎\"><a href=\"#执行引擎\" class=\"headerlink\" title=\"执行引擎\"></a>执行引擎</h3><ul>\n<li>Execution Engine执行引擎负责解释命令，提交操作系统执行（java、javac）;</li>\n</ul>\n<h3 id=\"Native-Interface本地接口\"><a href=\"#Native-Interface本地接口\" class=\"headerlink\" title=\"Native Interface本地接口\"></a>Native Interface本地接口</h3><ul>\n<li>Java语言本身不能对操作系统底层进行访问和操作，但是可以通过JNI接口调用其他语言来实现对底层的访问;</li>\n</ul>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><ul>\n<li>登记native方法，在Execution Engine执行时加载本地方法库;</li>\n</ul>\n<h3 id=\"PC寄存器\"><a href=\"#PC寄存器\" class=\"headerlink\" title=\"PC寄存器\"></a>PC寄存器</h3><ul>\n<li>每个线程都有一个程序计数器，是线程私有的,就是一个指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址,也即将要执行的指令代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记;</li>\n</ul>\n<h3 id=\"虚拟机栈\"><a href=\"#虚拟机栈\" class=\"headerlink\" title=\"虚拟机栈\"></a>虚拟机栈</h3><ul>\n<li>主管Java程序的运行，在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程一结束该栈就Over，生命周期和线程一致，是线程私有的。基本类型的变量、实例方法、引用类型变量都是在函数的栈内存中分配。</li>\n<li>java.lang.StackOverflowError：当线程请求深度大于虚拟机允许的深度时发生异常;</li>\n</ul>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><ul>\n<li>方法区是线程共享的，通常用来保存装载的类的元结构信息。<br>比如：运行时常量池+静态变量+常量+字段+方法字节码+在类/实例/接口初始化用到的特殊方法等。</li>\n<li>通常和永久区关联在一起(Java7之前)，但具体的跟JVM的实现和版本有关。</li>\n</ul>\n<h3 id=\"堆空间\"><a href=\"#堆空间\" class=\"headerlink\" title=\"堆空间\"></a>堆空间</h3><ul>\n<li>一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行。</li>\n<li>堆内存逻辑上分为三部分：新生+养老+永久（JDK8以前）;<img src=\"/2019/08/29/JVM初识/heap.png\" title=\"堆内存模型\">\n<h4 id=\"新生区\"><a href=\"#新生区\" class=\"headerlink\" title=\"新生区\"></a>新生区</h4></li>\n<li>新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命；</li>\n<li>新生区又分为两部分：伊甸区（Eden）和幸存者区（Survivor），所有的类都是在伊甸区被new出来的。幸存区有两个： 0区（Survivor 0 space）和1区（Survivor 1 space）;</li>\n<li>当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(MinorGC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。然后将伊甸园中的剩余对象移动到幸存0区.若幸存0区也满了，再对该区进行垃圾回收，然后移动到1区。那如果1区也满了呢？再移动到养老区。若养老区也满了，那么这个时候将产生MajorGC（FullGC），进行养老区的内存清理。若养老区执行了FullGC之后发现依然无法进行对象的保存，就会产生OOM异常“OutOfMemoryError”。</li>\n<li>如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够。原因有二：<ol>\n<li>Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。(初始大小一般是物理内存1/64,最大1/4)</li>\n<li>代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）。</li>\n<li>新生代调整参数：-Xmn；永久代调整参数：-XX:PermSize和-XX:MaxPermSize。</li>\n<li>-XX:+PrintGCDetails  :输出GC处理日志。</li>\n</ol>\n</li>\n<li>使用如下API获取JVM堆内存参数  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long maxMemory = Runtime.getRuntime().maxMemory() ;//返回 Java 虚拟机试图使用的最大内存量。</span><br><span class=\"line\">long totalMemory = Runtime.getRuntime().totalMemory() ;//返回 Java 虚拟机中的内存总量。</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"JVM采用分代回收机制\"><a href=\"#JVM采用分代回收机制\" class=\"headerlink\" title=\"JVM采用分代回收机制\"></a>JVM采用分代回收机制</h3><ul>\n<li>新生代使用复制算法copying，会浪费50%空间；</li>\n<li>年老代使用标记清除和标记整理算法mark-sweep（会产生不连续的内存碎片）和mark-compack；</li>\n</ul>\n"},{"title":"Linux之Shell初识","date":"2019-08-29T06:32:27.000Z","_content":"### Shell概述\n> Shell是一个命令解释器，为用户提供一个向内核发送请求的界面；同时它还是解释执行的脚本语言。\n\n> Shell分为两大类，B家族Shell和C家族Shell，可以在/etc/shells中查看系统支持哪些Shell。\n\n### Shell语言\n##### 编写和执行\n> 脚本文件通常以\".sh\"后缀标记，脚本的开头要标注Shell类型\"#!/bin/bash\"。\n\n> 执行方式：赋予执行权限，也可以使用“bash xxx.sh”或者“sh xxx.sh”的方式执行。\n\n##### 注释\n> 单行注释“#”和多行注释“:!<<...!”\n\n##### 多命令的执行顺序\n> \";\"：使用分号连接多个命令，这些命令间没有关系，不管前面的命令是否正确执行后面的都会执行。\n\n> \"&&\"：使用逻辑与连接多个命令，只有前面的命令正确执行后面才执行。\n\n> \"||\"：使用逻辑或连接多个命令，只有前面的命令不正确后面才执行。\n\n##### Shell中变量\n> `set`：可以查看所有变量包括环境变量；`env`：可以查看所有环境变量。\n> `unset 变量名`：可以销毁一个变量；`$变量名`：可以使用一个变量。\n> `$(命令)`：可以将命令的结果当做变量的值。或者使用反引号也可以。   \n\n> 自定义变量\n- 格式：变量=值 （注意：等号两边没有空格）。\n- 使用readonly关键字声明静态变量，此时该变量不能被销毁。\n- `export 自定义变量`：可以将自定义变量提升为系统变量。\n\n> 系统变量（环境变量）\n- 系统变量名一般大写。\n- `source`或者`.` 可以重新加载配置文件。\n\n> 位置参数变量\n- 用来接受命令中的相应位置的参数。\n- `$n`：$0表示这条命令本身，$1-$9、$(10)、$(11)...表示第n个参数。\n- `$*`：表示所有的参数，将所有参数作为一个整个。\n- `$@`：也表示所有参数，将所有参数分别对待，常用在循环中。\n- `$#`：表示所有参数的个数。\n\n> 预定义变量\n- `$$`：表示当前进程的PID。\n- `$!`：表示后台进程中的最后一个进程的PID。\n- `$?`：表示一个命令的执行状态，0表示正确执行。\n\n##### 键盘输入\n> `read [选项] [变量]`    \n> 常用选项\n- -t：该命令的等待时间，单位是秒。\n- -p：给出提示信息。\n- -s：隐藏输入数据。\n- read -s -t 30 -p \"请输入你的年龄：\" age   \n\n##### 提取命令\n> `cut -d 分隔符 -f 指定列` ：按指定分隔符提取指定列，通常和grep配合使用。\n- cat /etc/passwd | grep /bin/bash | grep -v root | cut -d \":\" -f 1\n\n> `awk '条件1{动作1} 条件2{动作2}...' 文件`\n- 还是不太懂！！！\n\n##### sed命令（流编辑器）\n> 比vi更强大，用的不多，可以对管道符的结果进行编辑。\n- `sed [选项] '动作' 文件`\n- 还是不懂！！！\n\n##### 排序命令和统计命令\n> `sort`与`wc`\n\n##### 运算符\n> `$((运算式))`或者`$[运算式]`：可以使用这样的方式取得运算式的值。\n\n##### 判断符\n> `[ 判断式 ]`；注意中括号与判断式中有空格。\n\n> 文件比较\n- `A -oq B`和`A -nq B`：判断文件A的修改时间是不是比B旧或者新。\n- `-e`、`-d`、`-f`：判断文件是否存在，存在并且是目录、存在并且是文件。\n- `A -ef B`：判断A文件与B文件的inode是否一致。\n\n> 数值比较\n- `-eq`、`-gt`、`-lt`、`ge`、`le`、`ne`。\n\n> 字符串比较\n- `str1==str2`或者`str1 = str2`：判断字符串相等，注意等号的空格。\n- `-n`或者`-z`：判断是否是空串，前者非空返回真，后者空返回真。\n- `str1!=str2`：不等判断。\n\n##### 流程控制\n> if结构\n\n```\nif [ 条件 ];then\n  程序片段\nfi\n```\n或者\n```\nif [ 条件 ]\n  then\n    程序片段\nfi\n```\n或者\n```\nif [ 条件 ]\n  then\n    程序片段\n  elif [ 条件 ]\n    then\n      程序片段\n  else\n    程序片段\nfi\n```\n> case结构\n\n```\ncase $变量名 in\n\"值1\")\n 等于值1的代码\n;;\n\"值2\")\n 等于值2的代码\n;;\n*)\n 不匹配的代码\n;;\nesac\n```\n\n> for结构\n\n```\nfor 变量 in 值1 值2 值3 ...\ndo\n  程序片段\ndone\n```\n或者\n```\nfor((初始值;条件;增量))\ndo\n  程序片段\ndone\n```\n\n> while结结构\n\n```\nwhile [ 条件式 ]\ndo\n 程序片段\ndone\n```\n\n##### 函数\n> 系统函数    \n> basename [filepath] [suffix] ：取得filepath路径中的文件名并排除suffix后缀\n- basename /home/aaa/bbb.txt .txt   结果是bbb\n- basename /home/aaa/bbb.text\t结果是bbb.txt\n\n> dirname [filepath] :取得filepath路径的目录部分\n- dirname /home/aaa/bbb.txt\t结果是/home/aaa\n\n> 自定义函数\n```\n[function] functionname(){  \n 函数体  \n [return xxx]  \n}   \n```\n\n### 综合案例\n> 要求\n\t1. 每天凌晨2：10备份数据库mydb到/data/backup/db\n\t2. 备份开始和结束要有提示信息\n\t3. 备份后的文件以备份时间作为文件名，并打包*.tar.gz\n\t4. 备份的同时检查有10天前的备份，如果有删除\n\n> 代码\n\n```\n#!/bin/bash     \n\n#定义备份目录\nBACKUP=/data/backup/db\n#获取当前系统时间\nNOWDATE=$(date +%Y_%m_%d_%H%M%S)\n#定义数据库的主机名\nDBHOST=192.168.238.133\n#定义数据库的端口\nDBPORT=3306\n#定义数据库的用户名\nDBUSER=root\n#定义数据库的密码\nDBPWD=root\n#定义要备份的数据库\nDBNAME=mydb\n\necho \"=====开始备份=====\"\n#确保备份路径存在,路径不存在或者不是目录就创建一个目录\nif [ ! -d \"$DACKUP/$NOWDATE\" ]\nthen\n  mkdir -p \"$DACKUP/$NOWDATE\"\n  echo \"备份文件绝对路径为 $DACKUP/$NOWDATE.tar.gz\"\nfi\n\n#进行mysql数据库的冷备份,比正常备份多了一个压缩（即 | gzip部分且不能直接使用tar）\nmysqldump -h$DBHOST -P$DBPORT -u$DBUSER -p$DBPWD $DBNAME | gzip >  $DACKUP/$NOWDATE/$NOWDATE.sql.gz\n#切换到备份目录\ncd $DACKUP\n#进行打包操作\ntar -zcvf $NOWDATE.tar.gz  $NOWDATE\n#删除临时的目录\nrm -rf ./$NOWDATE\n\n#找到备份目录下最后修改时间大于10天并且以.tar.gz结尾的文件进行删除\nfind $DACKUP -mtime +10 -a -name \"*.tar.gz\" -exec rm -rf {} \\;\necho \"=====备份完毕=====\"\n```\n\n","source":"_posts/Linux之Shell初识.md","raw":"---\ntitle: Linux之Shell初识\ndate: 2019-08-29 14:32:27\ntags: linux\ncategories: 学习笔记\n---\n### Shell概述\n> Shell是一个命令解释器，为用户提供一个向内核发送请求的界面；同时它还是解释执行的脚本语言。\n\n> Shell分为两大类，B家族Shell和C家族Shell，可以在/etc/shells中查看系统支持哪些Shell。\n\n### Shell语言\n##### 编写和执行\n> 脚本文件通常以\".sh\"后缀标记，脚本的开头要标注Shell类型\"#!/bin/bash\"。\n\n> 执行方式：赋予执行权限，也可以使用“bash xxx.sh”或者“sh xxx.sh”的方式执行。\n\n##### 注释\n> 单行注释“#”和多行注释“:!<<...!”\n\n##### 多命令的执行顺序\n> \";\"：使用分号连接多个命令，这些命令间没有关系，不管前面的命令是否正确执行后面的都会执行。\n\n> \"&&\"：使用逻辑与连接多个命令，只有前面的命令正确执行后面才执行。\n\n> \"||\"：使用逻辑或连接多个命令，只有前面的命令不正确后面才执行。\n\n##### Shell中变量\n> `set`：可以查看所有变量包括环境变量；`env`：可以查看所有环境变量。\n> `unset 变量名`：可以销毁一个变量；`$变量名`：可以使用一个变量。\n> `$(命令)`：可以将命令的结果当做变量的值。或者使用反引号也可以。   \n\n> 自定义变量\n- 格式：变量=值 （注意：等号两边没有空格）。\n- 使用readonly关键字声明静态变量，此时该变量不能被销毁。\n- `export 自定义变量`：可以将自定义变量提升为系统变量。\n\n> 系统变量（环境变量）\n- 系统变量名一般大写。\n- `source`或者`.` 可以重新加载配置文件。\n\n> 位置参数变量\n- 用来接受命令中的相应位置的参数。\n- `$n`：$0表示这条命令本身，$1-$9、$(10)、$(11)...表示第n个参数。\n- `$*`：表示所有的参数，将所有参数作为一个整个。\n- `$@`：也表示所有参数，将所有参数分别对待，常用在循环中。\n- `$#`：表示所有参数的个数。\n\n> 预定义变量\n- `$$`：表示当前进程的PID。\n- `$!`：表示后台进程中的最后一个进程的PID。\n- `$?`：表示一个命令的执行状态，0表示正确执行。\n\n##### 键盘输入\n> `read [选项] [变量]`    \n> 常用选项\n- -t：该命令的等待时间，单位是秒。\n- -p：给出提示信息。\n- -s：隐藏输入数据。\n- read -s -t 30 -p \"请输入你的年龄：\" age   \n\n##### 提取命令\n> `cut -d 分隔符 -f 指定列` ：按指定分隔符提取指定列，通常和grep配合使用。\n- cat /etc/passwd | grep /bin/bash | grep -v root | cut -d \":\" -f 1\n\n> `awk '条件1{动作1} 条件2{动作2}...' 文件`\n- 还是不太懂！！！\n\n##### sed命令（流编辑器）\n> 比vi更强大，用的不多，可以对管道符的结果进行编辑。\n- `sed [选项] '动作' 文件`\n- 还是不懂！！！\n\n##### 排序命令和统计命令\n> `sort`与`wc`\n\n##### 运算符\n> `$((运算式))`或者`$[运算式]`：可以使用这样的方式取得运算式的值。\n\n##### 判断符\n> `[ 判断式 ]`；注意中括号与判断式中有空格。\n\n> 文件比较\n- `A -oq B`和`A -nq B`：判断文件A的修改时间是不是比B旧或者新。\n- `-e`、`-d`、`-f`：判断文件是否存在，存在并且是目录、存在并且是文件。\n- `A -ef B`：判断A文件与B文件的inode是否一致。\n\n> 数值比较\n- `-eq`、`-gt`、`-lt`、`ge`、`le`、`ne`。\n\n> 字符串比较\n- `str1==str2`或者`str1 = str2`：判断字符串相等，注意等号的空格。\n- `-n`或者`-z`：判断是否是空串，前者非空返回真，后者空返回真。\n- `str1!=str2`：不等判断。\n\n##### 流程控制\n> if结构\n\n```\nif [ 条件 ];then\n  程序片段\nfi\n```\n或者\n```\nif [ 条件 ]\n  then\n    程序片段\nfi\n```\n或者\n```\nif [ 条件 ]\n  then\n    程序片段\n  elif [ 条件 ]\n    then\n      程序片段\n  else\n    程序片段\nfi\n```\n> case结构\n\n```\ncase $变量名 in\n\"值1\")\n 等于值1的代码\n;;\n\"值2\")\n 等于值2的代码\n;;\n*)\n 不匹配的代码\n;;\nesac\n```\n\n> for结构\n\n```\nfor 变量 in 值1 值2 值3 ...\ndo\n  程序片段\ndone\n```\n或者\n```\nfor((初始值;条件;增量))\ndo\n  程序片段\ndone\n```\n\n> while结结构\n\n```\nwhile [ 条件式 ]\ndo\n 程序片段\ndone\n```\n\n##### 函数\n> 系统函数    \n> basename [filepath] [suffix] ：取得filepath路径中的文件名并排除suffix后缀\n- basename /home/aaa/bbb.txt .txt   结果是bbb\n- basename /home/aaa/bbb.text\t结果是bbb.txt\n\n> dirname [filepath] :取得filepath路径的目录部分\n- dirname /home/aaa/bbb.txt\t结果是/home/aaa\n\n> 自定义函数\n```\n[function] functionname(){  \n 函数体  \n [return xxx]  \n}   \n```\n\n### 综合案例\n> 要求\n\t1. 每天凌晨2：10备份数据库mydb到/data/backup/db\n\t2. 备份开始和结束要有提示信息\n\t3. 备份后的文件以备份时间作为文件名，并打包*.tar.gz\n\t4. 备份的同时检查有10天前的备份，如果有删除\n\n> 代码\n\n```\n#!/bin/bash     \n\n#定义备份目录\nBACKUP=/data/backup/db\n#获取当前系统时间\nNOWDATE=$(date +%Y_%m_%d_%H%M%S)\n#定义数据库的主机名\nDBHOST=192.168.238.133\n#定义数据库的端口\nDBPORT=3306\n#定义数据库的用户名\nDBUSER=root\n#定义数据库的密码\nDBPWD=root\n#定义要备份的数据库\nDBNAME=mydb\n\necho \"=====开始备份=====\"\n#确保备份路径存在,路径不存在或者不是目录就创建一个目录\nif [ ! -d \"$DACKUP/$NOWDATE\" ]\nthen\n  mkdir -p \"$DACKUP/$NOWDATE\"\n  echo \"备份文件绝对路径为 $DACKUP/$NOWDATE.tar.gz\"\nfi\n\n#进行mysql数据库的冷备份,比正常备份多了一个压缩（即 | gzip部分且不能直接使用tar）\nmysqldump -h$DBHOST -P$DBPORT -u$DBUSER -p$DBPWD $DBNAME | gzip >  $DACKUP/$NOWDATE/$NOWDATE.sql.gz\n#切换到备份目录\ncd $DACKUP\n#进行打包操作\ntar -zcvf $NOWDATE.tar.gz  $NOWDATE\n#删除临时的目录\nrm -rf ./$NOWDATE\n\n#找到备份目录下最后修改时间大于10天并且以.tar.gz结尾的文件进行删除\nfind $DACKUP -mtime +10 -a -name \"*.tar.gz\" -exec rm -rf {} \\;\necho \"=====备份完毕=====\"\n```\n\n","slug":"Linux之Shell初识","published":1,"updated":"2019-08-29T06:33:16.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8osc000hagtnh7r97tka","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"Shell概述\"><a href=\"#Shell概述\" class=\"headerlink\" title=\"Shell概述\"></a>Shell概述</h3><blockquote>\n<p>Shell是一个命令解释器，为用户提供一个向内核发送请求的界面；同时它还是解释执行的脚本语言。</p>\n</blockquote>\n<blockquote>\n<p>Shell分为两大类，B家族Shell和C家族Shell，可以在/etc/shells中查看系统支持哪些Shell。</p>\n</blockquote>\n<h3 id=\"Shell语言\"><a href=\"#Shell语言\" class=\"headerlink\" title=\"Shell语言\"></a>Shell语言</h3><h5 id=\"编写和执行\"><a href=\"#编写和执行\" class=\"headerlink\" title=\"编写和执行\"></a>编写和执行</h5><blockquote>\n<p>脚本文件通常以”.sh”后缀标记，脚本的开头要标注Shell类型”#!/bin/bash”。</p>\n</blockquote>\n<blockquote>\n<p>执行方式：赋予执行权限，也可以使用“bash xxx.sh”或者“sh xxx.sh”的方式执行。</p>\n</blockquote>\n<h5 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h5><blockquote>\n<p>单行注释“#”和多行注释“:!&lt;&lt;…!”</p>\n</blockquote>\n<h5 id=\"多命令的执行顺序\"><a href=\"#多命令的执行顺序\" class=\"headerlink\" title=\"多命令的执行顺序\"></a>多命令的执行顺序</h5><blockquote>\n<p>“;”：使用分号连接多个命令，这些命令间没有关系，不管前面的命令是否正确执行后面的都会执行。</p>\n</blockquote>\n<blockquote>\n<p>“&amp;&amp;”：使用逻辑与连接多个命令，只有前面的命令正确执行后面才执行。</p>\n</blockquote>\n<blockquote>\n<p>“||”：使用逻辑或连接多个命令，只有前面的命令不正确后面才执行。</p>\n</blockquote>\n<h5 id=\"Shell中变量\"><a href=\"#Shell中变量\" class=\"headerlink\" title=\"Shell中变量\"></a>Shell中变量</h5><blockquote>\n<p><code>set</code>：可以查看所有变量包括环境变量；<code>env</code>：可以查看所有环境变量。<br><code>unset 变量名</code>：可以销毁一个变量；<code>$变量名</code>：可以使用一个变量。<br><code>$(命令)</code>：可以将命令的结果当做变量的值。或者使用反引号也可以。   </p>\n</blockquote>\n<blockquote>\n<p>自定义变量</p>\n</blockquote>\n<ul>\n<li>格式：变量=值 （注意：等号两边没有空格）。</li>\n<li>使用readonly关键字声明静态变量，此时该变量不能被销毁。</li>\n<li><code>export 自定义变量</code>：可以将自定义变量提升为系统变量。</li>\n</ul>\n<blockquote>\n<p>系统变量（环境变量）</p>\n</blockquote>\n<ul>\n<li>系统变量名一般大写。</li>\n<li><code>source</code>或者<code>.</code> 可以重新加载配置文件。</li>\n</ul>\n<blockquote>\n<p>位置参数变量</p>\n</blockquote>\n<ul>\n<li>用来接受命令中的相应位置的参数。</li>\n<li><code>$n</code>：$0表示这条命令本身，$1-$9、$(10)、$(11)…表示第n个参数。</li>\n<li><code>$*</code>：表示所有的参数，将所有参数作为一个整个。</li>\n<li><code>$@</code>：也表示所有参数，将所有参数分别对待，常用在循环中。</li>\n<li><code>$#</code>：表示所有参数的个数。</li>\n</ul>\n<blockquote>\n<p>预定义变量</p>\n</blockquote>\n<ul>\n<li><code>$$</code>：表示当前进程的PID。</li>\n<li><code>$!</code>：表示后台进程中的最后一个进程的PID。</li>\n<li><code>$?</code>：表示一个命令的执行状态，0表示正确执行。</li>\n</ul>\n<h5 id=\"键盘输入\"><a href=\"#键盘输入\" class=\"headerlink\" title=\"键盘输入\"></a>键盘输入</h5><blockquote>\n<p><code>read [选项] [变量]</code><br>常用选项</p>\n</blockquote>\n<ul>\n<li>-t：该命令的等待时间，单位是秒。</li>\n<li>-p：给出提示信息。</li>\n<li>-s：隐藏输入数据。</li>\n<li>read -s -t 30 -p “请输入你的年龄：” age   </li>\n</ul>\n<h5 id=\"提取命令\"><a href=\"#提取命令\" class=\"headerlink\" title=\"提取命令\"></a>提取命令</h5><blockquote>\n<p><code>cut -d 分隔符 -f 指定列</code> ：按指定分隔符提取指定列，通常和grep配合使用。</p>\n</blockquote>\n<ul>\n<li>cat /etc/passwd | grep /bin/bash | grep -v root | cut -d “:” -f 1</li>\n</ul>\n<blockquote>\n<p><code>awk &#39;条件1{动作1} 条件2{动作2}...&#39; 文件</code></p>\n</blockquote>\n<ul>\n<li>还是不太懂！！！</li>\n</ul>\n<h5 id=\"sed命令（流编辑器）\"><a href=\"#sed命令（流编辑器）\" class=\"headerlink\" title=\"sed命令（流编辑器）\"></a>sed命令（流编辑器）</h5><blockquote>\n<p>比vi更强大，用的不多，可以对管道符的结果进行编辑。</p>\n</blockquote>\n<ul>\n<li><code>sed [选项] &#39;动作&#39; 文件</code></li>\n<li>还是不懂！！！</li>\n</ul>\n<h5 id=\"排序命令和统计命令\"><a href=\"#排序命令和统计命令\" class=\"headerlink\" title=\"排序命令和统计命令\"></a>排序命令和统计命令</h5><blockquote>\n<p><code>sort</code>与<code>wc</code></p>\n</blockquote>\n<h5 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h5><blockquote>\n<p><code>$((运算式))</code>或者<code>$[运算式]</code>：可以使用这样的方式取得运算式的值。</p>\n</blockquote>\n<h5 id=\"判断符\"><a href=\"#判断符\" class=\"headerlink\" title=\"判断符\"></a>判断符</h5><blockquote>\n<p><code>[ 判断式 ]</code>；注意中括号与判断式中有空格。</p>\n</blockquote>\n<blockquote>\n<p>文件比较</p>\n</blockquote>\n<ul>\n<li><code>A -oq B</code>和<code>A -nq B</code>：判断文件A的修改时间是不是比B旧或者新。</li>\n<li><code>-e</code>、<code>-d</code>、<code>-f</code>：判断文件是否存在，存在并且是目录、存在并且是文件。</li>\n<li><code>A -ef B</code>：判断A文件与B文件的inode是否一致。</li>\n</ul>\n<blockquote>\n<p>数值比较</p>\n</blockquote>\n<ul>\n<li><code>-eq</code>、<code>-gt</code>、<code>-lt</code>、<code>ge</code>、<code>le</code>、<code>ne</code>。</li>\n</ul>\n<blockquote>\n<p>字符串比较</p>\n</blockquote>\n<ul>\n<li><code>str1==str2</code>或者<code>str1 = str2</code>：判断字符串相等，注意等号的空格。</li>\n<li><code>-n</code>或者<code>-z</code>：判断是否是空串，前者非空返回真，后者空返回真。</li>\n<li><code>str1!=str2</code>：不等判断。</li>\n</ul>\n<h5 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h5><blockquote>\n<p>if结构</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ 条件 ];then</span><br><span class=\"line\">  程序片段</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ 条件 ]</span><br><span class=\"line\">  then</span><br><span class=\"line\">    程序片段</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ 条件 ]</span><br><span class=\"line\">  then</span><br><span class=\"line\">    程序片段</span><br><span class=\"line\">  elif [ 条件 ]</span><br><span class=\"line\">    then</span><br><span class=\"line\">      程序片段</span><br><span class=\"line\">  else</span><br><span class=\"line\">    程序片段</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>case结构</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case $变量名 in</span><br><span class=\"line\">&quot;值1&quot;)</span><br><span class=\"line\"> 等于值1的代码</span><br><span class=\"line\">;;</span><br><span class=\"line\">&quot;值2&quot;)</span><br><span class=\"line\"> 等于值2的代码</span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\"> 不匹配的代码</span><br><span class=\"line\">;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>for结构</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for 变量 in 值1 值2 值3 ...</span><br><span class=\"line\">do</span><br><span class=\"line\">  程序片段</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for((初始值;条件;增量))</span><br><span class=\"line\">do</span><br><span class=\"line\">  程序片段</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>while结结构</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while [ 条件式 ]</span><br><span class=\"line\">do</span><br><span class=\"line\"> 程序片段</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h5><blockquote>\n<p>系统函数<br>basename [filepath] [suffix] ：取得filepath路径中的文件名并排除suffix后缀</p>\n</blockquote>\n<ul>\n<li>basename /home/aaa/bbb.txt .txt   结果是bbb</li>\n<li>basename /home/aaa/bbb.text    结果是bbb.txt</li>\n</ul>\n<blockquote>\n<p>dirname [filepath] :取得filepath路径的目录部分</p>\n</blockquote>\n<ul>\n<li>dirname /home/aaa/bbb.txt    结果是/home/aaa</li>\n</ul>\n<blockquote>\n<p>自定义函数</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[function] functionname()&#123;  </span><br><span class=\"line\"> 函数体  </span><br><span class=\"line\"> [return xxx]  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"综合案例\"><a href=\"#综合案例\" class=\"headerlink\" title=\"综合案例\"></a>综合案例</h3><blockquote>\n<p>要求<br>    1. 每天凌晨2：10备份数据库mydb到/data/backup/db<br>    2. 备份开始和结束要有提示信息<br>    3. 备份后的文件以备份时间作为文件名，并打包*.tar.gz<br>    4. 备份的同时检查有10天前的备份，如果有删除</p>\n</blockquote>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash     </span><br><span class=\"line\"></span><br><span class=\"line\">#定义备份目录</span><br><span class=\"line\">BACKUP=/data/backup/db</span><br><span class=\"line\">#获取当前系统时间</span><br><span class=\"line\">NOWDATE=$(date +%Y_%m_%d_%H%M%S)</span><br><span class=\"line\">#定义数据库的主机名</span><br><span class=\"line\">DBHOST=192.168.238.133</span><br><span class=\"line\">#定义数据库的端口</span><br><span class=\"line\">DBPORT=3306</span><br><span class=\"line\">#定义数据库的用户名</span><br><span class=\"line\">DBUSER=root</span><br><span class=\"line\">#定义数据库的密码</span><br><span class=\"line\">DBPWD=root</span><br><span class=\"line\">#定义要备份的数据库</span><br><span class=\"line\">DBNAME=mydb</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;=====开始备份=====&quot;</span><br><span class=\"line\">#确保备份路径存在,路径不存在或者不是目录就创建一个目录</span><br><span class=\"line\">if [ ! -d &quot;$DACKUP/$NOWDATE&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">  mkdir -p &quot;$DACKUP/$NOWDATE&quot;</span><br><span class=\"line\">  echo &quot;备份文件绝对路径为 $DACKUP/$NOWDATE.tar.gz&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">#进行mysql数据库的冷备份,比正常备份多了一个压缩（即 | gzip部分且不能直接使用tar）</span><br><span class=\"line\">mysqldump -h$DBHOST -P$DBPORT -u$DBUSER -p$DBPWD $DBNAME | gzip &gt;  $DACKUP/$NOWDATE/$NOWDATE.sql.gz</span><br><span class=\"line\">#切换到备份目录</span><br><span class=\"line\">cd $DACKUP</span><br><span class=\"line\">#进行打包操作</span><br><span class=\"line\">tar -zcvf $NOWDATE.tar.gz  $NOWDATE</span><br><span class=\"line\">#删除临时的目录</span><br><span class=\"line\">rm -rf ./$NOWDATE</span><br><span class=\"line\"></span><br><span class=\"line\">#找到备份目录下最后修改时间大于10天并且以.tar.gz结尾的文件进行删除</span><br><span class=\"line\">find $DACKUP -mtime +10 -a -name &quot;*.tar.gz&quot; -exec rm -rf &#123;&#125; \\;</span><br><span class=\"line\">echo &quot;=====备份完毕=====&quot;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Shell概述\"><a href=\"#Shell概述\" class=\"headerlink\" title=\"Shell概述\"></a>Shell概述</h3><blockquote>\n<p>Shell是一个命令解释器，为用户提供一个向内核发送请求的界面；同时它还是解释执行的脚本语言。</p>\n</blockquote>\n<blockquote>\n<p>Shell分为两大类，B家族Shell和C家族Shell，可以在/etc/shells中查看系统支持哪些Shell。</p>\n</blockquote>\n<h3 id=\"Shell语言\"><a href=\"#Shell语言\" class=\"headerlink\" title=\"Shell语言\"></a>Shell语言</h3><h5 id=\"编写和执行\"><a href=\"#编写和执行\" class=\"headerlink\" title=\"编写和执行\"></a>编写和执行</h5><blockquote>\n<p>脚本文件通常以”.sh”后缀标记，脚本的开头要标注Shell类型”#!/bin/bash”。</p>\n</blockquote>\n<blockquote>\n<p>执行方式：赋予执行权限，也可以使用“bash xxx.sh”或者“sh xxx.sh”的方式执行。</p>\n</blockquote>\n<h5 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h5><blockquote>\n<p>单行注释“#”和多行注释“:!&lt;&lt;…!”</p>\n</blockquote>\n<h5 id=\"多命令的执行顺序\"><a href=\"#多命令的执行顺序\" class=\"headerlink\" title=\"多命令的执行顺序\"></a>多命令的执行顺序</h5><blockquote>\n<p>“;”：使用分号连接多个命令，这些命令间没有关系，不管前面的命令是否正确执行后面的都会执行。</p>\n</blockquote>\n<blockquote>\n<p>“&amp;&amp;”：使用逻辑与连接多个命令，只有前面的命令正确执行后面才执行。</p>\n</blockquote>\n<blockquote>\n<p>“||”：使用逻辑或连接多个命令，只有前面的命令不正确后面才执行。</p>\n</blockquote>\n<h5 id=\"Shell中变量\"><a href=\"#Shell中变量\" class=\"headerlink\" title=\"Shell中变量\"></a>Shell中变量</h5><blockquote>\n<p><code>set</code>：可以查看所有变量包括环境变量；<code>env</code>：可以查看所有环境变量。<br><code>unset 变量名</code>：可以销毁一个变量；<code>$变量名</code>：可以使用一个变量。<br><code>$(命令)</code>：可以将命令的结果当做变量的值。或者使用反引号也可以。   </p>\n</blockquote>\n<blockquote>\n<p>自定义变量</p>\n</blockquote>\n<ul>\n<li>格式：变量=值 （注意：等号两边没有空格）。</li>\n<li>使用readonly关键字声明静态变量，此时该变量不能被销毁。</li>\n<li><code>export 自定义变量</code>：可以将自定义变量提升为系统变量。</li>\n</ul>\n<blockquote>\n<p>系统变量（环境变量）</p>\n</blockquote>\n<ul>\n<li>系统变量名一般大写。</li>\n<li><code>source</code>或者<code>.</code> 可以重新加载配置文件。</li>\n</ul>\n<blockquote>\n<p>位置参数变量</p>\n</blockquote>\n<ul>\n<li>用来接受命令中的相应位置的参数。</li>\n<li><code>$n</code>：$0表示这条命令本身，$1-$9、$(10)、$(11)…表示第n个参数。</li>\n<li><code>$*</code>：表示所有的参数，将所有参数作为一个整个。</li>\n<li><code>$@</code>：也表示所有参数，将所有参数分别对待，常用在循环中。</li>\n<li><code>$#</code>：表示所有参数的个数。</li>\n</ul>\n<blockquote>\n<p>预定义变量</p>\n</blockquote>\n<ul>\n<li><code>$$</code>：表示当前进程的PID。</li>\n<li><code>$!</code>：表示后台进程中的最后一个进程的PID。</li>\n<li><code>$?</code>：表示一个命令的执行状态，0表示正确执行。</li>\n</ul>\n<h5 id=\"键盘输入\"><a href=\"#键盘输入\" class=\"headerlink\" title=\"键盘输入\"></a>键盘输入</h5><blockquote>\n<p><code>read [选项] [变量]</code><br>常用选项</p>\n</blockquote>\n<ul>\n<li>-t：该命令的等待时间，单位是秒。</li>\n<li>-p：给出提示信息。</li>\n<li>-s：隐藏输入数据。</li>\n<li>read -s -t 30 -p “请输入你的年龄：” age   </li>\n</ul>\n<h5 id=\"提取命令\"><a href=\"#提取命令\" class=\"headerlink\" title=\"提取命令\"></a>提取命令</h5><blockquote>\n<p><code>cut -d 分隔符 -f 指定列</code> ：按指定分隔符提取指定列，通常和grep配合使用。</p>\n</blockquote>\n<ul>\n<li>cat /etc/passwd | grep /bin/bash | grep -v root | cut -d “:” -f 1</li>\n</ul>\n<blockquote>\n<p><code>awk &#39;条件1{动作1} 条件2{动作2}...&#39; 文件</code></p>\n</blockquote>\n<ul>\n<li>还是不太懂！！！</li>\n</ul>\n<h5 id=\"sed命令（流编辑器）\"><a href=\"#sed命令（流编辑器）\" class=\"headerlink\" title=\"sed命令（流编辑器）\"></a>sed命令（流编辑器）</h5><blockquote>\n<p>比vi更强大，用的不多，可以对管道符的结果进行编辑。</p>\n</blockquote>\n<ul>\n<li><code>sed [选项] &#39;动作&#39; 文件</code></li>\n<li>还是不懂！！！</li>\n</ul>\n<h5 id=\"排序命令和统计命令\"><a href=\"#排序命令和统计命令\" class=\"headerlink\" title=\"排序命令和统计命令\"></a>排序命令和统计命令</h5><blockquote>\n<p><code>sort</code>与<code>wc</code></p>\n</blockquote>\n<h5 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h5><blockquote>\n<p><code>$((运算式))</code>或者<code>$[运算式]</code>：可以使用这样的方式取得运算式的值。</p>\n</blockquote>\n<h5 id=\"判断符\"><a href=\"#判断符\" class=\"headerlink\" title=\"判断符\"></a>判断符</h5><blockquote>\n<p><code>[ 判断式 ]</code>；注意中括号与判断式中有空格。</p>\n</blockquote>\n<blockquote>\n<p>文件比较</p>\n</blockquote>\n<ul>\n<li><code>A -oq B</code>和<code>A -nq B</code>：判断文件A的修改时间是不是比B旧或者新。</li>\n<li><code>-e</code>、<code>-d</code>、<code>-f</code>：判断文件是否存在，存在并且是目录、存在并且是文件。</li>\n<li><code>A -ef B</code>：判断A文件与B文件的inode是否一致。</li>\n</ul>\n<blockquote>\n<p>数值比较</p>\n</blockquote>\n<ul>\n<li><code>-eq</code>、<code>-gt</code>、<code>-lt</code>、<code>ge</code>、<code>le</code>、<code>ne</code>。</li>\n</ul>\n<blockquote>\n<p>字符串比较</p>\n</blockquote>\n<ul>\n<li><code>str1==str2</code>或者<code>str1 = str2</code>：判断字符串相等，注意等号的空格。</li>\n<li><code>-n</code>或者<code>-z</code>：判断是否是空串，前者非空返回真，后者空返回真。</li>\n<li><code>str1!=str2</code>：不等判断。</li>\n</ul>\n<h5 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h5><blockquote>\n<p>if结构</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ 条件 ];then</span><br><span class=\"line\">  程序片段</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ 条件 ]</span><br><span class=\"line\">  then</span><br><span class=\"line\">    程序片段</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ 条件 ]</span><br><span class=\"line\">  then</span><br><span class=\"line\">    程序片段</span><br><span class=\"line\">  elif [ 条件 ]</span><br><span class=\"line\">    then</span><br><span class=\"line\">      程序片段</span><br><span class=\"line\">  else</span><br><span class=\"line\">    程序片段</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>case结构</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case $变量名 in</span><br><span class=\"line\">&quot;值1&quot;)</span><br><span class=\"line\"> 等于值1的代码</span><br><span class=\"line\">;;</span><br><span class=\"line\">&quot;值2&quot;)</span><br><span class=\"line\"> 等于值2的代码</span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\"> 不匹配的代码</span><br><span class=\"line\">;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>for结构</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for 变量 in 值1 值2 值3 ...</span><br><span class=\"line\">do</span><br><span class=\"line\">  程序片段</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for((初始值;条件;增量))</span><br><span class=\"line\">do</span><br><span class=\"line\">  程序片段</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>while结结构</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while [ 条件式 ]</span><br><span class=\"line\">do</span><br><span class=\"line\"> 程序片段</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h5><blockquote>\n<p>系统函数<br>basename [filepath] [suffix] ：取得filepath路径中的文件名并排除suffix后缀</p>\n</blockquote>\n<ul>\n<li>basename /home/aaa/bbb.txt .txt   结果是bbb</li>\n<li>basename /home/aaa/bbb.text    结果是bbb.txt</li>\n</ul>\n<blockquote>\n<p>dirname [filepath] :取得filepath路径的目录部分</p>\n</blockquote>\n<ul>\n<li>dirname /home/aaa/bbb.txt    结果是/home/aaa</li>\n</ul>\n<blockquote>\n<p>自定义函数</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[function] functionname()&#123;  </span><br><span class=\"line\"> 函数体  </span><br><span class=\"line\"> [return xxx]  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"综合案例\"><a href=\"#综合案例\" class=\"headerlink\" title=\"综合案例\"></a>综合案例</h3><blockquote>\n<p>要求<br>    1. 每天凌晨2：10备份数据库mydb到/data/backup/db<br>    2. 备份开始和结束要有提示信息<br>    3. 备份后的文件以备份时间作为文件名，并打包*.tar.gz<br>    4. 备份的同时检查有10天前的备份，如果有删除</p>\n</blockquote>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash     </span><br><span class=\"line\"></span><br><span class=\"line\">#定义备份目录</span><br><span class=\"line\">BACKUP=/data/backup/db</span><br><span class=\"line\">#获取当前系统时间</span><br><span class=\"line\">NOWDATE=$(date +%Y_%m_%d_%H%M%S)</span><br><span class=\"line\">#定义数据库的主机名</span><br><span class=\"line\">DBHOST=192.168.238.133</span><br><span class=\"line\">#定义数据库的端口</span><br><span class=\"line\">DBPORT=3306</span><br><span class=\"line\">#定义数据库的用户名</span><br><span class=\"line\">DBUSER=root</span><br><span class=\"line\">#定义数据库的密码</span><br><span class=\"line\">DBPWD=root</span><br><span class=\"line\">#定义要备份的数据库</span><br><span class=\"line\">DBNAME=mydb</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;=====开始备份=====&quot;</span><br><span class=\"line\">#确保备份路径存在,路径不存在或者不是目录就创建一个目录</span><br><span class=\"line\">if [ ! -d &quot;$DACKUP/$NOWDATE&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">  mkdir -p &quot;$DACKUP/$NOWDATE&quot;</span><br><span class=\"line\">  echo &quot;备份文件绝对路径为 $DACKUP/$NOWDATE.tar.gz&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">#进行mysql数据库的冷备份,比正常备份多了一个压缩（即 | gzip部分且不能直接使用tar）</span><br><span class=\"line\">mysqldump -h$DBHOST -P$DBPORT -u$DBUSER -p$DBPWD $DBNAME | gzip &gt;  $DACKUP/$NOWDATE/$NOWDATE.sql.gz</span><br><span class=\"line\">#切换到备份目录</span><br><span class=\"line\">cd $DACKUP</span><br><span class=\"line\">#进行打包操作</span><br><span class=\"line\">tar -zcvf $NOWDATE.tar.gz  $NOWDATE</span><br><span class=\"line\">#删除临时的目录</span><br><span class=\"line\">rm -rf ./$NOWDATE</span><br><span class=\"line\"></span><br><span class=\"line\">#找到备份目录下最后修改时间大于10天并且以.tar.gz结尾的文件进行删除</span><br><span class=\"line\">find $DACKUP -mtime +10 -a -name &quot;*.tar.gz&quot; -exec rm -rf &#123;&#125; \\;</span><br><span class=\"line\">echo &quot;=====备份完毕=====&quot;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Linux概述","date":"2019-08-29T06:32:00.000Z","_content":"### 一、科普知识\n##### 操作系统(operating system)\n  > 操作系统就是一个可以直接操作硬件的特殊的软件，是具有如下作用的软件。\n  - 管理和操作硬件设备。\n  - 将对硬件的操作封装成一个又一个的系统调用供其他应用程序使用。\n\n  > 针对应用领域的不同可以将操作系统分成桌面、服务器、嵌入式和移动设备四大类。\n  - 桌面操作系统（desktop OS）：Windows、macOS、Linux。\n  - 服务器操作系统（server OS）：Linux、Windows Server。\n  - 嵌入式操作系统（embedded OS）：Linux。\n  - 移动设备操作系统（mobile OS）：IOS、Android。\n\n  > 针对用户不同又分为单用户和多用户操作系统。\n  - 单用户操作系统：一台计算机同一时间只能由一个用户使用，该用户独享全部的硬件和软件资源。\n  - 多用户操作系统：一台计算机同一时间只能由多个用户使用，多个用户共享全部的硬件和软件资源。\n\n##### 网卡(netcard)与IP地址(internet protocol address)\n  > 网卡是一个专门负责网络通讯的硬件设置，就是那个连接网线的有线网卡和连接wifi的无线网。\n\n  > IP地址就是设置在网卡上的一个逻辑地址信息，它可以唯一标识一个网卡，同时它也是计算机在互联网上的一个唯一标识。\n\n  > IP地址由网络号段和主机号段组成，以“点-数法”表示，分成ABCDE五类；子网掩码的作用就是来区分网络号段和主机号段的；网关实质上也是一个具有路由功能的设备的IP地址。\n\n##### 域名(domain name)与端口号(port number)\n  > 域名说白了就是IP的别名，具有更好的易记性，通过域名也能准确定位到一台计算机；而端口号指的是TCP/IP协议的端口号，是用来区分网络上不同的应用程序的，通过域名和端口号可以准确的定位到一台计算机上的服务应用程序。\n\n### 二、细说Linux\n##### Linux的历史\n  > 1965年贝尔实验室(Bell Labs)、麻省理工(MIT)以及通用电气(GE)合作的MULTICS计划，欲要开发一套多用户的(multi-user)、多任务的(multi-processor)、多层次的(multi-level)操作系统,最终因各种原因失败。\n\n  > 1969年贝尔实验室的Ken Thompson为了能更好的玩“星际旅行”的游戏，历时一个月使用汇编写出了UNIX操作系统的原型；1970年设计出了B语言，使用该语言完成了第一个UNIX(UNICS的谐音)操作系统。\n\n  > 1971年同样酷爱“星际旅行”的Dennis Ritchie加入了Thompson的开发项目进行B语言的改造；到1972年的时候成功在B语言的基础上设计出了C语言；于1973年二人用C语言重写了UNIX操作系统。\n\n  > 1991年芬兰大学生Linus Torvalds在Minix的基础上开发了Linux的原型，之后利用GNU的bash开发环境和gcc编译工具编写了Linux内核；后来和众多爱好者共同完成了现如今强大的Linux操作系统。\n##### Linux的概述\n  > Linux就是指Linus's UNIX，它是一个开放源代码的UNIX，本意是Linux内核的意思，后来被人们称之为Linux操作系统。具有免费、稳定、安全的特点。\n\n  > Linux分为内核版本和发行版本。\n  - 内核版本：是Linux的核心，是运行程序和管理硬件设备的核心程序，官网地址为<https://www.kernel.org>。\n  - 发行版本：是封装了Linux内核的功能更加强大的Linux操作系统，又分成RedHat系列(如CentOS)和Debian系列(如Ubuntu)。\n  - CentOS官网：<https://www.centos.org>;Ubuntu官网：<https://www.ubuntu.com>;踩点和扫描网址：<https://www.netcraft.com>。\n\n##### Linux的文件系统和目录结构\n  > Linux的文件系统是一个层级的树状目录结构，没有盘符的概念，只有一个根目录“/”,所有文件都在它下面。\n\n  > Linux的主要目录介绍：\n  - /：根目录，一切目录的源头。一般只保存目录。\n  - /boot:启动目录，保存系统启动需要的文件，如内核文件/boot/vmlinuz、引导器/boot/grub。(<font color=\"red\">重点</font>)\n  - /bin、/usr/bin；可执行二进制文件目录，保存的是如ls、tar这样的普通命令，可供所有用户使用。(<font color=\"red\">重点</font>)\n  - /sbin、/usr/sbin：系统可执行二进制文件目录，保存跟系统管理相关命令，但该目录的命令只能是超级管理员使用。\n  - /etc：系统配置文件的默认存放目录，一般只存放配置文件，如/etc/inittab、/etc/init.d、/etc/sysconfig、/etc/fstab、/etc/issue。(<font color=\"red\">重点</font>)\n  - /home：系统默认的普通用户的家目录，如新建一个名为jmzc的用户，那么家目录就是/home/jmzc。(<font color=\"red\">重点</font>)\n  - /root：超级用户root的家目录。(<font color=\"red\">重点</font>)\n  - /lib、/usr/lib、/usr/local/lib：系统的函数库目录，程序执行需要额外调用的函数都保存在这里。\n  - /usr：全称是unix sofrware resource,系统软件资源目录，类似于windows中的Program Files目录。(<font color=\"red\">重点</font>)\n  - /mnt、/media：挂载目录，前者是用户临时挂着其他文件系统的目录，后者是系统自动识别的设备的默认挂载目录。(<font color=\"red\">重点</font>)\n  - /lost+fount：系统异常产生错误时，会将一些遗失的片段放到此目录中。\n  - /opt；安装第三方软件的目录；通常我们也会使用/usr/local目录作为第三方软件的安装目录。(<font color=\"red\">重点</font>)\n  - /proc:虚拟文件系统，该目录的文件只保存在内存中，如/proc/version、/proc/cpuinfo。\n  - /sys、/srv：和/proc目录一样都是跟系统内核相关的目录，非高手不要动它。\n  - /tmp：临时文件目录。\n  - /dev：硬件设备存放目录。(<font color=\"red\">重点</font>)\n  - /var：动态数据的存在目录，如，日志，邮件等。(<font color=\"red\">重点</font>)\n  - /selinux：全称security enhanced linux，安全增强子系统，类似于360防护。\n  - /dev/null、/dev/zero：2个特殊的目录，一个回收站，一个用于磁盘复制（dd命令）。\n### 三、使用Linux你需要知道的几个常识\n  > 1. linux中的内容都是以文件的形式保存的，包括硬件，即“在Linux中，一切皆文件”。\n  > 2. linux中的存储设置一般需要挂载之后才能使用。\n  > 3. Linux作为远程服务器时一般不允许关机，只能重启而且重启前最好同步数据并关闭服务。\n  > 4. Linux中的文件不是以后缀名来区分，而是用文件的权限来区分的。\n  > 5. linux作为服务器要定期的备份重要数据和日志。\n  > 6. 用户密码需要具有规范性、时效性、易记性和复杂性。\n  > 7. 通常不要直接使用系统预设用户“root”来登录，而要使用普通用户登录。\n\n","source":"_posts/Linux概述.md","raw":"---\ntitle: Linux概述\ndate: 2019-08-29 14:32:00\ntags: linux\ncategories: 学习笔记\n---\n### 一、科普知识\n##### 操作系统(operating system)\n  > 操作系统就是一个可以直接操作硬件的特殊的软件，是具有如下作用的软件。\n  - 管理和操作硬件设备。\n  - 将对硬件的操作封装成一个又一个的系统调用供其他应用程序使用。\n\n  > 针对应用领域的不同可以将操作系统分成桌面、服务器、嵌入式和移动设备四大类。\n  - 桌面操作系统（desktop OS）：Windows、macOS、Linux。\n  - 服务器操作系统（server OS）：Linux、Windows Server。\n  - 嵌入式操作系统（embedded OS）：Linux。\n  - 移动设备操作系统（mobile OS）：IOS、Android。\n\n  > 针对用户不同又分为单用户和多用户操作系统。\n  - 单用户操作系统：一台计算机同一时间只能由一个用户使用，该用户独享全部的硬件和软件资源。\n  - 多用户操作系统：一台计算机同一时间只能由多个用户使用，多个用户共享全部的硬件和软件资源。\n\n##### 网卡(netcard)与IP地址(internet protocol address)\n  > 网卡是一个专门负责网络通讯的硬件设置，就是那个连接网线的有线网卡和连接wifi的无线网。\n\n  > IP地址就是设置在网卡上的一个逻辑地址信息，它可以唯一标识一个网卡，同时它也是计算机在互联网上的一个唯一标识。\n\n  > IP地址由网络号段和主机号段组成，以“点-数法”表示，分成ABCDE五类；子网掩码的作用就是来区分网络号段和主机号段的；网关实质上也是一个具有路由功能的设备的IP地址。\n\n##### 域名(domain name)与端口号(port number)\n  > 域名说白了就是IP的别名，具有更好的易记性，通过域名也能准确定位到一台计算机；而端口号指的是TCP/IP协议的端口号，是用来区分网络上不同的应用程序的，通过域名和端口号可以准确的定位到一台计算机上的服务应用程序。\n\n### 二、细说Linux\n##### Linux的历史\n  > 1965年贝尔实验室(Bell Labs)、麻省理工(MIT)以及通用电气(GE)合作的MULTICS计划，欲要开发一套多用户的(multi-user)、多任务的(multi-processor)、多层次的(multi-level)操作系统,最终因各种原因失败。\n\n  > 1969年贝尔实验室的Ken Thompson为了能更好的玩“星际旅行”的游戏，历时一个月使用汇编写出了UNIX操作系统的原型；1970年设计出了B语言，使用该语言完成了第一个UNIX(UNICS的谐音)操作系统。\n\n  > 1971年同样酷爱“星际旅行”的Dennis Ritchie加入了Thompson的开发项目进行B语言的改造；到1972年的时候成功在B语言的基础上设计出了C语言；于1973年二人用C语言重写了UNIX操作系统。\n\n  > 1991年芬兰大学生Linus Torvalds在Minix的基础上开发了Linux的原型，之后利用GNU的bash开发环境和gcc编译工具编写了Linux内核；后来和众多爱好者共同完成了现如今强大的Linux操作系统。\n##### Linux的概述\n  > Linux就是指Linus's UNIX，它是一个开放源代码的UNIX，本意是Linux内核的意思，后来被人们称之为Linux操作系统。具有免费、稳定、安全的特点。\n\n  > Linux分为内核版本和发行版本。\n  - 内核版本：是Linux的核心，是运行程序和管理硬件设备的核心程序，官网地址为<https://www.kernel.org>。\n  - 发行版本：是封装了Linux内核的功能更加强大的Linux操作系统，又分成RedHat系列(如CentOS)和Debian系列(如Ubuntu)。\n  - CentOS官网：<https://www.centos.org>;Ubuntu官网：<https://www.ubuntu.com>;踩点和扫描网址：<https://www.netcraft.com>。\n\n##### Linux的文件系统和目录结构\n  > Linux的文件系统是一个层级的树状目录结构，没有盘符的概念，只有一个根目录“/”,所有文件都在它下面。\n\n  > Linux的主要目录介绍：\n  - /：根目录，一切目录的源头。一般只保存目录。\n  - /boot:启动目录，保存系统启动需要的文件，如内核文件/boot/vmlinuz、引导器/boot/grub。(<font color=\"red\">重点</font>)\n  - /bin、/usr/bin；可执行二进制文件目录，保存的是如ls、tar这样的普通命令，可供所有用户使用。(<font color=\"red\">重点</font>)\n  - /sbin、/usr/sbin：系统可执行二进制文件目录，保存跟系统管理相关命令，但该目录的命令只能是超级管理员使用。\n  - /etc：系统配置文件的默认存放目录，一般只存放配置文件，如/etc/inittab、/etc/init.d、/etc/sysconfig、/etc/fstab、/etc/issue。(<font color=\"red\">重点</font>)\n  - /home：系统默认的普通用户的家目录，如新建一个名为jmzc的用户，那么家目录就是/home/jmzc。(<font color=\"red\">重点</font>)\n  - /root：超级用户root的家目录。(<font color=\"red\">重点</font>)\n  - /lib、/usr/lib、/usr/local/lib：系统的函数库目录，程序执行需要额外调用的函数都保存在这里。\n  - /usr：全称是unix sofrware resource,系统软件资源目录，类似于windows中的Program Files目录。(<font color=\"red\">重点</font>)\n  - /mnt、/media：挂载目录，前者是用户临时挂着其他文件系统的目录，后者是系统自动识别的设备的默认挂载目录。(<font color=\"red\">重点</font>)\n  - /lost+fount：系统异常产生错误时，会将一些遗失的片段放到此目录中。\n  - /opt；安装第三方软件的目录；通常我们也会使用/usr/local目录作为第三方软件的安装目录。(<font color=\"red\">重点</font>)\n  - /proc:虚拟文件系统，该目录的文件只保存在内存中，如/proc/version、/proc/cpuinfo。\n  - /sys、/srv：和/proc目录一样都是跟系统内核相关的目录，非高手不要动它。\n  - /tmp：临时文件目录。\n  - /dev：硬件设备存放目录。(<font color=\"red\">重点</font>)\n  - /var：动态数据的存在目录，如，日志，邮件等。(<font color=\"red\">重点</font>)\n  - /selinux：全称security enhanced linux，安全增强子系统，类似于360防护。\n  - /dev/null、/dev/zero：2个特殊的目录，一个回收站，一个用于磁盘复制（dd命令）。\n### 三、使用Linux你需要知道的几个常识\n  > 1. linux中的内容都是以文件的形式保存的，包括硬件，即“在Linux中，一切皆文件”。\n  > 2. linux中的存储设置一般需要挂载之后才能使用。\n  > 3. Linux作为远程服务器时一般不允许关机，只能重启而且重启前最好同步数据并关闭服务。\n  > 4. Linux中的文件不是以后缀名来区分，而是用文件的权限来区分的。\n  > 5. linux作为服务器要定期的备份重要数据和日志。\n  > 6. 用户密码需要具有规范性、时效性、易记性和复杂性。\n  > 7. 通常不要直接使用系统预设用户“root”来登录，而要使用普通用户登录。\n\n","slug":"Linux概述","published":1,"updated":"2019-08-29T06:34:01.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8osf000kagtnanzu8ho6","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"一、科普知识\"><a href=\"#一、科普知识\" class=\"headerlink\" title=\"一、科普知识\"></a>一、科普知识</h3><h5 id=\"操作系统-operating-system\"><a href=\"#操作系统-operating-system\" class=\"headerlink\" title=\"操作系统(operating system)\"></a>操作系统(operating system)</h5><blockquote>\n<p>操作系统就是一个可以直接操作硬件的特殊的软件，是具有如下作用的软件。</p>\n</blockquote>\n<ul>\n<li><p>管理和操作硬件设备。</p>\n</li>\n<li><p>将对硬件的操作封装成一个又一个的系统调用供其他应用程序使用。</p>\n<blockquote>\n<p>针对应用领域的不同可以将操作系统分成桌面、服务器、嵌入式和移动设备四大类。</p>\n</blockquote>\n</li>\n<li><p>桌面操作系统（desktop OS）：Windows、macOS、Linux。</p>\n</li>\n<li><p>服务器操作系统（server OS）：Linux、Windows Server。</p>\n</li>\n<li><p>嵌入式操作系统（embedded OS）：Linux。</p>\n</li>\n<li><p>移动设备操作系统（mobile OS）：IOS、Android。</p>\n<blockquote>\n<p>针对用户不同又分为单用户和多用户操作系统。</p>\n</blockquote>\n</li>\n<li><p>单用户操作系统：一台计算机同一时间只能由一个用户使用，该用户独享全部的硬件和软件资源。</p>\n</li>\n<li><p>多用户操作系统：一台计算机同一时间只能由多个用户使用，多个用户共享全部的硬件和软件资源。</p>\n</li>\n</ul>\n<h5 id=\"网卡-netcard-与IP地址-internet-protocol-address\"><a href=\"#网卡-netcard-与IP地址-internet-protocol-address\" class=\"headerlink\" title=\"网卡(netcard)与IP地址(internet protocol address)\"></a>网卡(netcard)与IP地址(internet protocol address)</h5><blockquote>\n<p>网卡是一个专门负责网络通讯的硬件设置，就是那个连接网线的有线网卡和连接wifi的无线网。</p>\n</blockquote>\n<blockquote>\n<p>IP地址就是设置在网卡上的一个逻辑地址信息，它可以唯一标识一个网卡，同时它也是计算机在互联网上的一个唯一标识。</p>\n</blockquote>\n<blockquote>\n<p>IP地址由网络号段和主机号段组成，以“点-数法”表示，分成ABCDE五类；子网掩码的作用就是来区分网络号段和主机号段的；网关实质上也是一个具有路由功能的设备的IP地址。</p>\n</blockquote>\n<h5 id=\"域名-domain-name-与端口号-port-number\"><a href=\"#域名-domain-name-与端口号-port-number\" class=\"headerlink\" title=\"域名(domain name)与端口号(port number)\"></a>域名(domain name)与端口号(port number)</h5><blockquote>\n<p>域名说白了就是IP的别名，具有更好的易记性，通过域名也能准确定位到一台计算机；而端口号指的是TCP/IP协议的端口号，是用来区分网络上不同的应用程序的，通过域名和端口号可以准确的定位到一台计算机上的服务应用程序。</p>\n</blockquote>\n<h3 id=\"二、细说Linux\"><a href=\"#二、细说Linux\" class=\"headerlink\" title=\"二、细说Linux\"></a>二、细说Linux</h3><h5 id=\"Linux的历史\"><a href=\"#Linux的历史\" class=\"headerlink\" title=\"Linux的历史\"></a>Linux的历史</h5><blockquote>\n<p>1965年贝尔实验室(Bell Labs)、麻省理工(MIT)以及通用电气(GE)合作的MULTICS计划，欲要开发一套多用户的(multi-user)、多任务的(multi-processor)、多层次的(multi-level)操作系统,最终因各种原因失败。</p>\n</blockquote>\n<blockquote>\n<p>1969年贝尔实验室的Ken Thompson为了能更好的玩“星际旅行”的游戏，历时一个月使用汇编写出了UNIX操作系统的原型；1970年设计出了B语言，使用该语言完成了第一个UNIX(UNICS的谐音)操作系统。</p>\n</blockquote>\n<blockquote>\n<p>1971年同样酷爱“星际旅行”的Dennis Ritchie加入了Thompson的开发项目进行B语言的改造；到1972年的时候成功在B语言的基础上设计出了C语言；于1973年二人用C语言重写了UNIX操作系统。</p>\n</blockquote>\n<blockquote>\n<p>1991年芬兰大学生Linus Torvalds在Minix的基础上开发了Linux的原型，之后利用GNU的bash开发环境和gcc编译工具编写了Linux内核；后来和众多爱好者共同完成了现如今强大的Linux操作系统。</p>\n</blockquote>\n<h5 id=\"Linux的概述\"><a href=\"#Linux的概述\" class=\"headerlink\" title=\"Linux的概述\"></a>Linux的概述</h5><blockquote>\n<p>Linux就是指Linus’s UNIX，它是一个开放源代码的UNIX，本意是Linux内核的意思，后来被人们称之为Linux操作系统。具有免费、稳定、安全的特点。</p>\n</blockquote>\n<blockquote>\n<p>Linux分为内核版本和发行版本。</p>\n</blockquote>\n<ul>\n<li>内核版本：是Linux的核心，是运行程序和管理硬件设备的核心程序，官网地址为<a href=\"https://www.kernel.org\" target=\"_blank\" rel=\"noopener\">https://www.kernel.org</a>。</li>\n<li>发行版本：是封装了Linux内核的功能更加强大的Linux操作系统，又分成RedHat系列(如CentOS)和Debian系列(如Ubuntu)。</li>\n<li>CentOS官网：<a href=\"https://www.centos.org\" target=\"_blank\" rel=\"noopener\">https://www.centos.org</a>;Ubuntu官网：<a href=\"https://www.ubuntu.com\" target=\"_blank\" rel=\"noopener\">https://www.ubuntu.com</a>;踩点和扫描网址：<a href=\"https://www.netcraft.com\" target=\"_blank\" rel=\"noopener\">https://www.netcraft.com</a>。</li>\n</ul>\n<h5 id=\"Linux的文件系统和目录结构\"><a href=\"#Linux的文件系统和目录结构\" class=\"headerlink\" title=\"Linux的文件系统和目录结构\"></a>Linux的文件系统和目录结构</h5><blockquote>\n<p>Linux的文件系统是一个层级的树状目录结构，没有盘符的概念，只有一个根目录“/”,所有文件都在它下面。</p>\n</blockquote>\n<blockquote>\n<p>Linux的主要目录介绍：</p>\n</blockquote>\n<ul>\n<li>/：根目录，一切目录的源头。一般只保存目录。</li>\n<li>/boot:启动目录，保存系统启动需要的文件，如内核文件/boot/vmlinuz、引导器/boot/grub。(<font color=\"red\">重点</font>)</li>\n<li>/bin、/usr/bin；可执行二进制文件目录，保存的是如ls、tar这样的普通命令，可供所有用户使用。(<font color=\"red\">重点</font>)</li>\n<li>/sbin、/usr/sbin：系统可执行二进制文件目录，保存跟系统管理相关命令，但该目录的命令只能是超级管理员使用。</li>\n<li>/etc：系统配置文件的默认存放目录，一般只存放配置文件，如/etc/inittab、/etc/init.d、/etc/sysconfig、/etc/fstab、/etc/issue。(<font color=\"red\">重点</font>)</li>\n<li>/home：系统默认的普通用户的家目录，如新建一个名为jmzc的用户，那么家目录就是/home/jmzc。(<font color=\"red\">重点</font>)</li>\n<li>/root：超级用户root的家目录。(<font color=\"red\">重点</font>)</li>\n<li>/lib、/usr/lib、/usr/local/lib：系统的函数库目录，程序执行需要额外调用的函数都保存在这里。</li>\n<li>/usr：全称是unix sofrware resource,系统软件资源目录，类似于windows中的Program Files目录。(<font color=\"red\">重点</font>)</li>\n<li>/mnt、/media：挂载目录，前者是用户临时挂着其他文件系统的目录，后者是系统自动识别的设备的默认挂载目录。(<font color=\"red\">重点</font>)</li>\n<li>/lost+fount：系统异常产生错误时，会将一些遗失的片段放到此目录中。</li>\n<li>/opt；安装第三方软件的目录；通常我们也会使用/usr/local目录作为第三方软件的安装目录。(<font color=\"red\">重点</font>)</li>\n<li>/proc:虚拟文件系统，该目录的文件只保存在内存中，如/proc/version、/proc/cpuinfo。</li>\n<li>/sys、/srv：和/proc目录一样都是跟系统内核相关的目录，非高手不要动它。</li>\n<li>/tmp：临时文件目录。</li>\n<li>/dev：硬件设备存放目录。(<font color=\"red\">重点</font>)</li>\n<li>/var：动态数据的存在目录，如，日志，邮件等。(<font color=\"red\">重点</font>)</li>\n<li>/selinux：全称security enhanced linux，安全增强子系统，类似于360防护。</li>\n<li>/dev/null、/dev/zero：2个特殊的目录，一个回收站，一个用于磁盘复制（dd命令）。<h3 id=\"三、使用Linux你需要知道的几个常识\"><a href=\"#三、使用Linux你需要知道的几个常识\" class=\"headerlink\" title=\"三、使用Linux你需要知道的几个常识\"></a>三、使用Linux你需要知道的几个常识</h3><blockquote>\n<ol>\n<li>linux中的内容都是以文件的形式保存的，包括硬件，即“在Linux中，一切皆文件”。</li>\n<li>linux中的存储设置一般需要挂载之后才能使用。</li>\n<li>Linux作为远程服务器时一般不允许关机，只能重启而且重启前最好同步数据并关闭服务。</li>\n<li>Linux中的文件不是以后缀名来区分，而是用文件的权限来区分的。</li>\n<li>linux作为服务器要定期的备份重要数据和日志。</li>\n<li>用户密码需要具有规范性、时效性、易记性和复杂性。</li>\n<li>通常不要直接使用系统预设用户“root”来登录，而要使用普通用户登录。</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、科普知识\"><a href=\"#一、科普知识\" class=\"headerlink\" title=\"一、科普知识\"></a>一、科普知识</h3><h5 id=\"操作系统-operating-system\"><a href=\"#操作系统-operating-system\" class=\"headerlink\" title=\"操作系统(operating system)\"></a>操作系统(operating system)</h5><blockquote>\n<p>操作系统就是一个可以直接操作硬件的特殊的软件，是具有如下作用的软件。</p>\n</blockquote>\n<ul>\n<li><p>管理和操作硬件设备。</p>\n</li>\n<li><p>将对硬件的操作封装成一个又一个的系统调用供其他应用程序使用。</p>\n<blockquote>\n<p>针对应用领域的不同可以将操作系统分成桌面、服务器、嵌入式和移动设备四大类。</p>\n</blockquote>\n</li>\n<li><p>桌面操作系统（desktop OS）：Windows、macOS、Linux。</p>\n</li>\n<li><p>服务器操作系统（server OS）：Linux、Windows Server。</p>\n</li>\n<li><p>嵌入式操作系统（embedded OS）：Linux。</p>\n</li>\n<li><p>移动设备操作系统（mobile OS）：IOS、Android。</p>\n<blockquote>\n<p>针对用户不同又分为单用户和多用户操作系统。</p>\n</blockquote>\n</li>\n<li><p>单用户操作系统：一台计算机同一时间只能由一个用户使用，该用户独享全部的硬件和软件资源。</p>\n</li>\n<li><p>多用户操作系统：一台计算机同一时间只能由多个用户使用，多个用户共享全部的硬件和软件资源。</p>\n</li>\n</ul>\n<h5 id=\"网卡-netcard-与IP地址-internet-protocol-address\"><a href=\"#网卡-netcard-与IP地址-internet-protocol-address\" class=\"headerlink\" title=\"网卡(netcard)与IP地址(internet protocol address)\"></a>网卡(netcard)与IP地址(internet protocol address)</h5><blockquote>\n<p>网卡是一个专门负责网络通讯的硬件设置，就是那个连接网线的有线网卡和连接wifi的无线网。</p>\n</blockquote>\n<blockquote>\n<p>IP地址就是设置在网卡上的一个逻辑地址信息，它可以唯一标识一个网卡，同时它也是计算机在互联网上的一个唯一标识。</p>\n</blockquote>\n<blockquote>\n<p>IP地址由网络号段和主机号段组成，以“点-数法”表示，分成ABCDE五类；子网掩码的作用就是来区分网络号段和主机号段的；网关实质上也是一个具有路由功能的设备的IP地址。</p>\n</blockquote>\n<h5 id=\"域名-domain-name-与端口号-port-number\"><a href=\"#域名-domain-name-与端口号-port-number\" class=\"headerlink\" title=\"域名(domain name)与端口号(port number)\"></a>域名(domain name)与端口号(port number)</h5><blockquote>\n<p>域名说白了就是IP的别名，具有更好的易记性，通过域名也能准确定位到一台计算机；而端口号指的是TCP/IP协议的端口号，是用来区分网络上不同的应用程序的，通过域名和端口号可以准确的定位到一台计算机上的服务应用程序。</p>\n</blockquote>\n<h3 id=\"二、细说Linux\"><a href=\"#二、细说Linux\" class=\"headerlink\" title=\"二、细说Linux\"></a>二、细说Linux</h3><h5 id=\"Linux的历史\"><a href=\"#Linux的历史\" class=\"headerlink\" title=\"Linux的历史\"></a>Linux的历史</h5><blockquote>\n<p>1965年贝尔实验室(Bell Labs)、麻省理工(MIT)以及通用电气(GE)合作的MULTICS计划，欲要开发一套多用户的(multi-user)、多任务的(multi-processor)、多层次的(multi-level)操作系统,最终因各种原因失败。</p>\n</blockquote>\n<blockquote>\n<p>1969年贝尔实验室的Ken Thompson为了能更好的玩“星际旅行”的游戏，历时一个月使用汇编写出了UNIX操作系统的原型；1970年设计出了B语言，使用该语言完成了第一个UNIX(UNICS的谐音)操作系统。</p>\n</blockquote>\n<blockquote>\n<p>1971年同样酷爱“星际旅行”的Dennis Ritchie加入了Thompson的开发项目进行B语言的改造；到1972年的时候成功在B语言的基础上设计出了C语言；于1973年二人用C语言重写了UNIX操作系统。</p>\n</blockquote>\n<blockquote>\n<p>1991年芬兰大学生Linus Torvalds在Minix的基础上开发了Linux的原型，之后利用GNU的bash开发环境和gcc编译工具编写了Linux内核；后来和众多爱好者共同完成了现如今强大的Linux操作系统。</p>\n</blockquote>\n<h5 id=\"Linux的概述\"><a href=\"#Linux的概述\" class=\"headerlink\" title=\"Linux的概述\"></a>Linux的概述</h5><blockquote>\n<p>Linux就是指Linus’s UNIX，它是一个开放源代码的UNIX，本意是Linux内核的意思，后来被人们称之为Linux操作系统。具有免费、稳定、安全的特点。</p>\n</blockquote>\n<blockquote>\n<p>Linux分为内核版本和发行版本。</p>\n</blockquote>\n<ul>\n<li>内核版本：是Linux的核心，是运行程序和管理硬件设备的核心程序，官网地址为<a href=\"https://www.kernel.org\" target=\"_blank\" rel=\"noopener\">https://www.kernel.org</a>。</li>\n<li>发行版本：是封装了Linux内核的功能更加强大的Linux操作系统，又分成RedHat系列(如CentOS)和Debian系列(如Ubuntu)。</li>\n<li>CentOS官网：<a href=\"https://www.centos.org\" target=\"_blank\" rel=\"noopener\">https://www.centos.org</a>;Ubuntu官网：<a href=\"https://www.ubuntu.com\" target=\"_blank\" rel=\"noopener\">https://www.ubuntu.com</a>;踩点和扫描网址：<a href=\"https://www.netcraft.com\" target=\"_blank\" rel=\"noopener\">https://www.netcraft.com</a>。</li>\n</ul>\n<h5 id=\"Linux的文件系统和目录结构\"><a href=\"#Linux的文件系统和目录结构\" class=\"headerlink\" title=\"Linux的文件系统和目录结构\"></a>Linux的文件系统和目录结构</h5><blockquote>\n<p>Linux的文件系统是一个层级的树状目录结构，没有盘符的概念，只有一个根目录“/”,所有文件都在它下面。</p>\n</blockquote>\n<blockquote>\n<p>Linux的主要目录介绍：</p>\n</blockquote>\n<ul>\n<li>/：根目录，一切目录的源头。一般只保存目录。</li>\n<li>/boot:启动目录，保存系统启动需要的文件，如内核文件/boot/vmlinuz、引导器/boot/grub。(<font color=\"red\">重点</font>)</li>\n<li>/bin、/usr/bin；可执行二进制文件目录，保存的是如ls、tar这样的普通命令，可供所有用户使用。(<font color=\"red\">重点</font>)</li>\n<li>/sbin、/usr/sbin：系统可执行二进制文件目录，保存跟系统管理相关命令，但该目录的命令只能是超级管理员使用。</li>\n<li>/etc：系统配置文件的默认存放目录，一般只存放配置文件，如/etc/inittab、/etc/init.d、/etc/sysconfig、/etc/fstab、/etc/issue。(<font color=\"red\">重点</font>)</li>\n<li>/home：系统默认的普通用户的家目录，如新建一个名为jmzc的用户，那么家目录就是/home/jmzc。(<font color=\"red\">重点</font>)</li>\n<li>/root：超级用户root的家目录。(<font color=\"red\">重点</font>)</li>\n<li>/lib、/usr/lib、/usr/local/lib：系统的函数库目录，程序执行需要额外调用的函数都保存在这里。</li>\n<li>/usr：全称是unix sofrware resource,系统软件资源目录，类似于windows中的Program Files目录。(<font color=\"red\">重点</font>)</li>\n<li>/mnt、/media：挂载目录，前者是用户临时挂着其他文件系统的目录，后者是系统自动识别的设备的默认挂载目录。(<font color=\"red\">重点</font>)</li>\n<li>/lost+fount：系统异常产生错误时，会将一些遗失的片段放到此目录中。</li>\n<li>/opt；安装第三方软件的目录；通常我们也会使用/usr/local目录作为第三方软件的安装目录。(<font color=\"red\">重点</font>)</li>\n<li>/proc:虚拟文件系统，该目录的文件只保存在内存中，如/proc/version、/proc/cpuinfo。</li>\n<li>/sys、/srv：和/proc目录一样都是跟系统内核相关的目录，非高手不要动它。</li>\n<li>/tmp：临时文件目录。</li>\n<li>/dev：硬件设备存放目录。(<font color=\"red\">重点</font>)</li>\n<li>/var：动态数据的存在目录，如，日志，邮件等。(<font color=\"red\">重点</font>)</li>\n<li>/selinux：全称security enhanced linux，安全增强子系统，类似于360防护。</li>\n<li>/dev/null、/dev/zero：2个特殊的目录，一个回收站，一个用于磁盘复制（dd命令）。<h3 id=\"三、使用Linux你需要知道的几个常识\"><a href=\"#三、使用Linux你需要知道的几个常识\" class=\"headerlink\" title=\"三、使用Linux你需要知道的几个常识\"></a>三、使用Linux你需要知道的几个常识</h3><blockquote>\n<ol>\n<li>linux中的内容都是以文件的形式保存的，包括硬件，即“在Linux中，一切皆文件”。</li>\n<li>linux中的存储设置一般需要挂载之后才能使用。</li>\n<li>Linux作为远程服务器时一般不允许关机，只能重启而且重启前最好同步数据并关闭服务。</li>\n<li>Linux中的文件不是以后缀名来区分，而是用文件的权限来区分的。</li>\n<li>linux作为服务器要定期的备份重要数据和日志。</li>\n<li>用户密码需要具有规范性、时效性、易记性和复杂性。</li>\n<li>通常不要直接使用系统预设用户“root”来登录，而要使用普通用户登录。</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n"},{"title":"MySQL常用配置","date":"2019-08-28T10:41:59.000Z","_content":"### my.cnf常用配置\n[client]     \n\\#password = your_password      \nport = 3306\t\t\t\t\t\t\t#端口设置       \nsocket = /tmp/mysql.sock \t\t\t#本地客户端通讯需要使用的套接字文件，需要保护起来       \ndefault-character-set=utf-8\t\t\t#客户端默认字符集       \n\n[mysqld]        \nlower_case_table_names=1            #设置表名一律转小写，即大小写不敏感设置，Linux下默认是0         \nport = 3306\t\t\t\t\t\t\t#服务器端口          \nbasedir=\"/usr/local/mysql\"\t\t\t#设置mysql的安装目录                \ndatadir=\"/usr/local/mysql/data\"\t\t#设置mysql数据库的数据的存放目录              \ndefault-storage-engine=INNODB \t\t#创建新表时将使用的默认存储引擎                \nsocket = /tmp/mysql.sock \t\t\t#服务器与本地客户端通讯的套接字文件位置                 \ncharacter-set-server=utf-8\t\t\t#服务端使用的字符集                 \nmax_connections=100\t\t\t\t\t#服务器支持的最大并发连接数               \nquery_cache_size=0\t\t\t\t\t#缓存查询结果的缓存大小              \ntable_cache=256\t\t\t\t\t\t#为所有线程打开的表的数量               \ntmp_table_size=35M\t\t\t\t\t#内存中的每个临时表允许的最大大小             \nthread_cache_size=8\t\t\t\t\t#缓存的最大线程数             \n\n\\#MyISAM相关参数                      \nmyisam_max_sort_file_size=100G  #重建索引时允许使用的临时文件最大大小               \nmyisam_sort_buffer_size=68M\t\t#快速创建索引的临时文件的缓冲区大小            \nkey_buffer_size=54M\t\t\t\t#缓存MyISAM表索引块的缓冲区大小，不要把它设置得超过可用内存的30%                  \nread_buffer_size=64K\t\t\t#全表扫描时使用的缓冲区大小                \nread_rnd_buffer_size=256K\t\t#执行全表扫描的缓冲区的大小                  \nsort_buffer_size=256K\t\t\t#重建索引时为每个线程分配的缓冲区大小                 \n\n\\#InnoDB相关参数                 \ninnodb_additional_mem_pool_size=34M #存储元数据信息的额外内存池大小，一般不需修改                  \ninnodb_flush_log_at_trx_commit =1\t#事务提交频率，1表示每次都直接写入磁盘，不写入内存，更符合ACID的行为；其他值还有0和2，不推荐     \ninnodb_log_buffer_size=2M\t\t\t#缓冲日志数据的缓冲区大小，一旦已经满了，InnoDB必须把它刷新到磁盘上。              \ninnodb_buffer_pool_size=105M\t\t#缓存索引和行数据的缓冲池大小，一般将该值设为物理内存的80%               \ninnodb_log_file_size=53M\t\t\t#日志组中每个日志文件的大小。一般设为innodb_buffer_pool_size的25%到100%               \ninnodb_thread_concurrency=10\t\t#允许连接INNODB内核的最大并发线程数量              \n\n\\#SQL模式为严格模式\nsql-mode=\"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\"               \n","source":"_posts/MySQL常用配置.md","raw":"---\ntitle: MySQL常用配置\ndate: 2019-08-28 18:41:59\ntags: mysql\ncategories: 配置文件\n---\n### my.cnf常用配置\n[client]     \n\\#password = your_password      \nport = 3306\t\t\t\t\t\t\t#端口设置       \nsocket = /tmp/mysql.sock \t\t\t#本地客户端通讯需要使用的套接字文件，需要保护起来       \ndefault-character-set=utf-8\t\t\t#客户端默认字符集       \n\n[mysqld]        \nlower_case_table_names=1            #设置表名一律转小写，即大小写不敏感设置，Linux下默认是0         \nport = 3306\t\t\t\t\t\t\t#服务器端口          \nbasedir=\"/usr/local/mysql\"\t\t\t#设置mysql的安装目录                \ndatadir=\"/usr/local/mysql/data\"\t\t#设置mysql数据库的数据的存放目录              \ndefault-storage-engine=INNODB \t\t#创建新表时将使用的默认存储引擎                \nsocket = /tmp/mysql.sock \t\t\t#服务器与本地客户端通讯的套接字文件位置                 \ncharacter-set-server=utf-8\t\t\t#服务端使用的字符集                 \nmax_connections=100\t\t\t\t\t#服务器支持的最大并发连接数               \nquery_cache_size=0\t\t\t\t\t#缓存查询结果的缓存大小              \ntable_cache=256\t\t\t\t\t\t#为所有线程打开的表的数量               \ntmp_table_size=35M\t\t\t\t\t#内存中的每个临时表允许的最大大小             \nthread_cache_size=8\t\t\t\t\t#缓存的最大线程数             \n\n\\#MyISAM相关参数                      \nmyisam_max_sort_file_size=100G  #重建索引时允许使用的临时文件最大大小               \nmyisam_sort_buffer_size=68M\t\t#快速创建索引的临时文件的缓冲区大小            \nkey_buffer_size=54M\t\t\t\t#缓存MyISAM表索引块的缓冲区大小，不要把它设置得超过可用内存的30%                  \nread_buffer_size=64K\t\t\t#全表扫描时使用的缓冲区大小                \nread_rnd_buffer_size=256K\t\t#执行全表扫描的缓冲区的大小                  \nsort_buffer_size=256K\t\t\t#重建索引时为每个线程分配的缓冲区大小                 \n\n\\#InnoDB相关参数                 \ninnodb_additional_mem_pool_size=34M #存储元数据信息的额外内存池大小，一般不需修改                  \ninnodb_flush_log_at_trx_commit =1\t#事务提交频率，1表示每次都直接写入磁盘，不写入内存，更符合ACID的行为；其他值还有0和2，不推荐     \ninnodb_log_buffer_size=2M\t\t\t#缓冲日志数据的缓冲区大小，一旦已经满了，InnoDB必须把它刷新到磁盘上。              \ninnodb_buffer_pool_size=105M\t\t#缓存索引和行数据的缓冲池大小，一般将该值设为物理内存的80%               \ninnodb_log_file_size=53M\t\t\t#日志组中每个日志文件的大小。一般设为innodb_buffer_pool_size的25%到100%               \ninnodb_thread_concurrency=10\t\t#允许连接INNODB内核的最大并发线程数量              \n\n\\#SQL模式为严格模式\nsql-mode=\"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\"               \n","slug":"MySQL常用配置","published":1,"updated":"2019-08-28T10:44:57.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8osi000nagtn1imj5y57","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"my-cnf常用配置\"><a href=\"#my-cnf常用配置\" class=\"headerlink\" title=\"my.cnf常用配置\"></a>my.cnf常用配置</h3><p>[client]<br>#password = your_password<br>port = 3306                            #端口设置<br>socket = /tmp/mysql.sock             #本地客户端通讯需要使用的套接字文件，需要保护起来<br>default-character-set=utf-8            #客户端默认字符集       </p>\n<p>[mysqld]<br>lower_case_table_names=1            #设置表名一律转小写，即大小写不敏感设置，Linux下默认是0<br>port = 3306                            #服务器端口<br>basedir=”/usr/local/mysql”            #设置mysql的安装目录<br>datadir=”/usr/local/mysql/data”        #设置mysql数据库的数据的存放目录<br>default-storage-engine=INNODB         #创建新表时将使用的默认存储引擎<br>socket = /tmp/mysql.sock             #服务器与本地客户端通讯的套接字文件位置<br>character-set-server=utf-8            #服务端使用的字符集<br>max_connections=100                    #服务器支持的最大并发连接数<br>query_cache_size=0                    #缓存查询结果的缓存大小<br>table_cache=256                        #为所有线程打开的表的数量<br>tmp_table_size=35M                    #内存中的每个临时表允许的最大大小<br>thread_cache_size=8                    #缓存的最大线程数             </p>\n<p>#MyISAM相关参数<br>myisam_max_sort_file_size=100G  #重建索引时允许使用的临时文件最大大小<br>myisam_sort_buffer_size=68M        #快速创建索引的临时文件的缓冲区大小<br>key_buffer_size=54M                #缓存MyISAM表索引块的缓冲区大小，不要把它设置得超过可用内存的30%<br>read_buffer_size=64K            #全表扫描时使用的缓冲区大小<br>read_rnd_buffer_size=256K        #执行全表扫描的缓冲区的大小<br>sort_buffer_size=256K            #重建索引时为每个线程分配的缓冲区大小                 </p>\n<p>#InnoDB相关参数<br>innodb_additional_mem_pool_size=34M #存储元数据信息的额外内存池大小，一般不需修改<br>innodb_flush_log_at_trx_commit =1    #事务提交频率，1表示每次都直接写入磁盘，不写入内存，更符合ACID的行为；其他值还有0和2，不推荐<br>innodb_log_buffer_size=2M            #缓冲日志数据的缓冲区大小，一旦已经满了，InnoDB必须把它刷新到磁盘上。<br>innodb_buffer_pool_size=105M        #缓存索引和行数据的缓冲池大小，一般将该值设为物理内存的80%<br>innodb_log_file_size=53M            #日志组中每个日志文件的大小。一般设为innodb_buffer_pool_size的25%到100%<br>innodb_thread_concurrency=10        #允许连接INNODB内核的最大并发线程数量              </p>\n<p>#SQL模式为严格模式<br>sql-mode=”STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION”               </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"my-cnf常用配置\"><a href=\"#my-cnf常用配置\" class=\"headerlink\" title=\"my.cnf常用配置\"></a>my.cnf常用配置</h3><p>[client]<br>#password = your_password<br>port = 3306                            #端口设置<br>socket = /tmp/mysql.sock             #本地客户端通讯需要使用的套接字文件，需要保护起来<br>default-character-set=utf-8            #客户端默认字符集       </p>\n<p>[mysqld]<br>lower_case_table_names=1            #设置表名一律转小写，即大小写不敏感设置，Linux下默认是0<br>port = 3306                            #服务器端口<br>basedir=”/usr/local/mysql”            #设置mysql的安装目录<br>datadir=”/usr/local/mysql/data”        #设置mysql数据库的数据的存放目录<br>default-storage-engine=INNODB         #创建新表时将使用的默认存储引擎<br>socket = /tmp/mysql.sock             #服务器与本地客户端通讯的套接字文件位置<br>character-set-server=utf-8            #服务端使用的字符集<br>max_connections=100                    #服务器支持的最大并发连接数<br>query_cache_size=0                    #缓存查询结果的缓存大小<br>table_cache=256                        #为所有线程打开的表的数量<br>tmp_table_size=35M                    #内存中的每个临时表允许的最大大小<br>thread_cache_size=8                    #缓存的最大线程数             </p>\n<p>#MyISAM相关参数<br>myisam_max_sort_file_size=100G  #重建索引时允许使用的临时文件最大大小<br>myisam_sort_buffer_size=68M        #快速创建索引的临时文件的缓冲区大小<br>key_buffer_size=54M                #缓存MyISAM表索引块的缓冲区大小，不要把它设置得超过可用内存的30%<br>read_buffer_size=64K            #全表扫描时使用的缓冲区大小<br>read_rnd_buffer_size=256K        #执行全表扫描的缓冲区的大小<br>sort_buffer_size=256K            #重建索引时为每个线程分配的缓冲区大小                 </p>\n<p>#InnoDB相关参数<br>innodb_additional_mem_pool_size=34M #存储元数据信息的额外内存池大小，一般不需修改<br>innodb_flush_log_at_trx_commit =1    #事务提交频率，1表示每次都直接写入磁盘，不写入内存，更符合ACID的行为；其他值还有0和2，不推荐<br>innodb_log_buffer_size=2M            #缓冲日志数据的缓冲区大小，一旦已经满了，InnoDB必须把它刷新到磁盘上。<br>innodb_buffer_pool_size=105M        #缓存索引和行数据的缓冲池大小，一般将该值设为物理内存的80%<br>innodb_log_file_size=53M            #日志组中每个日志文件的大小。一般设为innodb_buffer_pool_size的25%到100%<br>innodb_thread_concurrency=10        #允许连接INNODB内核的最大并发线程数量              </p>\n<p>#SQL模式为严格模式<br>sql-mode=”STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION”               </p>\n"},{"title":"Mybatis常用配置","date":"2019-08-28T10:23:58.000Z","_content":"### what is\n- MyBatis 是一款优秀的持久层框架，它支持定制化SQL、存储过程以及高级映射;避免了几乎所有的JDBC 代码和手动设置参数以及获取结果集;\n- MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects)映射成数据库中的记录;\n- 官方文档：[mybatis](http://www.mybatis.org/mybatis-3/);\n\n### mybatis-config.xml配置\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\nPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n\t<!-- \n\t\t在配置文件中，属性的加载有三种方式：\n\t\t1. resource或者url引入外部资源；\n\t\t2. 在properties标签中使用property子标签进行定义，然后使用表达式引用；\n\t\t3. 直接在要使用的位置硬编码；\n\t\t注意：以上三种方式的优先级从低到高；\n\t -->\n\t<properties resource=\"mybatis/db.properties\" />\n\t\n\t<!-- \n\t\t全局配置信息\n\t\tlogImpl：mybatis日志的实现；\n\t\tcacheEnabled：二级缓存开关；\n\t\tlazyLoadingEnabled：懒加载开关；\n\t\taggressiveLazyLoading：积极懒加载开关，当懒加载时是否主动进行属性的初始化；\n\t\tmapUnderscoreToCamelCase：数据库列映射Java对象属性开关；\n\t\tuseActualParamName：参数命名开关；\n\t -->\n\t<settings>\n\t\t<setting name=\"logImpl\" value=\"slf4j\"/>\n\t\t<setting name=\"cacheEnabled\" value=\"true\" />\n\t\t<setting name=\"lazyLoadingEnabled\" value=\"true\" />\n\t\t<setting name=\"aggressiveLazyLoading\" value=\"false\" />\n\t\t<setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n\t\t<setting name=\"useActualParamName\" value=\"true\"/>\n\t</settings>\n\t\n\t<typeAliases>\n\t\t<!-- \n\t\t\t以包扫描的方式进行别名定义，默认类名首字母小写（注意别名其实是不区分大小写的）；\n\t\t\t当子包有相同的 类名存在时，可以使用@Alias注解进行签名；\n\t\t-->\n\t\t<package name=\"top.jmzc.pojo\"/>\n\t</typeAliases>\n\t\n\t<plugins>\n\t\t<!-- \n\t\t\t插件配置：以AOP的方式对Executor、MappedStatement、ParameterHandler、ResultSetHandler四大对象的方法进行拦截；\n\t\t\t自定义插件的步骤：\n\t\t\t1. 实现Intercept接口，逐一实现setProperties()、plugin()和intercept()方法；\n\t\t\t2. 为定制的插件进行签名，使用@@Intercepts注解；\n\t\t\t3. 在mybatis配置文件中进行声明；\n\t\t\t\n\t\t\tpagehelper5中可以自动配置dialect，当进行定制配置时，dialect的值一定是全类名，源码中发现使用dialectClass进行反射\n\t\t -->\n\t\t<plugin interceptor=\"com.github.pagehelper.PageInterceptor\">\n\t\t\t<!-- <property name=\"dialect\" value=\"com.github.pagehelper.dialect.helper.MySqlDialect\"/> -->\n\t\t</plugin>\n\t</plugins>\n\t\n\t<environments default=\"dev_mysql\">\n\t\t<!-- \n\t\t\t配置Session的环境，可以有多个环境，通过environments标签的default属性来切换；\n\t\t\ttransactionManager：需要指定事务工厂的类型，这里使用的是别名，也可以实现ibatis提供的接口来进行定制；\n\t\t\tdataSource：需要指定数据源工厂的类型，同样使用的是别名，同样可以实现ibatis提供的接口进行定制；\n\t\t -->\n\t\t<environment id=\"dev_mysql\">\n\t\t\t<transactionManager type=\"JDBC\" />\n\t\t\t<dataSource type=\"POOLED\">\n\t\t\t\t<property name=\"driver\" value=\"${mysql.driver}\" />\n\t\t\t\t<property name=\"url\" value=\"${mysql.url}\" />\n\t\t\t\t<property name=\"username\" value=\"${mysql.username}\" />\n\t\t\t\t<property name=\"password\" value=\"${mysql.password}\" />\n\t\t\t</dataSource>\n\t\t</environment>\n\t</environments>\n\t\n\t<!-- \n\t\t为不同的数据库厂商的ProductName设置别名；\n\t\tProductName可以从Connection接口的MetaData中得到；\n\t -->\n\t<databaseIdProvider type=\"DB_VENDOR\">\n\t\t<property name=\"MySQL\" value=\"mysql\"/>\n        <property name=\"Oracle\" value=\"oracle\"/>\n        <property name=\"SQL Server\" value=\"sqlserver\"/>\n\t</databaseIdProvider>\n\t\n\t<mappers>\n\t\t<!-- 指定映射文件的包路径 -->\n\t\t<package name=\"top.jmzc.mapper\"/>\n\t</mappers>\n</configuration>\n```","source":"_posts/Mybatis常用配置.md","raw":"---\ntitle: Mybatis常用配置\ndate: 2019-08-28 18:23:58\ntags: mybatis\ncategories: 配置文件\n---\n### what is\n- MyBatis 是一款优秀的持久层框架，它支持定制化SQL、存储过程以及高级映射;避免了几乎所有的JDBC 代码和手动设置参数以及获取结果集;\n- MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects)映射成数据库中的记录;\n- 官方文档：[mybatis](http://www.mybatis.org/mybatis-3/);\n\n### mybatis-config.xml配置\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\nPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n\t<!-- \n\t\t在配置文件中，属性的加载有三种方式：\n\t\t1. resource或者url引入外部资源；\n\t\t2. 在properties标签中使用property子标签进行定义，然后使用表达式引用；\n\t\t3. 直接在要使用的位置硬编码；\n\t\t注意：以上三种方式的优先级从低到高；\n\t -->\n\t<properties resource=\"mybatis/db.properties\" />\n\t\n\t<!-- \n\t\t全局配置信息\n\t\tlogImpl：mybatis日志的实现；\n\t\tcacheEnabled：二级缓存开关；\n\t\tlazyLoadingEnabled：懒加载开关；\n\t\taggressiveLazyLoading：积极懒加载开关，当懒加载时是否主动进行属性的初始化；\n\t\tmapUnderscoreToCamelCase：数据库列映射Java对象属性开关；\n\t\tuseActualParamName：参数命名开关；\n\t -->\n\t<settings>\n\t\t<setting name=\"logImpl\" value=\"slf4j\"/>\n\t\t<setting name=\"cacheEnabled\" value=\"true\" />\n\t\t<setting name=\"lazyLoadingEnabled\" value=\"true\" />\n\t\t<setting name=\"aggressiveLazyLoading\" value=\"false\" />\n\t\t<setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n\t\t<setting name=\"useActualParamName\" value=\"true\"/>\n\t</settings>\n\t\n\t<typeAliases>\n\t\t<!-- \n\t\t\t以包扫描的方式进行别名定义，默认类名首字母小写（注意别名其实是不区分大小写的）；\n\t\t\t当子包有相同的 类名存在时，可以使用@Alias注解进行签名；\n\t\t-->\n\t\t<package name=\"top.jmzc.pojo\"/>\n\t</typeAliases>\n\t\n\t<plugins>\n\t\t<!-- \n\t\t\t插件配置：以AOP的方式对Executor、MappedStatement、ParameterHandler、ResultSetHandler四大对象的方法进行拦截；\n\t\t\t自定义插件的步骤：\n\t\t\t1. 实现Intercept接口，逐一实现setProperties()、plugin()和intercept()方法；\n\t\t\t2. 为定制的插件进行签名，使用@@Intercepts注解；\n\t\t\t3. 在mybatis配置文件中进行声明；\n\t\t\t\n\t\t\tpagehelper5中可以自动配置dialect，当进行定制配置时，dialect的值一定是全类名，源码中发现使用dialectClass进行反射\n\t\t -->\n\t\t<plugin interceptor=\"com.github.pagehelper.PageInterceptor\">\n\t\t\t<!-- <property name=\"dialect\" value=\"com.github.pagehelper.dialect.helper.MySqlDialect\"/> -->\n\t\t</plugin>\n\t</plugins>\n\t\n\t<environments default=\"dev_mysql\">\n\t\t<!-- \n\t\t\t配置Session的环境，可以有多个环境，通过environments标签的default属性来切换；\n\t\t\ttransactionManager：需要指定事务工厂的类型，这里使用的是别名，也可以实现ibatis提供的接口来进行定制；\n\t\t\tdataSource：需要指定数据源工厂的类型，同样使用的是别名，同样可以实现ibatis提供的接口进行定制；\n\t\t -->\n\t\t<environment id=\"dev_mysql\">\n\t\t\t<transactionManager type=\"JDBC\" />\n\t\t\t<dataSource type=\"POOLED\">\n\t\t\t\t<property name=\"driver\" value=\"${mysql.driver}\" />\n\t\t\t\t<property name=\"url\" value=\"${mysql.url}\" />\n\t\t\t\t<property name=\"username\" value=\"${mysql.username}\" />\n\t\t\t\t<property name=\"password\" value=\"${mysql.password}\" />\n\t\t\t</dataSource>\n\t\t</environment>\n\t</environments>\n\t\n\t<!-- \n\t\t为不同的数据库厂商的ProductName设置别名；\n\t\tProductName可以从Connection接口的MetaData中得到；\n\t -->\n\t<databaseIdProvider type=\"DB_VENDOR\">\n\t\t<property name=\"MySQL\" value=\"mysql\"/>\n        <property name=\"Oracle\" value=\"oracle\"/>\n        <property name=\"SQL Server\" value=\"sqlserver\"/>\n\t</databaseIdProvider>\n\t\n\t<mappers>\n\t\t<!-- 指定映射文件的包路径 -->\n\t\t<package name=\"top.jmzc.mapper\"/>\n\t</mappers>\n</configuration>\n```","slug":"Mybatis常用配置","published":1,"updated":"2019-08-28T14:30:00.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8osk000qagtnvltz3o9n","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>MyBatis 是一款优秀的持久层框架，它支持定制化SQL、存储过程以及高级映射;避免了几乎所有的JDBC 代码和手动设置参数以及获取结果集;</li>\n<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects)映射成数据库中的记录;</li>\n<li>官方文档：<a href=\"http://www.mybatis.org/mybatis-3/\" target=\"_blank\" rel=\"noopener\">mybatis</a>;</li>\n</ul>\n<h3 id=\"mybatis-config-xml配置\"><a href=\"#mybatis-config-xml配置\" class=\"headerlink\" title=\"mybatis-config.xml配置\"></a>mybatis-config.xml配置</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration</span></span><br><span class=\"line\"><span class=\"meta\">PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t在配置文件中，属性的加载有三种方式：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t1. resource或者url引入外部资源；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t2. 在properties标签中使用property子标签进行定义，然后使用表达式引用；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t3. 直接在要使用的位置硬编码；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t注意：以上三种方式的优先级从低到高；</span></span><br><span class=\"line\"><span class=\"comment\">\t --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"mybatis/db.properties\"</span> /&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t全局配置信息</span></span><br><span class=\"line\"><span class=\"comment\">\t\tlogImpl：mybatis日志的实现；</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcacheEnabled：二级缓存开关；</span></span><br><span class=\"line\"><span class=\"comment\">\t\tlazyLoadingEnabled：懒加载开关；</span></span><br><span class=\"line\"><span class=\"comment\">\t\taggressiveLazyLoading：积极懒加载开关，当懒加载时是否主动进行属性的初始化；</span></span><br><span class=\"line\"><span class=\"comment\">\t\tmapUnderscoreToCamelCase：数据库列映射Java对象属性开关；</span></span><br><span class=\"line\"><span class=\"comment\">\t\tuseActualParamName：参数命名开关；</span></span><br><span class=\"line\"><span class=\"comment\">\t --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logImpl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"slf4j\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cacheEnabled\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lazyLoadingEnabled\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"aggressiveLazyLoading\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapUnderscoreToCamelCase\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"useActualParamName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t以包扫描的方式进行别名定义，默认类名首字母小写（注意别名其实是不区分大小写的）；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t当子包有相同的 类名存在时，可以使用@Alias注解进行签名；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"top.jmzc.pojo\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t插件配置：以AOP的方式对Executor、MappedStatement、ParameterHandler、ResultSetHandler四大对象的方法进行拦截；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t自定义插件的步骤：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t1. 实现Intercept接口，逐一实现setProperties()、plugin()和intercept()方法；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t2. 为定制的插件进行签名，使用@@Intercepts注解；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t3. 在mybatis配置文件中进行声明；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tpagehelper5中可以自动配置dialect，当进行定制配置时，dialect的值一定是全类名，源码中发现使用dialectClass进行反射</span></span><br><span class=\"line\"><span class=\"comment\">\t\t --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"com.github.pagehelper.PageInterceptor\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- &lt;property name=\"dialect\" value=\"com.github.pagehelper.dialect.helper.MySqlDialect\"/&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"dev_mysql\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t配置Session的环境，可以有多个环境，通过environments标签的default属性来切换；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\ttransactionManager：需要指定事务工厂的类型，这里使用的是别名，也可以实现ibatis提供的接口来进行定制；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tdataSource：需要指定数据源工厂的类型，同样使用的是别名，同样可以实现ibatis提供的接口进行定制；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dev_mysql\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.driver&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.url&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.username&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.password&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t为不同的数据库厂商的ProductName设置别名；</span></span><br><span class=\"line\"><span class=\"comment\">\t\tProductName可以从Connection接口的MetaData中得到；</span></span><br><span class=\"line\"><span class=\"comment\">\t --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">databaseIdProvider</span> <span class=\"attr\">type</span>=<span class=\"string\">\"DB_VENDOR\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MySQL\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"mysql\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Oracle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"oracle\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"SQL Server\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlserver\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">databaseIdProvider</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 指定映射文件的包路径 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"top.jmzc.mapper\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>MyBatis 是一款优秀的持久层框架，它支持定制化SQL、存储过程以及高级映射;避免了几乎所有的JDBC 代码和手动设置参数以及获取结果集;</li>\n<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects)映射成数据库中的记录;</li>\n<li>官方文档：<a href=\"http://www.mybatis.org/mybatis-3/\" target=\"_blank\" rel=\"noopener\">mybatis</a>;</li>\n</ul>\n<h3 id=\"mybatis-config-xml配置\"><a href=\"#mybatis-config-xml配置\" class=\"headerlink\" title=\"mybatis-config.xml配置\"></a>mybatis-config.xml配置</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration</span></span><br><span class=\"line\"><span class=\"meta\">PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t在配置文件中，属性的加载有三种方式：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t1. resource或者url引入外部资源；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t2. 在properties标签中使用property子标签进行定义，然后使用表达式引用；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t3. 直接在要使用的位置硬编码；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t注意：以上三种方式的优先级从低到高；</span></span><br><span class=\"line\"><span class=\"comment\">\t --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"mybatis/db.properties\"</span> /&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t全局配置信息</span></span><br><span class=\"line\"><span class=\"comment\">\t\tlogImpl：mybatis日志的实现；</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcacheEnabled：二级缓存开关；</span></span><br><span class=\"line\"><span class=\"comment\">\t\tlazyLoadingEnabled：懒加载开关；</span></span><br><span class=\"line\"><span class=\"comment\">\t\taggressiveLazyLoading：积极懒加载开关，当懒加载时是否主动进行属性的初始化；</span></span><br><span class=\"line\"><span class=\"comment\">\t\tmapUnderscoreToCamelCase：数据库列映射Java对象属性开关；</span></span><br><span class=\"line\"><span class=\"comment\">\t\tuseActualParamName：参数命名开关；</span></span><br><span class=\"line\"><span class=\"comment\">\t --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logImpl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"slf4j\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cacheEnabled\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lazyLoadingEnabled\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"aggressiveLazyLoading\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapUnderscoreToCamelCase\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"useActualParamName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t以包扫描的方式进行别名定义，默认类名首字母小写（注意别名其实是不区分大小写的）；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t当子包有相同的 类名存在时，可以使用@Alias注解进行签名；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"top.jmzc.pojo\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t插件配置：以AOP的方式对Executor、MappedStatement、ParameterHandler、ResultSetHandler四大对象的方法进行拦截；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t自定义插件的步骤：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t1. 实现Intercept接口，逐一实现setProperties()、plugin()和intercept()方法；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t2. 为定制的插件进行签名，使用@@Intercepts注解；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t3. 在mybatis配置文件中进行声明；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tpagehelper5中可以自动配置dialect，当进行定制配置时，dialect的值一定是全类名，源码中发现使用dialectClass进行反射</span></span><br><span class=\"line\"><span class=\"comment\">\t\t --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"com.github.pagehelper.PageInterceptor\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- &lt;property name=\"dialect\" value=\"com.github.pagehelper.dialect.helper.MySqlDialect\"/&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"dev_mysql\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t配置Session的环境，可以有多个环境，通过environments标签的default属性来切换；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\ttransactionManager：需要指定事务工厂的类型，这里使用的是别名，也可以实现ibatis提供的接口来进行定制；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tdataSource：需要指定数据源工厂的类型，同样使用的是别名，同样可以实现ibatis提供的接口进行定制；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dev_mysql\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.driver&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.url&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.username&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.password&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t为不同的数据库厂商的ProductName设置别名；</span></span><br><span class=\"line\"><span class=\"comment\">\t\tProductName可以从Connection接口的MetaData中得到；</span></span><br><span class=\"line\"><span class=\"comment\">\t --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">databaseIdProvider</span> <span class=\"attr\">type</span>=<span class=\"string\">\"DB_VENDOR\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MySQL\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"mysql\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Oracle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"oracle\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"SQL Server\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlserver\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">databaseIdProvider</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 指定映射文件的包路径 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"top.jmzc.mapper\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Mybatis逆向工程配置","date":"2019-08-28T10:46:27.000Z","_content":"### what is\n- mybatis逆向工程，就是mybatis会根据我们设计好的数据表，自动生成pojo、mapper以及mapper.xml；\n- 官方文档：[generator](http://www.mybatis.org/generator/);\n\n### generateConfig.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n  PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<generatorConfiguration>\n\t<!--导入属性配置-->\n\t<properties resource=\"generatorConfig.properties\" />\n\t\n\t<!--指定特定数据库的jdbc驱动jar包的位置-->\n\t<classPathEntry location=\"${db.driverLocation}\" />\n\t\n    <!-- targetRuntime=\"MyBatis3\"：选择运行的mybatis版本 ;如果你希望不生成和Example查询有关的内容,可以使用MyBatis3Simple-->\n    <!-- defaultModelType=\"flat\" :这种类型的model会为每个表生成唯一的一个类，这个类中会包含表中所有的字段 ;默认值conditional -->\n\t<context id=\"default\" targetRuntime=\"MyBatis3\"\n\t\tdefaultModelType=\"flat\">\n\t\t\n\t\t<!-- 在创建class时，对注释进行控制 -->\n\t\t<commentGenerator>\n\t\t\t<!-- 阻止生成注释，默认为false -->\n\t\t\t<property name=\"suppressAllComments\" value=\"true\" />\n\t\t</commentGenerator>\n\n\t\t<!--jdbc的数据库连接 -->\n\t\t<jdbcConnection driverClass=\"${jdbc.driverClass}\"\n\t\t\tconnectionURL=\"${jdbc.jdbcUrl}\" userId=\"${jdbc.user}\" password=\"${jdbc.password}\">\n\t\t</jdbcConnection>\n\t\t\n\t\t<!-- 是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal -->\n\t\t<javaTypeResolver>\n\t\t\t<property name=\"forceBigDecimals\" value=\"false\" />\n\t\t</javaTypeResolver>\n\n\t\t<!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类 -->\n\t\t<javaModelGenerator targetPackage=\"${pojoTargetPackage}\"\n\t\t\ttargetProject=\"${targetProject}\">\n\t\t\t<!-- 是否允许子包，即targetPackage.schemaName.tableName -->\n\t\t\t<property name=\"enableSubPackages\" value=\"false\" />\n            <!-- 是否对model添加 构造函数 -->\n\t\t\t<property name=\"constructorBased\" value=\"true\" />\n            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->\n\t\t\t<property name=\"trimStrings\" value=\"true\" />\n            <!-- 建立的Model对象是否不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->\n\t\t\t<property name=\"immutable\" value=\"false\" />\n\t\t</javaModelGenerator>\n\n\t\t <!--mapper xml映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->\n\t\t<sqlMapGenerator targetPackage=\"${xmlTargetPackage}\"\n\t\t\ttargetProject=\"${xmlTargetProject}\">\n\t\t\t<property name=\"enableSubPackages\" value=\"false\" />\n\t\t</sqlMapGenerator>\n\t\t\n        <!-- \n        \ttype=\"XMLMAPPER\" 接口和XML完全分离，接口中不出现SQL语句, 修改SQL不需要重新编译 (推荐使用)\n        \ttype=\"ANNOTATEDMAPPER\",生成Java Model 和基于注解的Mapper对象\n        \ttype=\"MIXEDMAPPER\",生成基于注解的Java Model 和相应的Mapper对象\n        -->\n\t\t<javaClientGenerator type=\"XMLMAPPER\"\n\t\t\ttargetPackage=\"${mapperTargetPackage}\" targetProject=\"${targetProject}\">\n\t\t\t<property name=\"enableSubPackages\" value=\"false\" />\n\t\t</javaClientGenerator>\n\t\t\n        <!-- 生成全部的表   tableName=\"%\" -->\n\t\t<table tableName=\"EMP\" domainObjectName=\"Emp\">\n            <!-- generatedKey：用来指定生成的主键  会在Insert语句中添加 selectKey标签 -->\n\t\t\t<generatedKey column=\"EMPNO\" sqlStatement=\"MySql\" />\n\t\t</table>\n\t\t<table tableName=\"DEPT\" domainObjectName=\"Dept\"></table>\n\t</context>\n</generatorConfiguration>\n```","source":"_posts/Mybatis逆向工程配置.md","raw":"---\ntitle: Mybatis逆向工程配置\ndate: 2019-08-28 18:46:27\ntags: mybatis\ncategories: 配置文件\n---\n### what is\n- mybatis逆向工程，就是mybatis会根据我们设计好的数据表，自动生成pojo、mapper以及mapper.xml；\n- 官方文档：[generator](http://www.mybatis.org/generator/);\n\n### generateConfig.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n  PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<generatorConfiguration>\n\t<!--导入属性配置-->\n\t<properties resource=\"generatorConfig.properties\" />\n\t\n\t<!--指定特定数据库的jdbc驱动jar包的位置-->\n\t<classPathEntry location=\"${db.driverLocation}\" />\n\t\n    <!-- targetRuntime=\"MyBatis3\"：选择运行的mybatis版本 ;如果你希望不生成和Example查询有关的内容,可以使用MyBatis3Simple-->\n    <!-- defaultModelType=\"flat\" :这种类型的model会为每个表生成唯一的一个类，这个类中会包含表中所有的字段 ;默认值conditional -->\n\t<context id=\"default\" targetRuntime=\"MyBatis3\"\n\t\tdefaultModelType=\"flat\">\n\t\t\n\t\t<!-- 在创建class时，对注释进行控制 -->\n\t\t<commentGenerator>\n\t\t\t<!-- 阻止生成注释，默认为false -->\n\t\t\t<property name=\"suppressAllComments\" value=\"true\" />\n\t\t</commentGenerator>\n\n\t\t<!--jdbc的数据库连接 -->\n\t\t<jdbcConnection driverClass=\"${jdbc.driverClass}\"\n\t\t\tconnectionURL=\"${jdbc.jdbcUrl}\" userId=\"${jdbc.user}\" password=\"${jdbc.password}\">\n\t\t</jdbcConnection>\n\t\t\n\t\t<!-- 是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal -->\n\t\t<javaTypeResolver>\n\t\t\t<property name=\"forceBigDecimals\" value=\"false\" />\n\t\t</javaTypeResolver>\n\n\t\t<!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类 -->\n\t\t<javaModelGenerator targetPackage=\"${pojoTargetPackage}\"\n\t\t\ttargetProject=\"${targetProject}\">\n\t\t\t<!-- 是否允许子包，即targetPackage.schemaName.tableName -->\n\t\t\t<property name=\"enableSubPackages\" value=\"false\" />\n            <!-- 是否对model添加 构造函数 -->\n\t\t\t<property name=\"constructorBased\" value=\"true\" />\n            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->\n\t\t\t<property name=\"trimStrings\" value=\"true\" />\n            <!-- 建立的Model对象是否不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->\n\t\t\t<property name=\"immutable\" value=\"false\" />\n\t\t</javaModelGenerator>\n\n\t\t <!--mapper xml映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->\n\t\t<sqlMapGenerator targetPackage=\"${xmlTargetPackage}\"\n\t\t\ttargetProject=\"${xmlTargetProject}\">\n\t\t\t<property name=\"enableSubPackages\" value=\"false\" />\n\t\t</sqlMapGenerator>\n\t\t\n        <!-- \n        \ttype=\"XMLMAPPER\" 接口和XML完全分离，接口中不出现SQL语句, 修改SQL不需要重新编译 (推荐使用)\n        \ttype=\"ANNOTATEDMAPPER\",生成Java Model 和基于注解的Mapper对象\n        \ttype=\"MIXEDMAPPER\",生成基于注解的Java Model 和相应的Mapper对象\n        -->\n\t\t<javaClientGenerator type=\"XMLMAPPER\"\n\t\t\ttargetPackage=\"${mapperTargetPackage}\" targetProject=\"${targetProject}\">\n\t\t\t<property name=\"enableSubPackages\" value=\"false\" />\n\t\t</javaClientGenerator>\n\t\t\n        <!-- 生成全部的表   tableName=\"%\" -->\n\t\t<table tableName=\"EMP\" domainObjectName=\"Emp\">\n            <!-- generatedKey：用来指定生成的主键  会在Insert语句中添加 selectKey标签 -->\n\t\t\t<generatedKey column=\"EMPNO\" sqlStatement=\"MySql\" />\n\t\t</table>\n\t\t<table tableName=\"DEPT\" domainObjectName=\"Dept\"></table>\n\t</context>\n</generatorConfiguration>\n```","slug":"Mybatis逆向工程配置","published":1,"updated":"2019-08-28T12:07:45.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8oso000uagtnrpg35rgc","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>mybatis逆向工程，就是mybatis会根据我们设计好的数据表，自动生成pojo、mapper以及mapper.xml；</li>\n<li>官方文档：<a href=\"http://www.mybatis.org/generator/\" target=\"_blank\" rel=\"noopener\">generator</a>;</li>\n</ul>\n<h3 id=\"generateConfig-xml\"><a href=\"#generateConfig-xml\" class=\"headerlink\" title=\"generateConfig.xml\"></a>generateConfig.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--导入属性配置--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"generatorConfig.properties\"</span> /&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--指定特定数据库的jdbc驱动jar包的位置--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">classPathEntry</span> <span class=\"attr\">location</span>=<span class=\"string\">\"$&#123;db.driverLocation&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- targetRuntime=\"MyBatis3\"：选择运行的mybatis版本 ;如果你希望不生成和Example查询有关的内容,可以使用MyBatis3Simple--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- defaultModelType=\"flat\" :这种类型的model会为每个表生成唯一的一个类，这个类中会包含表中所有的字段 ;默认值conditional --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">defaultModelType</span>=<span class=\"string\">\"flat\"</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 在创建class时，对注释进行控制 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 阻止生成注释，默认为false --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressAllComments\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--jdbc的数据库连接 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"$&#123;jdbc.driverClass&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">connectionURL</span>=<span class=\"string\">\"$&#123;jdbc.jdbcUrl&#125;\"</span> <span class=\"attr\">userId</span>=<span class=\"string\">\"$&#123;jdbc.user&#125;\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">javaTypeResolver</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"forceBigDecimals\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">javaTypeResolver</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"$&#123;pojoTargetPackage&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">targetProject</span>=<span class=\"string\">\"$&#123;targetProject&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 是否允许子包，即targetPackage.schemaName.tableName --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 是否对model添加 构造函数 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"constructorBased\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 是否对类CHAR类型的列的数据进行trim操作 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 建立的Model对象是否不可改变  即生成的Model对象不会有 setter方法，只有构造方法 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"immutable\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t <span class=\"comment\">&lt;!--mapper xml映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"$&#123;xmlTargetPackage&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">targetProject</span>=<span class=\"string\">\"$&#123;xmlTargetProject&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">        \ttype=\"XMLMAPPER\" 接口和XML完全分离，接口中不出现SQL语句, 修改SQL不需要重新编译 (推荐使用)</span></span><br><span class=\"line\"><span class=\"comment\">        \ttype=\"ANNOTATEDMAPPER\",生成Java Model 和基于注解的Mapper对象</span></span><br><span class=\"line\"><span class=\"comment\">        \ttype=\"MIXEDMAPPER\",生成基于注解的Java Model 和相应的Mapper对象</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">targetPackage</span>=<span class=\"string\">\"$&#123;mapperTargetPackage&#125;\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"$&#123;targetProject&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 生成全部的表   tableName=\"%\" --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"EMP\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"Emp\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- generatedKey：用来指定生成的主键  会在Insert语句中添加 selectKey标签 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">generatedKey</span> <span class=\"attr\">column</span>=<span class=\"string\">\"EMPNO\"</span> <span class=\"attr\">sqlStatement</span>=<span class=\"string\">\"MySql\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"DEPT\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"Dept\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>mybatis逆向工程，就是mybatis会根据我们设计好的数据表，自动生成pojo、mapper以及mapper.xml；</li>\n<li>官方文档：<a href=\"http://www.mybatis.org/generator/\" target=\"_blank\" rel=\"noopener\">generator</a>;</li>\n</ul>\n<h3 id=\"generateConfig-xml\"><a href=\"#generateConfig-xml\" class=\"headerlink\" title=\"generateConfig.xml\"></a>generateConfig.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--导入属性配置--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"generatorConfig.properties\"</span> /&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--指定特定数据库的jdbc驱动jar包的位置--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">classPathEntry</span> <span class=\"attr\">location</span>=<span class=\"string\">\"$&#123;db.driverLocation&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- targetRuntime=\"MyBatis3\"：选择运行的mybatis版本 ;如果你希望不生成和Example查询有关的内容,可以使用MyBatis3Simple--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- defaultModelType=\"flat\" :这种类型的model会为每个表生成唯一的一个类，这个类中会包含表中所有的字段 ;默认值conditional --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">defaultModelType</span>=<span class=\"string\">\"flat\"</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 在创建class时，对注释进行控制 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 阻止生成注释，默认为false --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressAllComments\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--jdbc的数据库连接 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"$&#123;jdbc.driverClass&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">connectionURL</span>=<span class=\"string\">\"$&#123;jdbc.jdbcUrl&#125;\"</span> <span class=\"attr\">userId</span>=<span class=\"string\">\"$&#123;jdbc.user&#125;\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">javaTypeResolver</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"forceBigDecimals\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">javaTypeResolver</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"$&#123;pojoTargetPackage&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">targetProject</span>=<span class=\"string\">\"$&#123;targetProject&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 是否允许子包，即targetPackage.schemaName.tableName --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 是否对model添加 构造函数 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"constructorBased\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 是否对类CHAR类型的列的数据进行trim操作 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 建立的Model对象是否不可改变  即生成的Model对象不会有 setter方法，只有构造方法 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"immutable\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t <span class=\"comment\">&lt;!--mapper xml映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"$&#123;xmlTargetPackage&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">targetProject</span>=<span class=\"string\">\"$&#123;xmlTargetProject&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">        \ttype=\"XMLMAPPER\" 接口和XML完全分离，接口中不出现SQL语句, 修改SQL不需要重新编译 (推荐使用)</span></span><br><span class=\"line\"><span class=\"comment\">        \ttype=\"ANNOTATEDMAPPER\",生成Java Model 和基于注解的Mapper对象</span></span><br><span class=\"line\"><span class=\"comment\">        \ttype=\"MIXEDMAPPER\",生成基于注解的Java Model 和相应的Mapper对象</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">targetPackage</span>=<span class=\"string\">\"$&#123;mapperTargetPackage&#125;\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"$&#123;targetProject&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 生成全部的表   tableName=\"%\" --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"EMP\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"Emp\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- generatedKey：用来指定生成的主键  会在Insert语句中添加 selectKey标签 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">generatedKey</span> <span class=\"attr\">column</span>=<span class=\"string\">\"EMPNO\"</span> <span class=\"attr\">sqlStatement</span>=<span class=\"string\">\"MySql\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"DEPT\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"Dept\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Redis命令","date":"2019-08-28T09:01:17.000Z","_content":"### what is\n- Redis全称为 Remote Dictionary Server;\n- Redis是一个遵守BSD协议的开源的基于内存的数据结构存储服务；可以用做数据库、缓存和消息中间件；（官方）\n- Redis是意大利人用C语言编写的一个高性能的（key/value）分布式的NoSQL数据库，支持多种数据类型并支持持久化；\n\n### how to use it\n#### 通用命令\n- `dbsize`\n- `select dbIndex`\n- `flushdb`\n- `flushall`\n- `keys *`\n- `exists key`\n- `move key dbIndex`\n- `expire key`：设置key的存活时间（秒单位）\n- `ttl key`：查看key的剩余存活时长，返回值含义（-1，永恒；-2，过期），过期就会被从内存中删除该key\n- `persist key`：去掉有效期设置\n- `type key`\n\n##### string 常用\n- `set/get/del/append/strlen key`\n- `incr/decr key`\n- `incrby/decrby key increment`\n- `getrange/setrange key startIndex endIndex`：获取key对应的指定范围的value，第一个索引为0，最后一个索引为-1\n- `setex(with expire) key second value`\n- `setnx(if not exist) key value`\n- `mset/mget/msetnx key` ：添加、获取多个kv\n- `getset`\n\n##### list 常用\n- `lpush/rpush/lrange`\n- `lpop/rpop`\n- `lIndex key`\n- `lrem key count value`\n- `ltrim key start end` ；截取start到end的元素再赋值给原来的key\n- `rpoplpush srcList targetList`：当scr与target相同就构成了一个循环\n- `lInsert key before/after v1 v2`\n- `lset key index value`\n\n##### set 常用\n- `sadd `\n- `smembers key`\n- `sismember key v1`\n- `scard`：获取元素个数\n- `srem key value`\n- `srandmember key num`：随机取出num个元素\n- `spop key`\n- `smove key1 key2 value-in-key1`：将key1中的某个值移动到key的集合中\n- `sdiff key1 key2`：获取在key1集合但不在key2集合的元素\n- `sinter key1 key2`\n- `sunion key1 key2`\n\n#### hash 常用\n- `hset/hget/hdel/hmset/hmget/hgetall`\n- `hlen`\n- `hexists key in-key`\n- `hkeys/hvals`\n- `hincrby/hincrbyfloat`\n- `hsetnx`\n\n#### zset 常用\n- `zadd/zrange`：zadd zset1 60 v1 70 v2 80 v3 90 v4 100 v5\n- `zrangebyscore key startScore endScore`：默认取左闭右闭区间，可以使用左小括号来更改为开区间\n- `zcard/zcount key score1 score2`\n- `zrank key value`：获取value在key集合中的排名，即获取下标\n- `zscore key value`\n- `zrevrange`\n- `zrevrank key value`\n- `zrevrangebyscore key endScore startScore`\n","source":"_posts/Redis命令.md","raw":"---\ntitle: Redis命令\ndate: 2019-08-28 17:01:17\ntags: redis\ncategories: 学习笔记\n---\n### what is\n- Redis全称为 Remote Dictionary Server;\n- Redis是一个遵守BSD协议的开源的基于内存的数据结构存储服务；可以用做数据库、缓存和消息中间件；（官方）\n- Redis是意大利人用C语言编写的一个高性能的（key/value）分布式的NoSQL数据库，支持多种数据类型并支持持久化；\n\n### how to use it\n#### 通用命令\n- `dbsize`\n- `select dbIndex`\n- `flushdb`\n- `flushall`\n- `keys *`\n- `exists key`\n- `move key dbIndex`\n- `expire key`：设置key的存活时间（秒单位）\n- `ttl key`：查看key的剩余存活时长，返回值含义（-1，永恒；-2，过期），过期就会被从内存中删除该key\n- `persist key`：去掉有效期设置\n- `type key`\n\n##### string 常用\n- `set/get/del/append/strlen key`\n- `incr/decr key`\n- `incrby/decrby key increment`\n- `getrange/setrange key startIndex endIndex`：获取key对应的指定范围的value，第一个索引为0，最后一个索引为-1\n- `setex(with expire) key second value`\n- `setnx(if not exist) key value`\n- `mset/mget/msetnx key` ：添加、获取多个kv\n- `getset`\n\n##### list 常用\n- `lpush/rpush/lrange`\n- `lpop/rpop`\n- `lIndex key`\n- `lrem key count value`\n- `ltrim key start end` ；截取start到end的元素再赋值给原来的key\n- `rpoplpush srcList targetList`：当scr与target相同就构成了一个循环\n- `lInsert key before/after v1 v2`\n- `lset key index value`\n\n##### set 常用\n- `sadd `\n- `smembers key`\n- `sismember key v1`\n- `scard`：获取元素个数\n- `srem key value`\n- `srandmember key num`：随机取出num个元素\n- `spop key`\n- `smove key1 key2 value-in-key1`：将key1中的某个值移动到key的集合中\n- `sdiff key1 key2`：获取在key1集合但不在key2集合的元素\n- `sinter key1 key2`\n- `sunion key1 key2`\n\n#### hash 常用\n- `hset/hget/hdel/hmset/hmget/hgetall`\n- `hlen`\n- `hexists key in-key`\n- `hkeys/hvals`\n- `hincrby/hincrbyfloat`\n- `hsetnx`\n\n#### zset 常用\n- `zadd/zrange`：zadd zset1 60 v1 70 v2 80 v3 90 v4 100 v5\n- `zrangebyscore key startScore endScore`：默认取左闭右闭区间，可以使用左小括号来更改为开区间\n- `zcard/zcount key score1 score2`\n- `zrank key value`：获取value在key集合中的排名，即获取下标\n- `zscore key value`\n- `zrevrange`\n- `zrevrank key value`\n- `zrevrangebyscore key endScore startScore`\n","slug":"Redis命令","published":1,"updated":"2019-08-28T09:02:14.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8osr000xagtnd7clc4qo","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>Redis全称为 Remote Dictionary Server;</li>\n<li>Redis是一个遵守BSD协议的开源的基于内存的数据结构存储服务；可以用做数据库、缓存和消息中间件；（官方）</li>\n<li>Redis是意大利人用C语言编写的一个高性能的（key/value）分布式的NoSQL数据库，支持多种数据类型并支持持久化；</li>\n</ul>\n<h3 id=\"how-to-use-it\"><a href=\"#how-to-use-it\" class=\"headerlink\" title=\"how to use it\"></a>how to use it</h3><h4 id=\"通用命令\"><a href=\"#通用命令\" class=\"headerlink\" title=\"通用命令\"></a>通用命令</h4><ul>\n<li><code>dbsize</code></li>\n<li><code>select dbIndex</code></li>\n<li><code>flushdb</code></li>\n<li><code>flushall</code></li>\n<li><code>keys *</code></li>\n<li><code>exists key</code></li>\n<li><code>move key dbIndex</code></li>\n<li><code>expire key</code>：设置key的存活时间（秒单位）</li>\n<li><code>ttl key</code>：查看key的剩余存活时长，返回值含义（-1，永恒；-2，过期），过期就会被从内存中删除该key</li>\n<li><code>persist key</code>：去掉有效期设置</li>\n<li><code>type key</code></li>\n</ul>\n<h5 id=\"string-常用\"><a href=\"#string-常用\" class=\"headerlink\" title=\"string 常用\"></a>string 常用</h5><ul>\n<li><code>set/get/del/append/strlen key</code></li>\n<li><code>incr/decr key</code></li>\n<li><code>incrby/decrby key increment</code></li>\n<li><code>getrange/setrange key startIndex endIndex</code>：获取key对应的指定范围的value，第一个索引为0，最后一个索引为-1</li>\n<li><code>setex(with expire) key second value</code></li>\n<li><code>setnx(if not exist) key value</code></li>\n<li><code>mset/mget/msetnx key</code> ：添加、获取多个kv</li>\n<li><code>getset</code></li>\n</ul>\n<h5 id=\"list-常用\"><a href=\"#list-常用\" class=\"headerlink\" title=\"list 常用\"></a>list 常用</h5><ul>\n<li><code>lpush/rpush/lrange</code></li>\n<li><code>lpop/rpop</code></li>\n<li><code>lIndex key</code></li>\n<li><code>lrem key count value</code></li>\n<li><code>ltrim key start end</code> ；截取start到end的元素再赋值给原来的key</li>\n<li><code>rpoplpush srcList targetList</code>：当scr与target相同就构成了一个循环</li>\n<li><code>lInsert key before/after v1 v2</code></li>\n<li><code>lset key index value</code></li>\n</ul>\n<h5 id=\"set-常用\"><a href=\"#set-常用\" class=\"headerlink\" title=\"set 常用\"></a>set 常用</h5><ul>\n<li><code>sadd</code></li>\n<li><code>smembers key</code></li>\n<li><code>sismember key v1</code></li>\n<li><code>scard</code>：获取元素个数</li>\n<li><code>srem key value</code></li>\n<li><code>srandmember key num</code>：随机取出num个元素</li>\n<li><code>spop key</code></li>\n<li><code>smove key1 key2 value-in-key1</code>：将key1中的某个值移动到key的集合中</li>\n<li><code>sdiff key1 key2</code>：获取在key1集合但不在key2集合的元素</li>\n<li><code>sinter key1 key2</code></li>\n<li><code>sunion key1 key2</code></li>\n</ul>\n<h4 id=\"hash-常用\"><a href=\"#hash-常用\" class=\"headerlink\" title=\"hash 常用\"></a>hash 常用</h4><ul>\n<li><code>hset/hget/hdel/hmset/hmget/hgetall</code></li>\n<li><code>hlen</code></li>\n<li><code>hexists key in-key</code></li>\n<li><code>hkeys/hvals</code></li>\n<li><code>hincrby/hincrbyfloat</code></li>\n<li><code>hsetnx</code></li>\n</ul>\n<h4 id=\"zset-常用\"><a href=\"#zset-常用\" class=\"headerlink\" title=\"zset 常用\"></a>zset 常用</h4><ul>\n<li><code>zadd/zrange</code>：zadd zset1 60 v1 70 v2 80 v3 90 v4 100 v5</li>\n<li><code>zrangebyscore key startScore endScore</code>：默认取左闭右闭区间，可以使用左小括号来更改为开区间</li>\n<li><code>zcard/zcount key score1 score2</code></li>\n<li><code>zrank key value</code>：获取value在key集合中的排名，即获取下标</li>\n<li><code>zscore key value</code></li>\n<li><code>zrevrange</code></li>\n<li><code>zrevrank key value</code></li>\n<li><code>zrevrangebyscore key endScore startScore</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>Redis全称为 Remote Dictionary Server;</li>\n<li>Redis是一个遵守BSD协议的开源的基于内存的数据结构存储服务；可以用做数据库、缓存和消息中间件；（官方）</li>\n<li>Redis是意大利人用C语言编写的一个高性能的（key/value）分布式的NoSQL数据库，支持多种数据类型并支持持久化；</li>\n</ul>\n<h3 id=\"how-to-use-it\"><a href=\"#how-to-use-it\" class=\"headerlink\" title=\"how to use it\"></a>how to use it</h3><h4 id=\"通用命令\"><a href=\"#通用命令\" class=\"headerlink\" title=\"通用命令\"></a>通用命令</h4><ul>\n<li><code>dbsize</code></li>\n<li><code>select dbIndex</code></li>\n<li><code>flushdb</code></li>\n<li><code>flushall</code></li>\n<li><code>keys *</code></li>\n<li><code>exists key</code></li>\n<li><code>move key dbIndex</code></li>\n<li><code>expire key</code>：设置key的存活时间（秒单位）</li>\n<li><code>ttl key</code>：查看key的剩余存活时长，返回值含义（-1，永恒；-2，过期），过期就会被从内存中删除该key</li>\n<li><code>persist key</code>：去掉有效期设置</li>\n<li><code>type key</code></li>\n</ul>\n<h5 id=\"string-常用\"><a href=\"#string-常用\" class=\"headerlink\" title=\"string 常用\"></a>string 常用</h5><ul>\n<li><code>set/get/del/append/strlen key</code></li>\n<li><code>incr/decr key</code></li>\n<li><code>incrby/decrby key increment</code></li>\n<li><code>getrange/setrange key startIndex endIndex</code>：获取key对应的指定范围的value，第一个索引为0，最后一个索引为-1</li>\n<li><code>setex(with expire) key second value</code></li>\n<li><code>setnx(if not exist) key value</code></li>\n<li><code>mset/mget/msetnx key</code> ：添加、获取多个kv</li>\n<li><code>getset</code></li>\n</ul>\n<h5 id=\"list-常用\"><a href=\"#list-常用\" class=\"headerlink\" title=\"list 常用\"></a>list 常用</h5><ul>\n<li><code>lpush/rpush/lrange</code></li>\n<li><code>lpop/rpop</code></li>\n<li><code>lIndex key</code></li>\n<li><code>lrem key count value</code></li>\n<li><code>ltrim key start end</code> ；截取start到end的元素再赋值给原来的key</li>\n<li><code>rpoplpush srcList targetList</code>：当scr与target相同就构成了一个循环</li>\n<li><code>lInsert key before/after v1 v2</code></li>\n<li><code>lset key index value</code></li>\n</ul>\n<h5 id=\"set-常用\"><a href=\"#set-常用\" class=\"headerlink\" title=\"set 常用\"></a>set 常用</h5><ul>\n<li><code>sadd</code></li>\n<li><code>smembers key</code></li>\n<li><code>sismember key v1</code></li>\n<li><code>scard</code>：获取元素个数</li>\n<li><code>srem key value</code></li>\n<li><code>srandmember key num</code>：随机取出num个元素</li>\n<li><code>spop key</code></li>\n<li><code>smove key1 key2 value-in-key1</code>：将key1中的某个值移动到key的集合中</li>\n<li><code>sdiff key1 key2</code>：获取在key1集合但不在key2集合的元素</li>\n<li><code>sinter key1 key2</code></li>\n<li><code>sunion key1 key2</code></li>\n</ul>\n<h4 id=\"hash-常用\"><a href=\"#hash-常用\" class=\"headerlink\" title=\"hash 常用\"></a>hash 常用</h4><ul>\n<li><code>hset/hget/hdel/hmset/hmget/hgetall</code></li>\n<li><code>hlen</code></li>\n<li><code>hexists key in-key</code></li>\n<li><code>hkeys/hvals</code></li>\n<li><code>hincrby/hincrbyfloat</code></li>\n<li><code>hsetnx</code></li>\n</ul>\n<h4 id=\"zset-常用\"><a href=\"#zset-常用\" class=\"headerlink\" title=\"zset 常用\"></a>zset 常用</h4><ul>\n<li><code>zadd/zrange</code>：zadd zset1 60 v1 70 v2 80 v3 90 v4 100 v5</li>\n<li><code>zrangebyscore key startScore endScore</code>：默认取左闭右闭区间，可以使用左小括号来更改为开区间</li>\n<li><code>zcard/zcount key score1 score2</code></li>\n<li><code>zrank key value</code>：获取value在key集合中的排名，即获取下标</li>\n<li><code>zscore key value</code></li>\n<li><code>zrevrange</code></li>\n<li><code>zrevrank key value</code></li>\n<li><code>zrevrangebyscore key endScore startScore</code></li>\n</ul>\n"},{"title":"Redis常用配置","date":"2019-08-28T10:19:39.000Z","_content":"\n### redis.cof常见配置说明\n1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程\n  daemonize no\n2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定\n  pidfile /var/run/redis.pid\n3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字\n  port 6379\n4. 绑定的主机地址\n  bind 127.0.0.1\n5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能\n  timeout 300\n6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose\n  loglevel verbose\n7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null\n  logfile stdout\n8. 设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id\n  databases 16\n9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\n  save \n  Redis默认配置文件中提供了三个条件：\n  save 900 1\n  save 300 10\n  save 60 10000\n  分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。\n10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大\n  rdbcompression yes\n11. 指定本地数据库文件名，默认值为dump.rdb\n  dbfilename dump.rdb\n12. 指定本地数据库存放目录\n  dir ./\n13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步\n  slaveof \n14. 当master服务设置了密码保护时，slav服务连接master的密码\n  masterauth \n15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH 命令提供密码，默认关闭\n  requirepass foobared\n16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息\n  maxclients 128\n17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区\n  maxmemory \n18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no\n  appendonly no\n19. 指定更新日志文件名，默认为appendonly.aof\n   appendfilename appendonly.aof\n20. 指定更新日志条件，共有3个可选值： \n  no：表示等操作系统进行数据缓存同步到磁盘（快） \n  always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） \n  everysec：表示每秒同步一次（折衷，默认值）\n  appendfsync everysec\n21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）\n   vm-enabled no\n22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享\n   vm-swap-file /tmp/redis.swap\n23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0\n   vm-max-memory 0\n24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值\n   vm-page-size 32\n25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。\n   vm-pages 134217728\n26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4\n   vm-max-threads 4\n27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启\n  glueoutputbuf yes\n28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法\n  hash-max-zipmap-entries 64\n  hash-max-zipmap-value 512\n29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）\n  activerehashing yes\n30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件\n  include /path/to/local.conf\n","source":"_posts/Redis常用配置.md","raw":"---\ntitle: Redis常用配置\ndate: 2019-08-28 18:19:39\ntags: redis\ncategories: 配置文件\n---\n\n### redis.cof常见配置说明\n1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程\n  daemonize no\n2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定\n  pidfile /var/run/redis.pid\n3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字\n  port 6379\n4. 绑定的主机地址\n  bind 127.0.0.1\n5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能\n  timeout 300\n6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose\n  loglevel verbose\n7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null\n  logfile stdout\n8. 设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id\n  databases 16\n9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\n  save \n  Redis默认配置文件中提供了三个条件：\n  save 900 1\n  save 300 10\n  save 60 10000\n  分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。\n10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大\n  rdbcompression yes\n11. 指定本地数据库文件名，默认值为dump.rdb\n  dbfilename dump.rdb\n12. 指定本地数据库存放目录\n  dir ./\n13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步\n  slaveof \n14. 当master服务设置了密码保护时，slav服务连接master的密码\n  masterauth \n15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH 命令提供密码，默认关闭\n  requirepass foobared\n16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息\n  maxclients 128\n17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区\n  maxmemory \n18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no\n  appendonly no\n19. 指定更新日志文件名，默认为appendonly.aof\n   appendfilename appendonly.aof\n20. 指定更新日志条件，共有3个可选值： \n  no：表示等操作系统进行数据缓存同步到磁盘（快） \n  always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） \n  everysec：表示每秒同步一次（折衷，默认值）\n  appendfsync everysec\n21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）\n   vm-enabled no\n22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享\n   vm-swap-file /tmp/redis.swap\n23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0\n   vm-max-memory 0\n24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值\n   vm-page-size 32\n25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。\n   vm-pages 134217728\n26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4\n   vm-max-threads 4\n27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启\n  glueoutputbuf yes\n28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法\n  hash-max-zipmap-entries 64\n  hash-max-zipmap-value 512\n29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）\n  activerehashing yes\n30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件\n  include /path/to/local.conf\n","slug":"Redis常用配置","published":1,"updated":"2019-08-28T10:21:07.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8ost000zagtngqh2j2cw","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"redis-cof常见配置说明\"><a href=\"#redis-cof常见配置说明\" class=\"headerlink\" title=\"redis.cof常见配置说明\"></a>redis.cof常见配置说明</h3><ol>\n<li>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程<br>daemonize no</li>\n<li>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定<br>pidfile /var/run/redis.pid</li>\n<li>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字<br>port 6379</li>\n<li>绑定的主机地址<br>bind 127.0.0.1</li>\n<li>当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能<br>timeout 300</li>\n<li>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose<br>loglevel verbose</li>\n<li>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null<br>logfile stdout</li>\n<li>设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id<br>databases 16</li>\n<li>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合<br>save<br>Redis默认配置文件中提供了三个条件：<br>save 900 1<br>save 300 10<br>save 60 10000<br>分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</li>\n<li>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大<br>rdbcompression yes</li>\n<li>指定本地数据库文件名，默认值为dump.rdb<br>dbfilename dump.rdb</li>\n<li>指定本地数据库存放目录<br>dir ./</li>\n<li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步<br>slaveof </li>\n<li>当master服务设置了密码保护时，slav服务连接master的密码<br>masterauth </li>\n<li>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH 命令提供密码，默认关闭<br>requirepass foobared</li>\n<li>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息<br>maxclients 128</li>\n<li>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区<br>maxmemory </li>\n<li>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no<br>appendonly no</li>\n<li>指定更新日志文件名，默认为appendonly.aof<br>appendfilename appendonly.aof</li>\n<li>指定更新日志条件，共有3个可选值：<br>no：表示等操作系统进行数据缓存同步到磁盘（快）<br>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）<br>everysec：表示每秒同步一次（折衷，默认值）<br>appendfsync everysec</li>\n<li>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）<br>vm-enabled no</li>\n<li>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享<br>vm-swap-file /tmp/redis.swap</li>\n<li>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0<br>vm-max-memory 0</li>\n<li>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值<br>vm-page-size 32</li>\n<li>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。<br>vm-pages 134217728</li>\n<li>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4<br>vm-max-threads 4</li>\n<li>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启<br>glueoutputbuf yes</li>\n<li>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法<br>hash-max-zipmap-entries 64<br>hash-max-zipmap-value 512</li>\n<li>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）<br>activerehashing yes</li>\n<li>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件<br>include /path/to/local.conf</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"redis-cof常见配置说明\"><a href=\"#redis-cof常见配置说明\" class=\"headerlink\" title=\"redis.cof常见配置说明\"></a>redis.cof常见配置说明</h3><ol>\n<li>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程<br>daemonize no</li>\n<li>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定<br>pidfile /var/run/redis.pid</li>\n<li>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字<br>port 6379</li>\n<li>绑定的主机地址<br>bind 127.0.0.1</li>\n<li>当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能<br>timeout 300</li>\n<li>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose<br>loglevel verbose</li>\n<li>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null<br>logfile stdout</li>\n<li>设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id<br>databases 16</li>\n<li>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合<br>save<br>Redis默认配置文件中提供了三个条件：<br>save 900 1<br>save 300 10<br>save 60 10000<br>分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</li>\n<li>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大<br>rdbcompression yes</li>\n<li>指定本地数据库文件名，默认值为dump.rdb<br>dbfilename dump.rdb</li>\n<li>指定本地数据库存放目录<br>dir ./</li>\n<li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步<br>slaveof </li>\n<li>当master服务设置了密码保护时，slav服务连接master的密码<br>masterauth </li>\n<li>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH 命令提供密码，默认关闭<br>requirepass foobared</li>\n<li>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息<br>maxclients 128</li>\n<li>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区<br>maxmemory </li>\n<li>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no<br>appendonly no</li>\n<li>指定更新日志文件名，默认为appendonly.aof<br>appendfilename appendonly.aof</li>\n<li>指定更新日志条件，共有3个可选值：<br>no：表示等操作系统进行数据缓存同步到磁盘（快）<br>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）<br>everysec：表示每秒同步一次（折衷，默认值）<br>appendfsync everysec</li>\n<li>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）<br>vm-enabled no</li>\n<li>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享<br>vm-swap-file /tmp/redis.swap</li>\n<li>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0<br>vm-max-memory 0</li>\n<li>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值<br>vm-page-size 32</li>\n<li>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。<br>vm-pages 134217728</li>\n<li>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4<br>vm-max-threads 4</li>\n<li>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启<br>glueoutputbuf yes</li>\n<li>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法<br>hash-max-zipmap-entries 64<br>hash-max-zipmap-value 512</li>\n<li>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）<br>activerehashing yes</li>\n<li>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件<br>include /path/to/local.conf</li>\n</ol>\n"},{"title":"使用Hexo搭建博客系统","date":"2019-08-27T22:29:42.000Z","_content":"### Hexo是什么\n- Hexo是Node编写的一个基于markdown引擎的用来快速开发静态博客系统的框架；\n- 官方网站：[hexo.io](https://hexo.io/ \"hexo.io\");\n\n### Hexo怎么用\n- 准备环境\n1. 安装node.js,[下载地址](https://nodejs.org/en/);\n2. 安装git,[下载地址](https://git-scm.com/);\n- 安装 hexo-cli \n1. 打开GitBash，执行`$ npm install -g hexo-cli`;\n2. 创建一个hexo的工作目录，进入目录执行`hexo init <folder>`;\n3. 进入初始化的那个目录，执行`npm install`来构建hexo并安装相应依赖;\n4. 配置_config.yml文件;\n\t```\n\t# Site\n\ttitle: Jmzc's Blog\n\tsubtitle:\n\tdescription: Java,Study,Notes,Daily Life,\n\tkeywords:\n\tauthor: Jmzc\n\tlanguage: zh-CN\n\ttimezone:\n\n\t# URL\n\t## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n\turl: https://jmzc4j.github.io\n\troot: /\n\tpermalink: :year/:month/:day/:title/\n\tpermalink_defaults:\n\n\t# Deployment\n\t## Docs: https://hexo.io/docs/deployment.html\n\tdeploy:\n\t  type: git\n\t  repo: git@github.com:jmzc4j/jmzc4j.github.io.git\n\t  branch: master\n\t```\n5. 执行`hexo new <title>` 新建一个blog；\n6. 在hexo根目录的source/_posts/找到title.md文件进行博客编辑;\n7. 执行`hexo g 或 hexo generate` 生成html静态页面（该页面在pubic文件夹下）\n8. 执行`hexo s 或 hexo server` 启动hexo服务在本地进行测试；\n9. 执行`hexo d 或 hexo devlop` 将生成的静态页发布到github上;\n- 推送源码到github\n1. `git init`\n2. `ssh-keygen -C 'jmzc-blog'`,然后将家目录中的公钥复制到github上\n3. `git remote add hexo-ssh git@github.com:jmzc4j/jmzc4j.github.io.git`\n4. `git checkout -b source`\n5. `git add .`\n6. `git commit -m 'hexo init'`\n7. `git push hexo-ssh source` \n\n### 视频教程\n{% xvideos //player.bilibili.com/player.html?aid=55851824&cid=97634618&page=1 %}\n","source":"_posts/使用Hexo搭建博客系统.md","raw":"---\ntitle: 使用Hexo搭建博客系统\ndate: 2019-08-28 06:29:42\ntags: hexo\ncategories: 学习笔记\n---\n### Hexo是什么\n- Hexo是Node编写的一个基于markdown引擎的用来快速开发静态博客系统的框架；\n- 官方网站：[hexo.io](https://hexo.io/ \"hexo.io\");\n\n### Hexo怎么用\n- 准备环境\n1. 安装node.js,[下载地址](https://nodejs.org/en/);\n2. 安装git,[下载地址](https://git-scm.com/);\n- 安装 hexo-cli \n1. 打开GitBash，执行`$ npm install -g hexo-cli`;\n2. 创建一个hexo的工作目录，进入目录执行`hexo init <folder>`;\n3. 进入初始化的那个目录，执行`npm install`来构建hexo并安装相应依赖;\n4. 配置_config.yml文件;\n\t```\n\t# Site\n\ttitle: Jmzc's Blog\n\tsubtitle:\n\tdescription: Java,Study,Notes,Daily Life,\n\tkeywords:\n\tauthor: Jmzc\n\tlanguage: zh-CN\n\ttimezone:\n\n\t# URL\n\t## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n\turl: https://jmzc4j.github.io\n\troot: /\n\tpermalink: :year/:month/:day/:title/\n\tpermalink_defaults:\n\n\t# Deployment\n\t## Docs: https://hexo.io/docs/deployment.html\n\tdeploy:\n\t  type: git\n\t  repo: git@github.com:jmzc4j/jmzc4j.github.io.git\n\t  branch: master\n\t```\n5. 执行`hexo new <title>` 新建一个blog；\n6. 在hexo根目录的source/_posts/找到title.md文件进行博客编辑;\n7. 执行`hexo g 或 hexo generate` 生成html静态页面（该页面在pubic文件夹下）\n8. 执行`hexo s 或 hexo server` 启动hexo服务在本地进行测试；\n9. 执行`hexo d 或 hexo devlop` 将生成的静态页发布到github上;\n- 推送源码到github\n1. `git init`\n2. `ssh-keygen -C 'jmzc-blog'`,然后将家目录中的公钥复制到github上\n3. `git remote add hexo-ssh git@github.com:jmzc4j/jmzc4j.github.io.git`\n4. `git checkout -b source`\n5. `git add .`\n6. `git commit -m 'hexo init'`\n7. `git push hexo-ssh source` \n\n### 视频教程\n{% xvideos //player.bilibili.com/player.html?aid=55851824&cid=97634618&page=1 %}\n","slug":"使用Hexo搭建博客系统","published":1,"updated":"2019-08-29T12:13:08.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8osx0014agtnl7xlsmdr","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"Hexo是什么\"><a href=\"#Hexo是什么\" class=\"headerlink\" title=\"Hexo是什么\"></a>Hexo是什么</h3><ul>\n<li>Hexo是Node编写的一个基于markdown引擎的用来快速开发静态博客系统的框架；</li>\n<li>官方网站：<a href=\"https://hexo.io/\" title=\"hexo.io\" target=\"_blank\" rel=\"noopener\">hexo.io</a>;</li>\n</ul>\n<h3 id=\"Hexo怎么用\"><a href=\"#Hexo怎么用\" class=\"headerlink\" title=\"Hexo怎么用\"></a>Hexo怎么用</h3><ul>\n<li>准备环境</li>\n</ul>\n<ol>\n<li>安装node.js,<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">下载地址</a>;</li>\n<li>安装git,<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">下载地址</a>;</li>\n</ol>\n<ul>\n<li>安装 hexo-cli </li>\n</ul>\n<ol>\n<li><p>打开GitBash，执行<code>$ npm install -g hexo-cli</code>;</p>\n</li>\n<li><p>创建一个hexo的工作目录，进入目录执行<code>hexo init &lt;folder&gt;</code>;</p>\n</li>\n<li><p>进入初始化的那个目录，执行<code>npm install</code>来构建hexo并安装相应依赖;</p>\n</li>\n<li><p>配置_config.yml文件;</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: Jmzc&apos;s Blog</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description: Java,Study,Notes,Daily Life,</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: Jmzc</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: https://jmzc4j.github.io</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:jmzc4j/jmzc4j.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>hexo new &lt;title&gt;</code> 新建一个blog；</p>\n</li>\n<li><p>在hexo根目录的source/_posts/找到title.md文件进行博客编辑;</p>\n</li>\n<li><p>执行<code>hexo g 或 hexo generate</code> 生成html静态页面（该页面在pubic文件夹下）</p>\n</li>\n<li><p>执行<code>hexo s 或 hexo server</code> 启动hexo服务在本地进行测试；</p>\n</li>\n<li><p>执行<code>hexo d 或 hexo devlop</code> 将生成的静态页发布到github上;</p>\n</li>\n</ol>\n<ul>\n<li>推送源码到github</li>\n</ul>\n<ol>\n<li><code>git init</code></li>\n<li><code>ssh-keygen -C &#39;jmzc-blog&#39;</code>,然后将家目录中的公钥复制到github上</li>\n<li><code>git remote add hexo-ssh git@github.com:jmzc4j/jmzc4j.github.io.git</code></li>\n<li><code>git checkout -b source</code></li>\n<li><code>git add .</code></li>\n<li><code>git commit -m &#39;hexo init&#39;</code></li>\n<li><code>git push hexo-ssh source</code> </li>\n</ol>\n<h3 id=\"视频教程\"><a href=\"#视频教程\" class=\"headerlink\" title=\"视频教程\"></a>视频教程</h3><iframe src=\"//player.bilibili.com/player.html?aid=55851824&cid=97634618&page=1\" width=\"510\" height=\"400\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Hexo是什么\"><a href=\"#Hexo是什么\" class=\"headerlink\" title=\"Hexo是什么\"></a>Hexo是什么</h3><ul>\n<li>Hexo是Node编写的一个基于markdown引擎的用来快速开发静态博客系统的框架；</li>\n<li>官方网站：<a href=\"https://hexo.io/\" title=\"hexo.io\" target=\"_blank\" rel=\"noopener\">hexo.io</a>;</li>\n</ul>\n<h3 id=\"Hexo怎么用\"><a href=\"#Hexo怎么用\" class=\"headerlink\" title=\"Hexo怎么用\"></a>Hexo怎么用</h3><ul>\n<li>准备环境</li>\n</ul>\n<ol>\n<li>安装node.js,<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">下载地址</a>;</li>\n<li>安装git,<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">下载地址</a>;</li>\n</ol>\n<ul>\n<li>安装 hexo-cli </li>\n</ul>\n<ol>\n<li><p>打开GitBash，执行<code>$ npm install -g hexo-cli</code>;</p>\n</li>\n<li><p>创建一个hexo的工作目录，进入目录执行<code>hexo init &lt;folder&gt;</code>;</p>\n</li>\n<li><p>进入初始化的那个目录，执行<code>npm install</code>来构建hexo并安装相应依赖;</p>\n</li>\n<li><p>配置_config.yml文件;</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: Jmzc&apos;s Blog</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description: Java,Study,Notes,Daily Life,</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: Jmzc</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: https://jmzc4j.github.io</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:jmzc4j/jmzc4j.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>hexo new &lt;title&gt;</code> 新建一个blog；</p>\n</li>\n<li><p>在hexo根目录的source/_posts/找到title.md文件进行博客编辑;</p>\n</li>\n<li><p>执行<code>hexo g 或 hexo generate</code> 生成html静态页面（该页面在pubic文件夹下）</p>\n</li>\n<li><p>执行<code>hexo s 或 hexo server</code> 启动hexo服务在本地进行测试；</p>\n</li>\n<li><p>执行<code>hexo d 或 hexo devlop</code> 将生成的静态页发布到github上;</p>\n</li>\n</ol>\n<ul>\n<li>推送源码到github</li>\n</ul>\n<ol>\n<li><code>git init</code></li>\n<li><code>ssh-keygen -C &#39;jmzc-blog&#39;</code>,然后将家目录中的公钥复制到github上</li>\n<li><code>git remote add hexo-ssh git@github.com:jmzc4j/jmzc4j.github.io.git</code></li>\n<li><code>git checkout -b source</code></li>\n<li><code>git add .</code></li>\n<li><code>git commit -m &#39;hexo init&#39;</code></li>\n<li><code>git push hexo-ssh source</code> </li>\n</ol>\n<h3 id=\"视频教程\"><a href=\"#视频教程\" class=\"headerlink\" title=\"视频教程\"></a>视频教程</h3><iframe src=\"//player.bilibili.com/player.html?aid=55851824&cid=97634618&page=1\" width=\"510\" height=\"400\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n"},{"title":"常用数据库的参数配置","date":"2019-08-28T10:37:28.000Z","_content":"### JDBC的URL\nJDBC的URL＝协议名＋子协议名＋数据源名。\n协议名总是“jdbc”。\n子协议名由JDBC驱动程序的编写者决定。\n数据源名也可能包含用户与口令等信息；这些信息也可单独提供。\n\n### mysql\nmysql.driver=com.mysql.jdbc.Driver\nmysql.url=jdbc:mysql://192.168.157.130:3306/mybatis01?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false\nmysql.username=root\nmysql.password=root\n\n### oracle\noracle.driver=oracle.jdbc.driver.OracleDriver\noracle.url=jdbc:oracle:thin:@127.0.0.1:1521:xe\noracle.username=system\noracle.password=abc123\n\n### sql server\nsqlServer.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver\nsqlServer.url=jdbc:sqlserver://localhost:1433;DatabaseName=mydb\nsqlServer.username=sa\nsqlServer.password=123\n\n\n","source":"_posts/常用数据库的参数配置.md","raw":"---\ntitle: 常用数据库的参数配置\ndate: 2019-08-28 18:37:28\ntags: database\ncategories: 配置文件\n---\n### JDBC的URL\nJDBC的URL＝协议名＋子协议名＋数据源名。\n协议名总是“jdbc”。\n子协议名由JDBC驱动程序的编写者决定。\n数据源名也可能包含用户与口令等信息；这些信息也可单独提供。\n\n### mysql\nmysql.driver=com.mysql.jdbc.Driver\nmysql.url=jdbc:mysql://192.168.157.130:3306/mybatis01?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false\nmysql.username=root\nmysql.password=root\n\n### oracle\noracle.driver=oracle.jdbc.driver.OracleDriver\noracle.url=jdbc:oracle:thin:@127.0.0.1:1521:xe\noracle.username=system\noracle.password=abc123\n\n### sql server\nsqlServer.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver\nsqlServer.url=jdbc:sqlserver://localhost:1433;DatabaseName=mydb\nsqlServer.username=sa\nsqlServer.password=123\n\n\n","slug":"常用数据库的参数配置","published":1,"updated":"2019-08-28T10:41:01.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8osz0016agtn3ld2h1lj","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"JDBC的URL\"><a href=\"#JDBC的URL\" class=\"headerlink\" title=\"JDBC的URL\"></a>JDBC的URL</h3><p>JDBC的URL＝协议名＋子协议名＋数据源名。<br>协议名总是“jdbc”。<br>子协议名由JDBC驱动程序的编写者决定。<br>数据源名也可能包含用户与口令等信息；这些信息也可单独提供。</p>\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><p>mysql.driver=com.mysql.jdbc.Driver<br>mysql.url=jdbc:mysql://192.168.157.130:3306/mybatis01?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false<br>mysql.username=root<br>mysql.password=root</p>\n<h3 id=\"oracle\"><a href=\"#oracle\" class=\"headerlink\" title=\"oracle\"></a>oracle</h3><p>oracle.driver=oracle.jdbc.driver.OracleDriver<br>oracle.url=jdbc:oracle:thin:@127.0.0.1:1521:xe<br>oracle.username=system<br>oracle.password=abc123</p>\n<h3 id=\"sql-server\"><a href=\"#sql-server\" class=\"headerlink\" title=\"sql server\"></a>sql server</h3><p>sqlServer.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver<br>sqlServer.url=jdbc:sqlserver://localhost:1433;DatabaseName=mydb<br>sqlServer.username=sa<br>sqlServer.password=123</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JDBC的URL\"><a href=\"#JDBC的URL\" class=\"headerlink\" title=\"JDBC的URL\"></a>JDBC的URL</h3><p>JDBC的URL＝协议名＋子协议名＋数据源名。<br>协议名总是“jdbc”。<br>子协议名由JDBC驱动程序的编写者决定。<br>数据源名也可能包含用户与口令等信息；这些信息也可单独提供。</p>\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><p>mysql.driver=com.mysql.jdbc.Driver<br>mysql.url=jdbc:mysql://192.168.157.130:3306/mybatis01?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false<br>mysql.username=root<br>mysql.password=root</p>\n<h3 id=\"oracle\"><a href=\"#oracle\" class=\"headerlink\" title=\"oracle\"></a>oracle</h3><p>oracle.driver=oracle.jdbc.driver.OracleDriver<br>oracle.url=jdbc:oracle:thin:@127.0.0.1:1521:xe<br>oracle.username=system<br>oracle.password=abc123</p>\n<h3 id=\"sql-server\"><a href=\"#sql-server\" class=\"headerlink\" title=\"sql server\"></a>sql server</h3><p>sqlServer.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver<br>sqlServer.url=jdbc:sqlserver://localhost:1433;DatabaseName=mydb<br>sqlServer.username=sa<br>sqlServer.password=123</p>\n"},{"title":"Java基础","date":"2019-08-29T04:57:13.000Z","_content":"### 数据类型\n> Java作为强类型语言，将数据类型分成基本类型和引用类型。\n- 基本数据类型（primitive）：byte、short、int、long、float、double、char、boolean(4类8种)；\n- 引用数据类型（reference）：array、class、interface（除了基本类型的都是引用类型）；\n- 作为面向对象的语言，每种基本数据类型都有其对应的包装类型Number(6种)、Character、Boolean；\n### 流程控制\n> 和其他语言一样分成顺序、选择和循环结构。\n- 选择：if-else、switch-case；\n- 循环：do-while、while、for、foreach；\n### 面向对象\n> 面向过程和面向对象\n- 面向过程：强调功能本身，关注的是如何分步的去完成功能，将方法或函数看做是一个基本单位；此时的程序编写者就是一个执行者；\n- 面向对象：强调具备该功能的对象，关注的是如何指挥对象去完成功能，将类或者对象看做是一个基本单位；此时的程序编写者就是一个指挥者；\n- 面向对象编程：就是找寻对象、创建对象、使用对象、维护对象间关系的过程；\n\n> 类和对象\n- 类：将现实世界中的事物在概念世界的抽象；反映到Java语言中就是一个类或者接口。\n- 对象：就是那个事物本身，是个实实在在的个体；反映到Java语言中就是类的实例或者接口的具体实现。\n- Java中类的组成：类中有属性（Field）、方法（Method）、构造器（Constructor）基础元素，还可以有内部类元素。\n\n> 方法\n- 方法可以说就是一个最小的封装单位，通常由方法名、参数列表、方法体、返回值类型和访问权限修饰符组成；\n- 方法重载：一个类中出现方法名相同、参数列表不同的现象；\n- 方法重写：子父类中出现一模一样的方法的现象（即方法名、参数列表和返回值都一样）；\n- 重写的方法不能比父类中的方法的出现更多的异常；也不能比父类中的方法的访问权限更严格；静态方法不能重写；\n\n### 面向对象的三大特性\n> 封装（encapsulation）：隐藏对象的属性和实现细节，并提供对外的访问方式；具体就是使用private私有属性并提供setter和getter方法。\n- 不可见性：细节不可见；\n- 安全性：避免了非法数据的产生；\n- 复用性：不论内部如何变，类始终不变；\n\n> 继承（inheritance）：将多个类中的公共部分提取到一个单独的类中，让这个类和多个类产生了“is a”的关系，将这种关系称之为继承；使用extends表示类或者接口之间的继承关系。\n- 父类也称之为基类、超类（superclass）；子类也称之为派生类（subclass）；\n- 一个类有且只能有一个父类；一个父类可以有多个子类（单继承）；\n- 如果B继承A，C继承B，那么C也间接继承了A（多层继承），java.lang.Object类是继承体系中的根父类；\n- 可以继承父类中出构造外所有的结构，但因为封装的不可见性，则不能直接访问私有成员；\n- 子类实例化必先进行父类的初始化，就是说子类构造器中的必然有一个构造器的第一行是super()；\n- 继承减少了代码的冗余，提高了代码复用性；\n\n> 多态（polymorphism）：同一对象在运行时的不同表现形态；表现形式是父类引用指向子类对象。\n- 前提：存在继承或实现关系；有方法的重写或方法的实现；\n- 对属性来说是不存在多态现象的，就是说成员变量看左边；\n- 对方法来说：编译时看父类的引用，运行时看具体的子类实例（动态绑定）；\n- 父类不能使用子类中的成员，若想使用则需要向下转型(instanceof)；\n- 当使用子类重写的方法而不是父类方法的现象称为虚拟方法调用，此时父类中的那个方法称之为虚拟方法（virtual method）；\n\n> 抽象类与接口\n- 当不要类创建对象时，我们可以使用abstract修饰类，这样的类就是一个抽象类；当不确定方法的具体实现时，可以使用abstract修饰，这样的方法称之为抽象方法；有抽象方法的类必须是抽象类，但抽象类不一定有抽象方法（模板设计模式）；\n- 接口是类并列的一个结构，使用interface定义；JDK1.8之前，接口中只能有全局常亮和抽象方法；JDK1.8开始可以有静态方法和默认方法且默认方法只能通过接口调用；当默认方法和继承的父类方法一模一样时考虑类优先原则；\n- 抽象类中通常定义基本功能，接口中定义扩展功能；接口反映的是“like a”的关系，是一种规则，一种可能性；\n\n> this、super、static、final\n- this：当前对象的引用（准确说是this所在的方法的所在类的对象）；\n- super：父类对象的引用，和this一样都能用来区分同名成员；\n- static：静态，用此修饰的成员变量称之为类变量，同样的用此修饰的成员方法称之为静态方法（类方法）；\n- final：提升变量为常量（只能赋值1次）；修饰类则该类不能被继承；修改方法则该方法不能被重写；\n\n### 异常\n> 异常就是在程序运行过程中出现语法和逻辑错误之外的其他不正常情况的现象；有抛出和捕捉两种处理方式；\n- 在异常的继承体系中，Throwable是Exception和Error的顶级父类，在Exception下有一个特殊的RuntimeException子类；\n- 适当的处理异常能提高程序的健壮性和用户体验；\n\n> try-catch-finally、throws、throw\n- try-catch-finally：捕获并处理异常；try块中是可能出现问题的代码；chatch块中是对问题的解决方式的代码；finally块中是在虚拟机不退出的情况下都会执行的代码；\n- throws：抛出一个或多个异常类型，提示方法调用者该方法可能会出现问题；\n- throw：手动抛出一个异常对象，如该对象不是RuntimeException类型的子类，则需要显式throws声明；\n\n> 自定义异常\n- 当我们明确的知道如何解决问题时，通常自定义异常类继承Exception，然后throws该异常;\n- 当不知道如何解决时，通常自定义类继承RuntimeException，然后好手动抛出一个改异常对象；\n\n### 常用类与方法\n> java.lang.Object\n- clone()、finalize()、hashCode()、equals()、toString()、wait()、notify()、notifyAll()\n\n> java.lang.Runtime（一个典型的单例设计模式）\n- getRuntime()、gc()、maxMemory()、totalMemory\n\n> java.lang.System\n- currentTimeMillis()、nanoTime()、arraycopy()、exit(0)、gc()、getProperties()\n\n> java.lang.String\n- concat()、join()、split()、subString()\n- replace()、replaceFirst()、replaceAll()、compareTo()、equals()、equalsIgnoreCase()、matches()\n- length()、charAt()、contains()、indexOf()、lastIndexOf()、startsWith()、endsWith()\n- valueOf()、toCharArray()、getBytes()、format()、toUpperCase()、toLowerCase()\n- trim()、isEmpty()、intern()\n- new String(byte[])、new String(char[])、new String(StringBuilder)\n\n> java.lang.StringBuffer与java.lang.StringBuilder\n- append()、insert()、delete()、deleteCharAt()、setCharAt()、replace()、length()、charAt()、indexOf()、lastIndexOf()、toString()、subString()\n- 默认容量16，扩容2*16+2\n\n> java.lang.Math\n- Math.PI、Math.E\n- abs()、ceil()、floor()、round()、max()、min()、random()\n\n> java.util.Arrays\n- asList()、sort()、binarySearch()、copyOf()、equals()、toString()、fill()\n\n> java.util.Date与java.sql.Date\n- getTime()、setTime()、after()、before()、new Date()、new Date(long)\n- new Date(long)、valueOf()\n\n> java.util.Calendar\n- getInstance()、get()set()、add()、before()、after()、常量\n\n> java.text.SimpleDateformat\n- new SimpleDateFormat(String)、format()、parse()\n\n> java.time.LocalDateTime\n- now()、of()、getXxx()、plusXxx()、minusXxx()、withXxx()\n\n> java.time.Instant\n- now()、plus()、minus()\n\n> java.time.format.DateTimeFormatter\n- DateTimeFormatter.ISO_LOCAL_DATE_TIME\n- ofPattern(String)、format()、parse()\n\n> java.lang.Integer\n- valueOf()、compare()、compareTo()、parseInt()、xxxValue()、toString()\n\n> java.math.BigDecimal\n- divide(BigDecimal divisor, int scale, int roundingMode)\n\n> java.security,].MessageDigest(md5,sha-256)\n- getInstance(String algorithm)、digest(byte[])\n\n> java.util.Base64\n- getDecode()、getEncode()\n- decode()、encode()\n\n### 线程\n> 程序、进程和线程\n- 程序：为实现某一功能，使用编程语言编写的一段静态代码或者是一组指令的集合；\n- 进程：运行起来的程序，是资源分配的基本单位；\n- 线程：程序中的一条执行路径，是程序执行的基本单位；\n- 如果一个程序在同一时间可以并行的执行多个线程，那个称该程序为多线程程序；\n\n> 创建线程的方式\n- extends Thread：覆盖run()\n- implements Runbale：覆盖run()\n- implements Callable->FutureTask：覆盖call()\n- Executors->ThreadPoolExecutor->submit()/execute()/shutdown()\n\n> 线程中常用方法\n- currentThread()、getName()、setName()、setPriority()、setDaemon()\n- start()、sleep()、join()、yield()、interrupt()\n\n> 线程状态\n- 新建（new）\n- 就绪（start、yield、notify）\n- 运行（cpu分配了执行权）\n- 阻塞（sleep、join、等待同步锁、wait）\n- 死亡（run结束、出现异常、interrupt）\n\n> 出现多线程问题的原因\n- 多线程环境、有共享数据且有多条语句操作共享数据\n\n> 线程同步\n- syncronized同步代码块：锁对象任意，多个线程共用同一把锁；\n- syncnizzed同步方法：成员方法锁为this、类方法锁为clazz；\n- reentrantLock锁：lock(),unlock()\n- lock.newCondition()-> await(),signal()\n\n> 线程通信\n- wait、notify\n- await、signal\n\n### 注解和枚举\n> 注解可以理解为源代码的补充代码，与反射技术配合使用\n- @interface：定义注解\n- 元注解：（描述注解的注解）  \n  target：定义使用注解的元素类型，使用ElementType枚举类  \n  retention：定义注解的生命周期，使用RetentionPolicy枚举类   \n  inherited：\n  document：\n  repeatable：\n\n> 枚举类就是定义有限个公共的全局对象常量的类。\n- enum定义枚举类，最直接父类是Enum；当一个枚举类中只有一个常亮时该枚举类就是一个单例的；\n\n### 集合\n> Collection接口为单列集合的根接口，其子接口有List与Set。\n\n> List接口存储有序，元素可重复；实现类有ArrayList、LinkedList、Vector、Stack。\n- ArrayList和Vector底层数据结构是数组，数组默认长度是10，扩容方式前者1.5倍后者2倍；查询快，插入和删除慢；\n- LinkedList：底层数据结果是双向列表，查询慢，插入和删除快；\n\n> Set接口存储无序，元素不可重复；实现类有HashSet、LinkedHashSet、TreeSet。\n- HashSet：底层使用HashMap，即数组+链表+红黑树(1.8)的结构,默认容量16，加载因子0.75，临时容量12；当链表长度超过8，容量超过64则转换为红黑树存储。大概原理取得元素hashCode，通过散列算法计算元素位置；当该位置无元素直接添加，如果有元素那么要判断hashcode和equals的结果，hashcode和equals完全一样则不能添加；\n- LinkedHashSet：底层在HashSet的基础上又多了一个双向链表来记录存储数据的顺序，所有取出和存储顺序是一致的；\n- TreeSet：底层是红黑树，通过compareTo()或者compare()方法来确定元素位置。\n\n> Collection接口方法\n- add、addAll、clear、size、isEmpty、hashcode\n- remove、removeALl、contains、containsAll、retainALl、equals\n- toArray，iterator\n\n> ArrayList特有方法\n- add(int,E)、get(int)、set(int,E)、remove(int)、subList(int,int)\n\n> Map是双列集合的根接口，其实现类有HashMap、LinkedHashMap、TreeMap、Hashtable、Propeties\n- 以键值对的方式存储元素，先将键值对存储到entry中然后将entry存到Map中；\n- 存储无序，元素不可重复，因为key是Set、value是Collection；\n\n> Map的方法\n- put、get、values、keySet、entrySet、size、isEmpty、remove、containsKey、containsValue、clear\n\n### 泛型\n> 泛型是参数化类型，就是类型的标记；实例化或者调用方法时需要明确具体类型；\n- 可以用在类、接口、方法上；泛型方法可以是静态的；泛型方法的泛型类型不需要和类或接口中的泛型一致；\n- 通配符：？，？extends G，？super G；不能做写操作，但可以做读操作；\n\n### 文件和IO流\n> 将文件系统抽象成File类，通过该类可以进行文件或目录的创建、删除、属性查看、目录内容查看等操作。\n\n> java.io.File中的常用方法\n- File.separator\n- isFile()、isDirectory()、exists()、canRead()、canWrite()、isHidden()\n- createNewFile()、mkdirs()、delete()、getParent() 、getName()、getAbsolutePath()\n- list()、listFiles()、lastModified()、length()\n\n> io流分类\n- 按数据单位分为字节流和字符流\n- 按流的流向分为输入流和输出流\n- 按流的角色分为节点流（直接作用于文件的流）和处理流（对文件流或其他流的处理）\n\n> \n\n### 网络编程\n\n### 反射\n\n### 正则表达式\n\n### Java8函数式编程\n\n","source":"_posts/Java基础.md","raw":"---\ntitle: Java基础\ndate: 2019-08-29 12:57:13\ntags: java\ncategories: 学习笔记\n---\n### 数据类型\n> Java作为强类型语言，将数据类型分成基本类型和引用类型。\n- 基本数据类型（primitive）：byte、short、int、long、float、double、char、boolean(4类8种)；\n- 引用数据类型（reference）：array、class、interface（除了基本类型的都是引用类型）；\n- 作为面向对象的语言，每种基本数据类型都有其对应的包装类型Number(6种)、Character、Boolean；\n### 流程控制\n> 和其他语言一样分成顺序、选择和循环结构。\n- 选择：if-else、switch-case；\n- 循环：do-while、while、for、foreach；\n### 面向对象\n> 面向过程和面向对象\n- 面向过程：强调功能本身，关注的是如何分步的去完成功能，将方法或函数看做是一个基本单位；此时的程序编写者就是一个执行者；\n- 面向对象：强调具备该功能的对象，关注的是如何指挥对象去完成功能，将类或者对象看做是一个基本单位；此时的程序编写者就是一个指挥者；\n- 面向对象编程：就是找寻对象、创建对象、使用对象、维护对象间关系的过程；\n\n> 类和对象\n- 类：将现实世界中的事物在概念世界的抽象；反映到Java语言中就是一个类或者接口。\n- 对象：就是那个事物本身，是个实实在在的个体；反映到Java语言中就是类的实例或者接口的具体实现。\n- Java中类的组成：类中有属性（Field）、方法（Method）、构造器（Constructor）基础元素，还可以有内部类元素。\n\n> 方法\n- 方法可以说就是一个最小的封装单位，通常由方法名、参数列表、方法体、返回值类型和访问权限修饰符组成；\n- 方法重载：一个类中出现方法名相同、参数列表不同的现象；\n- 方法重写：子父类中出现一模一样的方法的现象（即方法名、参数列表和返回值都一样）；\n- 重写的方法不能比父类中的方法的出现更多的异常；也不能比父类中的方法的访问权限更严格；静态方法不能重写；\n\n### 面向对象的三大特性\n> 封装（encapsulation）：隐藏对象的属性和实现细节，并提供对外的访问方式；具体就是使用private私有属性并提供setter和getter方法。\n- 不可见性：细节不可见；\n- 安全性：避免了非法数据的产生；\n- 复用性：不论内部如何变，类始终不变；\n\n> 继承（inheritance）：将多个类中的公共部分提取到一个单独的类中，让这个类和多个类产生了“is a”的关系，将这种关系称之为继承；使用extends表示类或者接口之间的继承关系。\n- 父类也称之为基类、超类（superclass）；子类也称之为派生类（subclass）；\n- 一个类有且只能有一个父类；一个父类可以有多个子类（单继承）；\n- 如果B继承A，C继承B，那么C也间接继承了A（多层继承），java.lang.Object类是继承体系中的根父类；\n- 可以继承父类中出构造外所有的结构，但因为封装的不可见性，则不能直接访问私有成员；\n- 子类实例化必先进行父类的初始化，就是说子类构造器中的必然有一个构造器的第一行是super()；\n- 继承减少了代码的冗余，提高了代码复用性；\n\n> 多态（polymorphism）：同一对象在运行时的不同表现形态；表现形式是父类引用指向子类对象。\n- 前提：存在继承或实现关系；有方法的重写或方法的实现；\n- 对属性来说是不存在多态现象的，就是说成员变量看左边；\n- 对方法来说：编译时看父类的引用，运行时看具体的子类实例（动态绑定）；\n- 父类不能使用子类中的成员，若想使用则需要向下转型(instanceof)；\n- 当使用子类重写的方法而不是父类方法的现象称为虚拟方法调用，此时父类中的那个方法称之为虚拟方法（virtual method）；\n\n> 抽象类与接口\n- 当不要类创建对象时，我们可以使用abstract修饰类，这样的类就是一个抽象类；当不确定方法的具体实现时，可以使用abstract修饰，这样的方法称之为抽象方法；有抽象方法的类必须是抽象类，但抽象类不一定有抽象方法（模板设计模式）；\n- 接口是类并列的一个结构，使用interface定义；JDK1.8之前，接口中只能有全局常亮和抽象方法；JDK1.8开始可以有静态方法和默认方法且默认方法只能通过接口调用；当默认方法和继承的父类方法一模一样时考虑类优先原则；\n- 抽象类中通常定义基本功能，接口中定义扩展功能；接口反映的是“like a”的关系，是一种规则，一种可能性；\n\n> this、super、static、final\n- this：当前对象的引用（准确说是this所在的方法的所在类的对象）；\n- super：父类对象的引用，和this一样都能用来区分同名成员；\n- static：静态，用此修饰的成员变量称之为类变量，同样的用此修饰的成员方法称之为静态方法（类方法）；\n- final：提升变量为常量（只能赋值1次）；修饰类则该类不能被继承；修改方法则该方法不能被重写；\n\n### 异常\n> 异常就是在程序运行过程中出现语法和逻辑错误之外的其他不正常情况的现象；有抛出和捕捉两种处理方式；\n- 在异常的继承体系中，Throwable是Exception和Error的顶级父类，在Exception下有一个特殊的RuntimeException子类；\n- 适当的处理异常能提高程序的健壮性和用户体验；\n\n> try-catch-finally、throws、throw\n- try-catch-finally：捕获并处理异常；try块中是可能出现问题的代码；chatch块中是对问题的解决方式的代码；finally块中是在虚拟机不退出的情况下都会执行的代码；\n- throws：抛出一个或多个异常类型，提示方法调用者该方法可能会出现问题；\n- throw：手动抛出一个异常对象，如该对象不是RuntimeException类型的子类，则需要显式throws声明；\n\n> 自定义异常\n- 当我们明确的知道如何解决问题时，通常自定义异常类继承Exception，然后throws该异常;\n- 当不知道如何解决时，通常自定义类继承RuntimeException，然后好手动抛出一个改异常对象；\n\n### 常用类与方法\n> java.lang.Object\n- clone()、finalize()、hashCode()、equals()、toString()、wait()、notify()、notifyAll()\n\n> java.lang.Runtime（一个典型的单例设计模式）\n- getRuntime()、gc()、maxMemory()、totalMemory\n\n> java.lang.System\n- currentTimeMillis()、nanoTime()、arraycopy()、exit(0)、gc()、getProperties()\n\n> java.lang.String\n- concat()、join()、split()、subString()\n- replace()、replaceFirst()、replaceAll()、compareTo()、equals()、equalsIgnoreCase()、matches()\n- length()、charAt()、contains()、indexOf()、lastIndexOf()、startsWith()、endsWith()\n- valueOf()、toCharArray()、getBytes()、format()、toUpperCase()、toLowerCase()\n- trim()、isEmpty()、intern()\n- new String(byte[])、new String(char[])、new String(StringBuilder)\n\n> java.lang.StringBuffer与java.lang.StringBuilder\n- append()、insert()、delete()、deleteCharAt()、setCharAt()、replace()、length()、charAt()、indexOf()、lastIndexOf()、toString()、subString()\n- 默认容量16，扩容2*16+2\n\n> java.lang.Math\n- Math.PI、Math.E\n- abs()、ceil()、floor()、round()、max()、min()、random()\n\n> java.util.Arrays\n- asList()、sort()、binarySearch()、copyOf()、equals()、toString()、fill()\n\n> java.util.Date与java.sql.Date\n- getTime()、setTime()、after()、before()、new Date()、new Date(long)\n- new Date(long)、valueOf()\n\n> java.util.Calendar\n- getInstance()、get()set()、add()、before()、after()、常量\n\n> java.text.SimpleDateformat\n- new SimpleDateFormat(String)、format()、parse()\n\n> java.time.LocalDateTime\n- now()、of()、getXxx()、plusXxx()、minusXxx()、withXxx()\n\n> java.time.Instant\n- now()、plus()、minus()\n\n> java.time.format.DateTimeFormatter\n- DateTimeFormatter.ISO_LOCAL_DATE_TIME\n- ofPattern(String)、format()、parse()\n\n> java.lang.Integer\n- valueOf()、compare()、compareTo()、parseInt()、xxxValue()、toString()\n\n> java.math.BigDecimal\n- divide(BigDecimal divisor, int scale, int roundingMode)\n\n> java.security,].MessageDigest(md5,sha-256)\n- getInstance(String algorithm)、digest(byte[])\n\n> java.util.Base64\n- getDecode()、getEncode()\n- decode()、encode()\n\n### 线程\n> 程序、进程和线程\n- 程序：为实现某一功能，使用编程语言编写的一段静态代码或者是一组指令的集合；\n- 进程：运行起来的程序，是资源分配的基本单位；\n- 线程：程序中的一条执行路径，是程序执行的基本单位；\n- 如果一个程序在同一时间可以并行的执行多个线程，那个称该程序为多线程程序；\n\n> 创建线程的方式\n- extends Thread：覆盖run()\n- implements Runbale：覆盖run()\n- implements Callable->FutureTask：覆盖call()\n- Executors->ThreadPoolExecutor->submit()/execute()/shutdown()\n\n> 线程中常用方法\n- currentThread()、getName()、setName()、setPriority()、setDaemon()\n- start()、sleep()、join()、yield()、interrupt()\n\n> 线程状态\n- 新建（new）\n- 就绪（start、yield、notify）\n- 运行（cpu分配了执行权）\n- 阻塞（sleep、join、等待同步锁、wait）\n- 死亡（run结束、出现异常、interrupt）\n\n> 出现多线程问题的原因\n- 多线程环境、有共享数据且有多条语句操作共享数据\n\n> 线程同步\n- syncronized同步代码块：锁对象任意，多个线程共用同一把锁；\n- syncnizzed同步方法：成员方法锁为this、类方法锁为clazz；\n- reentrantLock锁：lock(),unlock()\n- lock.newCondition()-> await(),signal()\n\n> 线程通信\n- wait、notify\n- await、signal\n\n### 注解和枚举\n> 注解可以理解为源代码的补充代码，与反射技术配合使用\n- @interface：定义注解\n- 元注解：（描述注解的注解）  \n  target：定义使用注解的元素类型，使用ElementType枚举类  \n  retention：定义注解的生命周期，使用RetentionPolicy枚举类   \n  inherited：\n  document：\n  repeatable：\n\n> 枚举类就是定义有限个公共的全局对象常量的类。\n- enum定义枚举类，最直接父类是Enum；当一个枚举类中只有一个常亮时该枚举类就是一个单例的；\n\n### 集合\n> Collection接口为单列集合的根接口，其子接口有List与Set。\n\n> List接口存储有序，元素可重复；实现类有ArrayList、LinkedList、Vector、Stack。\n- ArrayList和Vector底层数据结构是数组，数组默认长度是10，扩容方式前者1.5倍后者2倍；查询快，插入和删除慢；\n- LinkedList：底层数据结果是双向列表，查询慢，插入和删除快；\n\n> Set接口存储无序，元素不可重复；实现类有HashSet、LinkedHashSet、TreeSet。\n- HashSet：底层使用HashMap，即数组+链表+红黑树(1.8)的结构,默认容量16，加载因子0.75，临时容量12；当链表长度超过8，容量超过64则转换为红黑树存储。大概原理取得元素hashCode，通过散列算法计算元素位置；当该位置无元素直接添加，如果有元素那么要判断hashcode和equals的结果，hashcode和equals完全一样则不能添加；\n- LinkedHashSet：底层在HashSet的基础上又多了一个双向链表来记录存储数据的顺序，所有取出和存储顺序是一致的；\n- TreeSet：底层是红黑树，通过compareTo()或者compare()方法来确定元素位置。\n\n> Collection接口方法\n- add、addAll、clear、size、isEmpty、hashcode\n- remove、removeALl、contains、containsAll、retainALl、equals\n- toArray，iterator\n\n> ArrayList特有方法\n- add(int,E)、get(int)、set(int,E)、remove(int)、subList(int,int)\n\n> Map是双列集合的根接口，其实现类有HashMap、LinkedHashMap、TreeMap、Hashtable、Propeties\n- 以键值对的方式存储元素，先将键值对存储到entry中然后将entry存到Map中；\n- 存储无序，元素不可重复，因为key是Set、value是Collection；\n\n> Map的方法\n- put、get、values、keySet、entrySet、size、isEmpty、remove、containsKey、containsValue、clear\n\n### 泛型\n> 泛型是参数化类型，就是类型的标记；实例化或者调用方法时需要明确具体类型；\n- 可以用在类、接口、方法上；泛型方法可以是静态的；泛型方法的泛型类型不需要和类或接口中的泛型一致；\n- 通配符：？，？extends G，？super G；不能做写操作，但可以做读操作；\n\n### 文件和IO流\n> 将文件系统抽象成File类，通过该类可以进行文件或目录的创建、删除、属性查看、目录内容查看等操作。\n\n> java.io.File中的常用方法\n- File.separator\n- isFile()、isDirectory()、exists()、canRead()、canWrite()、isHidden()\n- createNewFile()、mkdirs()、delete()、getParent() 、getName()、getAbsolutePath()\n- list()、listFiles()、lastModified()、length()\n\n> io流分类\n- 按数据单位分为字节流和字符流\n- 按流的流向分为输入流和输出流\n- 按流的角色分为节点流（直接作用于文件的流）和处理流（对文件流或其他流的处理）\n\n> \n\n### 网络编程\n\n### 反射\n\n### 正则表达式\n\n### Java8函数式编程\n\n","slug":"Java基础","published":1,"updated":"2019-08-29T05:00:07.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8psa001zagtnb1chu8z3","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><blockquote>\n<p>Java作为强类型语言，将数据类型分成基本类型和引用类型。</p>\n</blockquote>\n<ul>\n<li>基本数据类型（primitive）：byte、short、int、long、float、double、char、boolean(4类8种)；</li>\n<li>引用数据类型（reference）：array、class、interface（除了基本类型的都是引用类型）；</li>\n<li>作为面向对象的语言，每种基本数据类型都有其对应的包装类型Number(6种)、Character、Boolean；<h3 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h3><blockquote>\n<p>和其他语言一样分成顺序、选择和循环结构。</p>\n</blockquote>\n</li>\n<li>选择：if-else、switch-case；</li>\n<li>循环：do-while、while、for、foreach；<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><blockquote>\n<p>面向过程和面向对象</p>\n</blockquote>\n</li>\n<li>面向过程：强调功能本身，关注的是如何分步的去完成功能，将方法或函数看做是一个基本单位；此时的程序编写者就是一个执行者；</li>\n<li>面向对象：强调具备该功能的对象，关注的是如何指挥对象去完成功能，将类或者对象看做是一个基本单位；此时的程序编写者就是一个指挥者；</li>\n<li>面向对象编程：就是找寻对象、创建对象、使用对象、维护对象间关系的过程；</li>\n</ul>\n<blockquote>\n<p>类和对象</p>\n</blockquote>\n<ul>\n<li>类：将现实世界中的事物在概念世界的抽象；反映到Java语言中就是一个类或者接口。</li>\n<li>对象：就是那个事物本身，是个实实在在的个体；反映到Java语言中就是类的实例或者接口的具体实现。</li>\n<li>Java中类的组成：类中有属性（Field）、方法（Method）、构造器（Constructor）基础元素，还可以有内部类元素。</li>\n</ul>\n<blockquote>\n<p>方法</p>\n</blockquote>\n<ul>\n<li>方法可以说就是一个最小的封装单位，通常由方法名、参数列表、方法体、返回值类型和访问权限修饰符组成；</li>\n<li>方法重载：一个类中出现方法名相同、参数列表不同的现象；</li>\n<li>方法重写：子父类中出现一模一样的方法的现象（即方法名、参数列表和返回值都一样）；</li>\n<li>重写的方法不能比父类中的方法的出现更多的异常；也不能比父类中的方法的访问权限更严格；静态方法不能重写；</li>\n</ul>\n<h3 id=\"面向对象的三大特性\"><a href=\"#面向对象的三大特性\" class=\"headerlink\" title=\"面向对象的三大特性\"></a>面向对象的三大特性</h3><blockquote>\n<p>封装（encapsulation）：隐藏对象的属性和实现细节，并提供对外的访问方式；具体就是使用private私有属性并提供setter和getter方法。</p>\n</blockquote>\n<ul>\n<li>不可见性：细节不可见；</li>\n<li>安全性：避免了非法数据的产生；</li>\n<li>复用性：不论内部如何变，类始终不变；</li>\n</ul>\n<blockquote>\n<p>继承（inheritance）：将多个类中的公共部分提取到一个单独的类中，让这个类和多个类产生了“is a”的关系，将这种关系称之为继承；使用extends表示类或者接口之间的继承关系。</p>\n</blockquote>\n<ul>\n<li>父类也称之为基类、超类（superclass）；子类也称之为派生类（subclass）；</li>\n<li>一个类有且只能有一个父类；一个父类可以有多个子类（单继承）；</li>\n<li>如果B继承A，C继承B，那么C也间接继承了A（多层继承），java.lang.Object类是继承体系中的根父类；</li>\n<li>可以继承父类中出构造外所有的结构，但因为封装的不可见性，则不能直接访问私有成员；</li>\n<li>子类实例化必先进行父类的初始化，就是说子类构造器中的必然有一个构造器的第一行是super()；</li>\n<li>继承减少了代码的冗余，提高了代码复用性；</li>\n</ul>\n<blockquote>\n<p>多态（polymorphism）：同一对象在运行时的不同表现形态；表现形式是父类引用指向子类对象。</p>\n</blockquote>\n<ul>\n<li>前提：存在继承或实现关系；有方法的重写或方法的实现；</li>\n<li>对属性来说是不存在多态现象的，就是说成员变量看左边；</li>\n<li>对方法来说：编译时看父类的引用，运行时看具体的子类实例（动态绑定）；</li>\n<li>父类不能使用子类中的成员，若想使用则需要向下转型(instanceof)；</li>\n<li>当使用子类重写的方法而不是父类方法的现象称为虚拟方法调用，此时父类中的那个方法称之为虚拟方法（virtual method）；</li>\n</ul>\n<blockquote>\n<p>抽象类与接口</p>\n</blockquote>\n<ul>\n<li>当不要类创建对象时，我们可以使用abstract修饰类，这样的类就是一个抽象类；当不确定方法的具体实现时，可以使用abstract修饰，这样的方法称之为抽象方法；有抽象方法的类必须是抽象类，但抽象类不一定有抽象方法（模板设计模式）；</li>\n<li>接口是类并列的一个结构，使用interface定义；JDK1.8之前，接口中只能有全局常亮和抽象方法；JDK1.8开始可以有静态方法和默认方法且默认方法只能通过接口调用；当默认方法和继承的父类方法一模一样时考虑类优先原则；</li>\n<li>抽象类中通常定义基本功能，接口中定义扩展功能；接口反映的是“like a”的关系，是一种规则，一种可能性；</li>\n</ul>\n<blockquote>\n<p>this、super、static、final</p>\n</blockquote>\n<ul>\n<li>this：当前对象的引用（准确说是this所在的方法的所在类的对象）；</li>\n<li>super：父类对象的引用，和this一样都能用来区分同名成员；</li>\n<li>static：静态，用此修饰的成员变量称之为类变量，同样的用此修饰的成员方法称之为静态方法（类方法）；</li>\n<li>final：提升变量为常量（只能赋值1次）；修饰类则该类不能被继承；修改方法则该方法不能被重写；</li>\n</ul>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><blockquote>\n<p>异常就是在程序运行过程中出现语法和逻辑错误之外的其他不正常情况的现象；有抛出和捕捉两种处理方式；</p>\n</blockquote>\n<ul>\n<li>在异常的继承体系中，Throwable是Exception和Error的顶级父类，在Exception下有一个特殊的RuntimeException子类；</li>\n<li>适当的处理异常能提高程序的健壮性和用户体验；</li>\n</ul>\n<blockquote>\n<p>try-catch-finally、throws、throw</p>\n</blockquote>\n<ul>\n<li>try-catch-finally：捕获并处理异常；try块中是可能出现问题的代码；chatch块中是对问题的解决方式的代码；finally块中是在虚拟机不退出的情况下都会执行的代码；</li>\n<li>throws：抛出一个或多个异常类型，提示方法调用者该方法可能会出现问题；</li>\n<li>throw：手动抛出一个异常对象，如该对象不是RuntimeException类型的子类，则需要显式throws声明；</li>\n</ul>\n<blockquote>\n<p>自定义异常</p>\n</blockquote>\n<ul>\n<li>当我们明确的知道如何解决问题时，通常自定义异常类继承Exception，然后throws该异常;</li>\n<li>当不知道如何解决时，通常自定义类继承RuntimeException，然后好手动抛出一个改异常对象；</li>\n</ul>\n<h3 id=\"常用类与方法\"><a href=\"#常用类与方法\" class=\"headerlink\" title=\"常用类与方法\"></a>常用类与方法</h3><blockquote>\n<p>java.lang.Object</p>\n</blockquote>\n<ul>\n<li>clone()、finalize()、hashCode()、equals()、toString()、wait()、notify()、notifyAll()</li>\n</ul>\n<blockquote>\n<p>java.lang.Runtime（一个典型的单例设计模式）</p>\n</blockquote>\n<ul>\n<li>getRuntime()、gc()、maxMemory()、totalMemory</li>\n</ul>\n<blockquote>\n<p>java.lang.System</p>\n</blockquote>\n<ul>\n<li>currentTimeMillis()、nanoTime()、arraycopy()、exit(0)、gc()、getProperties()</li>\n</ul>\n<blockquote>\n<p>java.lang.String</p>\n</blockquote>\n<ul>\n<li>concat()、join()、split()、subString()</li>\n<li>replace()、replaceFirst()、replaceAll()、compareTo()、equals()、equalsIgnoreCase()、matches()</li>\n<li>length()、charAt()、contains()、indexOf()、lastIndexOf()、startsWith()、endsWith()</li>\n<li>valueOf()、toCharArray()、getBytes()、format()、toUpperCase()、toLowerCase()</li>\n<li>trim()、isEmpty()、intern()</li>\n<li>new String(byte[])、new String(char[])、new String(StringBuilder)</li>\n</ul>\n<blockquote>\n<p>java.lang.StringBuffer与java.lang.StringBuilder</p>\n</blockquote>\n<ul>\n<li>append()、insert()、delete()、deleteCharAt()、setCharAt()、replace()、length()、charAt()、indexOf()、lastIndexOf()、toString()、subString()</li>\n<li>默认容量16，扩容2*16+2</li>\n</ul>\n<blockquote>\n<p>java.lang.Math</p>\n</blockquote>\n<ul>\n<li>Math.PI、Math.E</li>\n<li>abs()、ceil()、floor()、round()、max()、min()、random()</li>\n</ul>\n<blockquote>\n<p>java.util.Arrays</p>\n</blockquote>\n<ul>\n<li>asList()、sort()、binarySearch()、copyOf()、equals()、toString()、fill()</li>\n</ul>\n<blockquote>\n<p>java.util.Date与java.sql.Date</p>\n</blockquote>\n<ul>\n<li>getTime()、setTime()、after()、before()、new Date()、new Date(long)</li>\n<li>new Date(long)、valueOf()</li>\n</ul>\n<blockquote>\n<p>java.util.Calendar</p>\n</blockquote>\n<ul>\n<li>getInstance()、get()set()、add()、before()、after()、常量</li>\n</ul>\n<blockquote>\n<p>java.text.SimpleDateformat</p>\n</blockquote>\n<ul>\n<li>new SimpleDateFormat(String)、format()、parse()</li>\n</ul>\n<blockquote>\n<p>java.time.LocalDateTime</p>\n</blockquote>\n<ul>\n<li>now()、of()、getXxx()、plusXxx()、minusXxx()、withXxx()</li>\n</ul>\n<blockquote>\n<p>java.time.Instant</p>\n</blockquote>\n<ul>\n<li>now()、plus()、minus()</li>\n</ul>\n<blockquote>\n<p>java.time.format.DateTimeFormatter</p>\n</blockquote>\n<ul>\n<li>DateTimeFormatter.ISO_LOCAL_DATE_TIME</li>\n<li>ofPattern(String)、format()、parse()</li>\n</ul>\n<blockquote>\n<p>java.lang.Integer</p>\n</blockquote>\n<ul>\n<li>valueOf()、compare()、compareTo()、parseInt()、xxxValue()、toString()</li>\n</ul>\n<blockquote>\n<p>java.math.BigDecimal</p>\n</blockquote>\n<ul>\n<li>divide(BigDecimal divisor, int scale, int roundingMode)</li>\n</ul>\n<blockquote>\n<p>java.security,].MessageDigest(md5,sha-256)</p>\n</blockquote>\n<ul>\n<li>getInstance(String algorithm)、digest(byte[])</li>\n</ul>\n<blockquote>\n<p>java.util.Base64</p>\n</blockquote>\n<ul>\n<li>getDecode()、getEncode()</li>\n<li>decode()、encode()</li>\n</ul>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><blockquote>\n<p>程序、进程和线程</p>\n</blockquote>\n<ul>\n<li>程序：为实现某一功能，使用编程语言编写的一段静态代码或者是一组指令的集合；</li>\n<li>进程：运行起来的程序，是资源分配的基本单位；</li>\n<li>线程：程序中的一条执行路径，是程序执行的基本单位；</li>\n<li>如果一个程序在同一时间可以并行的执行多个线程，那个称该程序为多线程程序；</li>\n</ul>\n<blockquote>\n<p>创建线程的方式</p>\n</blockquote>\n<ul>\n<li>extends Thread：覆盖run()</li>\n<li>implements Runbale：覆盖run()</li>\n<li>implements Callable-&gt;FutureTask：覆盖call()</li>\n<li>Executors-&gt;ThreadPoolExecutor-&gt;submit()/execute()/shutdown()</li>\n</ul>\n<blockquote>\n<p>线程中常用方法</p>\n</blockquote>\n<ul>\n<li>currentThread()、getName()、setName()、setPriority()、setDaemon()</li>\n<li>start()、sleep()、join()、yield()、interrupt()</li>\n</ul>\n<blockquote>\n<p>线程状态</p>\n</blockquote>\n<ul>\n<li>新建（new）</li>\n<li>就绪（start、yield、notify）</li>\n<li>运行（cpu分配了执行权）</li>\n<li>阻塞（sleep、join、等待同步锁、wait）</li>\n<li>死亡（run结束、出现异常、interrupt）</li>\n</ul>\n<blockquote>\n<p>出现多线程问题的原因</p>\n</blockquote>\n<ul>\n<li>多线程环境、有共享数据且有多条语句操作共享数据</li>\n</ul>\n<blockquote>\n<p>线程同步</p>\n</blockquote>\n<ul>\n<li>syncronized同步代码块：锁对象任意，多个线程共用同一把锁；</li>\n<li>syncnizzed同步方法：成员方法锁为this、类方法锁为clazz；</li>\n<li>reentrantLock锁：lock(),unlock()</li>\n<li>lock.newCondition()-&gt; await(),signal()</li>\n</ul>\n<blockquote>\n<p>线程通信</p>\n</blockquote>\n<ul>\n<li>wait、notify</li>\n<li>await、signal</li>\n</ul>\n<h3 id=\"注解和枚举\"><a href=\"#注解和枚举\" class=\"headerlink\" title=\"注解和枚举\"></a>注解和枚举</h3><blockquote>\n<p>注解可以理解为源代码的补充代码，与反射技术配合使用</p>\n</blockquote>\n<ul>\n<li>@interface：定义注解</li>\n<li>元注解：（描述注解的注解）<br>target：定义使用注解的元素类型，使用ElementType枚举类<br>retention：定义注解的生命周期，使用RetentionPolicy枚举类<br>inherited：<br>document：<br>repeatable：</li>\n</ul>\n<blockquote>\n<p>枚举类就是定义有限个公共的全局对象常量的类。</p>\n</blockquote>\n<ul>\n<li>enum定义枚举类，最直接父类是Enum；当一个枚举类中只有一个常亮时该枚举类就是一个单例的；</li>\n</ul>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><blockquote>\n<p>Collection接口为单列集合的根接口，其子接口有List与Set。</p>\n</blockquote>\n<blockquote>\n<p>List接口存储有序，元素可重复；实现类有ArrayList、LinkedList、Vector、Stack。</p>\n</blockquote>\n<ul>\n<li>ArrayList和Vector底层数据结构是数组，数组默认长度是10，扩容方式前者1.5倍后者2倍；查询快，插入和删除慢；</li>\n<li>LinkedList：底层数据结果是双向列表，查询慢，插入和删除快；</li>\n</ul>\n<blockquote>\n<p>Set接口存储无序，元素不可重复；实现类有HashSet、LinkedHashSet、TreeSet。</p>\n</blockquote>\n<ul>\n<li>HashSet：底层使用HashMap，即数组+链表+红黑树(1.8)的结构,默认容量16，加载因子0.75，临时容量12；当链表长度超过8，容量超过64则转换为红黑树存储。大概原理取得元素hashCode，通过散列算法计算元素位置；当该位置无元素直接添加，如果有元素那么要判断hashcode和equals的结果，hashcode和equals完全一样则不能添加；</li>\n<li>LinkedHashSet：底层在HashSet的基础上又多了一个双向链表来记录存储数据的顺序，所有取出和存储顺序是一致的；</li>\n<li>TreeSet：底层是红黑树，通过compareTo()或者compare()方法来确定元素位置。</li>\n</ul>\n<blockquote>\n<p>Collection接口方法</p>\n</blockquote>\n<ul>\n<li>add、addAll、clear、size、isEmpty、hashcode</li>\n<li>remove、removeALl、contains、containsAll、retainALl、equals</li>\n<li>toArray，iterator</li>\n</ul>\n<blockquote>\n<p>ArrayList特有方法</p>\n</blockquote>\n<ul>\n<li>add(int,E)、get(int)、set(int,E)、remove(int)、subList(int,int)</li>\n</ul>\n<blockquote>\n<p>Map是双列集合的根接口，其实现类有HashMap、LinkedHashMap、TreeMap、Hashtable、Propeties</p>\n</blockquote>\n<ul>\n<li>以键值对的方式存储元素，先将键值对存储到entry中然后将entry存到Map中；</li>\n<li>存储无序，元素不可重复，因为key是Set、value是Collection；</li>\n</ul>\n<blockquote>\n<p>Map的方法</p>\n</blockquote>\n<ul>\n<li>put、get、values、keySet、entrySet、size、isEmpty、remove、containsKey、containsValue、clear</li>\n</ul>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><blockquote>\n<p>泛型是参数化类型，就是类型的标记；实例化或者调用方法时需要明确具体类型；</p>\n</blockquote>\n<ul>\n<li>可以用在类、接口、方法上；泛型方法可以是静态的；泛型方法的泛型类型不需要和类或接口中的泛型一致；</li>\n<li>通配符：？，？extends G，？super G；不能做写操作，但可以做读操作；</li>\n</ul>\n<h3 id=\"文件和IO流\"><a href=\"#文件和IO流\" class=\"headerlink\" title=\"文件和IO流\"></a>文件和IO流</h3><blockquote>\n<p>将文件系统抽象成File类，通过该类可以进行文件或目录的创建、删除、属性查看、目录内容查看等操作。</p>\n</blockquote>\n<blockquote>\n<p>java.io.File中的常用方法</p>\n</blockquote>\n<ul>\n<li>File.separator</li>\n<li>isFile()、isDirectory()、exists()、canRead()、canWrite()、isHidden()</li>\n<li>createNewFile()、mkdirs()、delete()、getParent() 、getName()、getAbsolutePath()</li>\n<li>list()、listFiles()、lastModified()、length()</li>\n</ul>\n<blockquote>\n<p>io流分类</p>\n</blockquote>\n<ul>\n<li>按数据单位分为字节流和字符流</li>\n<li>按流的流向分为输入流和输出流</li>\n<li>按流的角色分为节点流（直接作用于文件的流）和处理流（对文件流或其他流的处理）</li>\n</ul>\n<blockquote>\n</blockquote>\n<h3 id=\"网络编程\"><a href=\"#网络编程\" class=\"headerlink\" title=\"网络编程\"></a>网络编程</h3><h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><h3 id=\"Java8函数式编程\"><a href=\"#Java8函数式编程\" class=\"headerlink\" title=\"Java8函数式编程\"></a>Java8函数式编程</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><blockquote>\n<p>Java作为强类型语言，将数据类型分成基本类型和引用类型。</p>\n</blockquote>\n<ul>\n<li>基本数据类型（primitive）：byte、short、int、long、float、double、char、boolean(4类8种)；</li>\n<li>引用数据类型（reference）：array、class、interface（除了基本类型的都是引用类型）；</li>\n<li>作为面向对象的语言，每种基本数据类型都有其对应的包装类型Number(6种)、Character、Boolean；<h3 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h3><blockquote>\n<p>和其他语言一样分成顺序、选择和循环结构。</p>\n</blockquote>\n</li>\n<li>选择：if-else、switch-case；</li>\n<li>循环：do-while、while、for、foreach；<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><blockquote>\n<p>面向过程和面向对象</p>\n</blockquote>\n</li>\n<li>面向过程：强调功能本身，关注的是如何分步的去完成功能，将方法或函数看做是一个基本单位；此时的程序编写者就是一个执行者；</li>\n<li>面向对象：强调具备该功能的对象，关注的是如何指挥对象去完成功能，将类或者对象看做是一个基本单位；此时的程序编写者就是一个指挥者；</li>\n<li>面向对象编程：就是找寻对象、创建对象、使用对象、维护对象间关系的过程；</li>\n</ul>\n<blockquote>\n<p>类和对象</p>\n</blockquote>\n<ul>\n<li>类：将现实世界中的事物在概念世界的抽象；反映到Java语言中就是一个类或者接口。</li>\n<li>对象：就是那个事物本身，是个实实在在的个体；反映到Java语言中就是类的实例或者接口的具体实现。</li>\n<li>Java中类的组成：类中有属性（Field）、方法（Method）、构造器（Constructor）基础元素，还可以有内部类元素。</li>\n</ul>\n<blockquote>\n<p>方法</p>\n</blockquote>\n<ul>\n<li>方法可以说就是一个最小的封装单位，通常由方法名、参数列表、方法体、返回值类型和访问权限修饰符组成；</li>\n<li>方法重载：一个类中出现方法名相同、参数列表不同的现象；</li>\n<li>方法重写：子父类中出现一模一样的方法的现象（即方法名、参数列表和返回值都一样）；</li>\n<li>重写的方法不能比父类中的方法的出现更多的异常；也不能比父类中的方法的访问权限更严格；静态方法不能重写；</li>\n</ul>\n<h3 id=\"面向对象的三大特性\"><a href=\"#面向对象的三大特性\" class=\"headerlink\" title=\"面向对象的三大特性\"></a>面向对象的三大特性</h3><blockquote>\n<p>封装（encapsulation）：隐藏对象的属性和实现细节，并提供对外的访问方式；具体就是使用private私有属性并提供setter和getter方法。</p>\n</blockquote>\n<ul>\n<li>不可见性：细节不可见；</li>\n<li>安全性：避免了非法数据的产生；</li>\n<li>复用性：不论内部如何变，类始终不变；</li>\n</ul>\n<blockquote>\n<p>继承（inheritance）：将多个类中的公共部分提取到一个单独的类中，让这个类和多个类产生了“is a”的关系，将这种关系称之为继承；使用extends表示类或者接口之间的继承关系。</p>\n</blockquote>\n<ul>\n<li>父类也称之为基类、超类（superclass）；子类也称之为派生类（subclass）；</li>\n<li>一个类有且只能有一个父类；一个父类可以有多个子类（单继承）；</li>\n<li>如果B继承A，C继承B，那么C也间接继承了A（多层继承），java.lang.Object类是继承体系中的根父类；</li>\n<li>可以继承父类中出构造外所有的结构，但因为封装的不可见性，则不能直接访问私有成员；</li>\n<li>子类实例化必先进行父类的初始化，就是说子类构造器中的必然有一个构造器的第一行是super()；</li>\n<li>继承减少了代码的冗余，提高了代码复用性；</li>\n</ul>\n<blockquote>\n<p>多态（polymorphism）：同一对象在运行时的不同表现形态；表现形式是父类引用指向子类对象。</p>\n</blockquote>\n<ul>\n<li>前提：存在继承或实现关系；有方法的重写或方法的实现；</li>\n<li>对属性来说是不存在多态现象的，就是说成员变量看左边；</li>\n<li>对方法来说：编译时看父类的引用，运行时看具体的子类实例（动态绑定）；</li>\n<li>父类不能使用子类中的成员，若想使用则需要向下转型(instanceof)；</li>\n<li>当使用子类重写的方法而不是父类方法的现象称为虚拟方法调用，此时父类中的那个方法称之为虚拟方法（virtual method）；</li>\n</ul>\n<blockquote>\n<p>抽象类与接口</p>\n</blockquote>\n<ul>\n<li>当不要类创建对象时，我们可以使用abstract修饰类，这样的类就是一个抽象类；当不确定方法的具体实现时，可以使用abstract修饰，这样的方法称之为抽象方法；有抽象方法的类必须是抽象类，但抽象类不一定有抽象方法（模板设计模式）；</li>\n<li>接口是类并列的一个结构，使用interface定义；JDK1.8之前，接口中只能有全局常亮和抽象方法；JDK1.8开始可以有静态方法和默认方法且默认方法只能通过接口调用；当默认方法和继承的父类方法一模一样时考虑类优先原则；</li>\n<li>抽象类中通常定义基本功能，接口中定义扩展功能；接口反映的是“like a”的关系，是一种规则，一种可能性；</li>\n</ul>\n<blockquote>\n<p>this、super、static、final</p>\n</blockquote>\n<ul>\n<li>this：当前对象的引用（准确说是this所在的方法的所在类的对象）；</li>\n<li>super：父类对象的引用，和this一样都能用来区分同名成员；</li>\n<li>static：静态，用此修饰的成员变量称之为类变量，同样的用此修饰的成员方法称之为静态方法（类方法）；</li>\n<li>final：提升变量为常量（只能赋值1次）；修饰类则该类不能被继承；修改方法则该方法不能被重写；</li>\n</ul>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><blockquote>\n<p>异常就是在程序运行过程中出现语法和逻辑错误之外的其他不正常情况的现象；有抛出和捕捉两种处理方式；</p>\n</blockquote>\n<ul>\n<li>在异常的继承体系中，Throwable是Exception和Error的顶级父类，在Exception下有一个特殊的RuntimeException子类；</li>\n<li>适当的处理异常能提高程序的健壮性和用户体验；</li>\n</ul>\n<blockquote>\n<p>try-catch-finally、throws、throw</p>\n</blockquote>\n<ul>\n<li>try-catch-finally：捕获并处理异常；try块中是可能出现问题的代码；chatch块中是对问题的解决方式的代码；finally块中是在虚拟机不退出的情况下都会执行的代码；</li>\n<li>throws：抛出一个或多个异常类型，提示方法调用者该方法可能会出现问题；</li>\n<li>throw：手动抛出一个异常对象，如该对象不是RuntimeException类型的子类，则需要显式throws声明；</li>\n</ul>\n<blockquote>\n<p>自定义异常</p>\n</blockquote>\n<ul>\n<li>当我们明确的知道如何解决问题时，通常自定义异常类继承Exception，然后throws该异常;</li>\n<li>当不知道如何解决时，通常自定义类继承RuntimeException，然后好手动抛出一个改异常对象；</li>\n</ul>\n<h3 id=\"常用类与方法\"><a href=\"#常用类与方法\" class=\"headerlink\" title=\"常用类与方法\"></a>常用类与方法</h3><blockquote>\n<p>java.lang.Object</p>\n</blockquote>\n<ul>\n<li>clone()、finalize()、hashCode()、equals()、toString()、wait()、notify()、notifyAll()</li>\n</ul>\n<blockquote>\n<p>java.lang.Runtime（一个典型的单例设计模式）</p>\n</blockquote>\n<ul>\n<li>getRuntime()、gc()、maxMemory()、totalMemory</li>\n</ul>\n<blockquote>\n<p>java.lang.System</p>\n</blockquote>\n<ul>\n<li>currentTimeMillis()、nanoTime()、arraycopy()、exit(0)、gc()、getProperties()</li>\n</ul>\n<blockquote>\n<p>java.lang.String</p>\n</blockquote>\n<ul>\n<li>concat()、join()、split()、subString()</li>\n<li>replace()、replaceFirst()、replaceAll()、compareTo()、equals()、equalsIgnoreCase()、matches()</li>\n<li>length()、charAt()、contains()、indexOf()、lastIndexOf()、startsWith()、endsWith()</li>\n<li>valueOf()、toCharArray()、getBytes()、format()、toUpperCase()、toLowerCase()</li>\n<li>trim()、isEmpty()、intern()</li>\n<li>new String(byte[])、new String(char[])、new String(StringBuilder)</li>\n</ul>\n<blockquote>\n<p>java.lang.StringBuffer与java.lang.StringBuilder</p>\n</blockquote>\n<ul>\n<li>append()、insert()、delete()、deleteCharAt()、setCharAt()、replace()、length()、charAt()、indexOf()、lastIndexOf()、toString()、subString()</li>\n<li>默认容量16，扩容2*16+2</li>\n</ul>\n<blockquote>\n<p>java.lang.Math</p>\n</blockquote>\n<ul>\n<li>Math.PI、Math.E</li>\n<li>abs()、ceil()、floor()、round()、max()、min()、random()</li>\n</ul>\n<blockquote>\n<p>java.util.Arrays</p>\n</blockquote>\n<ul>\n<li>asList()、sort()、binarySearch()、copyOf()、equals()、toString()、fill()</li>\n</ul>\n<blockquote>\n<p>java.util.Date与java.sql.Date</p>\n</blockquote>\n<ul>\n<li>getTime()、setTime()、after()、before()、new Date()、new Date(long)</li>\n<li>new Date(long)、valueOf()</li>\n</ul>\n<blockquote>\n<p>java.util.Calendar</p>\n</blockquote>\n<ul>\n<li>getInstance()、get()set()、add()、before()、after()、常量</li>\n</ul>\n<blockquote>\n<p>java.text.SimpleDateformat</p>\n</blockquote>\n<ul>\n<li>new SimpleDateFormat(String)、format()、parse()</li>\n</ul>\n<blockquote>\n<p>java.time.LocalDateTime</p>\n</blockquote>\n<ul>\n<li>now()、of()、getXxx()、plusXxx()、minusXxx()、withXxx()</li>\n</ul>\n<blockquote>\n<p>java.time.Instant</p>\n</blockquote>\n<ul>\n<li>now()、plus()、minus()</li>\n</ul>\n<blockquote>\n<p>java.time.format.DateTimeFormatter</p>\n</blockquote>\n<ul>\n<li>DateTimeFormatter.ISO_LOCAL_DATE_TIME</li>\n<li>ofPattern(String)、format()、parse()</li>\n</ul>\n<blockquote>\n<p>java.lang.Integer</p>\n</blockquote>\n<ul>\n<li>valueOf()、compare()、compareTo()、parseInt()、xxxValue()、toString()</li>\n</ul>\n<blockquote>\n<p>java.math.BigDecimal</p>\n</blockquote>\n<ul>\n<li>divide(BigDecimal divisor, int scale, int roundingMode)</li>\n</ul>\n<blockquote>\n<p>java.security,].MessageDigest(md5,sha-256)</p>\n</blockquote>\n<ul>\n<li>getInstance(String algorithm)、digest(byte[])</li>\n</ul>\n<blockquote>\n<p>java.util.Base64</p>\n</blockquote>\n<ul>\n<li>getDecode()、getEncode()</li>\n<li>decode()、encode()</li>\n</ul>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><blockquote>\n<p>程序、进程和线程</p>\n</blockquote>\n<ul>\n<li>程序：为实现某一功能，使用编程语言编写的一段静态代码或者是一组指令的集合；</li>\n<li>进程：运行起来的程序，是资源分配的基本单位；</li>\n<li>线程：程序中的一条执行路径，是程序执行的基本单位；</li>\n<li>如果一个程序在同一时间可以并行的执行多个线程，那个称该程序为多线程程序；</li>\n</ul>\n<blockquote>\n<p>创建线程的方式</p>\n</blockquote>\n<ul>\n<li>extends Thread：覆盖run()</li>\n<li>implements Runbale：覆盖run()</li>\n<li>implements Callable-&gt;FutureTask：覆盖call()</li>\n<li>Executors-&gt;ThreadPoolExecutor-&gt;submit()/execute()/shutdown()</li>\n</ul>\n<blockquote>\n<p>线程中常用方法</p>\n</blockquote>\n<ul>\n<li>currentThread()、getName()、setName()、setPriority()、setDaemon()</li>\n<li>start()、sleep()、join()、yield()、interrupt()</li>\n</ul>\n<blockquote>\n<p>线程状态</p>\n</blockquote>\n<ul>\n<li>新建（new）</li>\n<li>就绪（start、yield、notify）</li>\n<li>运行（cpu分配了执行权）</li>\n<li>阻塞（sleep、join、等待同步锁、wait）</li>\n<li>死亡（run结束、出现异常、interrupt）</li>\n</ul>\n<blockquote>\n<p>出现多线程问题的原因</p>\n</blockquote>\n<ul>\n<li>多线程环境、有共享数据且有多条语句操作共享数据</li>\n</ul>\n<blockquote>\n<p>线程同步</p>\n</blockquote>\n<ul>\n<li>syncronized同步代码块：锁对象任意，多个线程共用同一把锁；</li>\n<li>syncnizzed同步方法：成员方法锁为this、类方法锁为clazz；</li>\n<li>reentrantLock锁：lock(),unlock()</li>\n<li>lock.newCondition()-&gt; await(),signal()</li>\n</ul>\n<blockquote>\n<p>线程通信</p>\n</blockquote>\n<ul>\n<li>wait、notify</li>\n<li>await、signal</li>\n</ul>\n<h3 id=\"注解和枚举\"><a href=\"#注解和枚举\" class=\"headerlink\" title=\"注解和枚举\"></a>注解和枚举</h3><blockquote>\n<p>注解可以理解为源代码的补充代码，与反射技术配合使用</p>\n</blockquote>\n<ul>\n<li>@interface：定义注解</li>\n<li>元注解：（描述注解的注解）<br>target：定义使用注解的元素类型，使用ElementType枚举类<br>retention：定义注解的生命周期，使用RetentionPolicy枚举类<br>inherited：<br>document：<br>repeatable：</li>\n</ul>\n<blockquote>\n<p>枚举类就是定义有限个公共的全局对象常量的类。</p>\n</blockquote>\n<ul>\n<li>enum定义枚举类，最直接父类是Enum；当一个枚举类中只有一个常亮时该枚举类就是一个单例的；</li>\n</ul>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><blockquote>\n<p>Collection接口为单列集合的根接口，其子接口有List与Set。</p>\n</blockquote>\n<blockquote>\n<p>List接口存储有序，元素可重复；实现类有ArrayList、LinkedList、Vector、Stack。</p>\n</blockquote>\n<ul>\n<li>ArrayList和Vector底层数据结构是数组，数组默认长度是10，扩容方式前者1.5倍后者2倍；查询快，插入和删除慢；</li>\n<li>LinkedList：底层数据结果是双向列表，查询慢，插入和删除快；</li>\n</ul>\n<blockquote>\n<p>Set接口存储无序，元素不可重复；实现类有HashSet、LinkedHashSet、TreeSet。</p>\n</blockquote>\n<ul>\n<li>HashSet：底层使用HashMap，即数组+链表+红黑树(1.8)的结构,默认容量16，加载因子0.75，临时容量12；当链表长度超过8，容量超过64则转换为红黑树存储。大概原理取得元素hashCode，通过散列算法计算元素位置；当该位置无元素直接添加，如果有元素那么要判断hashcode和equals的结果，hashcode和equals完全一样则不能添加；</li>\n<li>LinkedHashSet：底层在HashSet的基础上又多了一个双向链表来记录存储数据的顺序，所有取出和存储顺序是一致的；</li>\n<li>TreeSet：底层是红黑树，通过compareTo()或者compare()方法来确定元素位置。</li>\n</ul>\n<blockquote>\n<p>Collection接口方法</p>\n</blockquote>\n<ul>\n<li>add、addAll、clear、size、isEmpty、hashcode</li>\n<li>remove、removeALl、contains、containsAll、retainALl、equals</li>\n<li>toArray，iterator</li>\n</ul>\n<blockquote>\n<p>ArrayList特有方法</p>\n</blockquote>\n<ul>\n<li>add(int,E)、get(int)、set(int,E)、remove(int)、subList(int,int)</li>\n</ul>\n<blockquote>\n<p>Map是双列集合的根接口，其实现类有HashMap、LinkedHashMap、TreeMap、Hashtable、Propeties</p>\n</blockquote>\n<ul>\n<li>以键值对的方式存储元素，先将键值对存储到entry中然后将entry存到Map中；</li>\n<li>存储无序，元素不可重复，因为key是Set、value是Collection；</li>\n</ul>\n<blockquote>\n<p>Map的方法</p>\n</blockquote>\n<ul>\n<li>put、get、values、keySet、entrySet、size、isEmpty、remove、containsKey、containsValue、clear</li>\n</ul>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><blockquote>\n<p>泛型是参数化类型，就是类型的标记；实例化或者调用方法时需要明确具体类型；</p>\n</blockquote>\n<ul>\n<li>可以用在类、接口、方法上；泛型方法可以是静态的；泛型方法的泛型类型不需要和类或接口中的泛型一致；</li>\n<li>通配符：？，？extends G，？super G；不能做写操作，但可以做读操作；</li>\n</ul>\n<h3 id=\"文件和IO流\"><a href=\"#文件和IO流\" class=\"headerlink\" title=\"文件和IO流\"></a>文件和IO流</h3><blockquote>\n<p>将文件系统抽象成File类，通过该类可以进行文件或目录的创建、删除、属性查看、目录内容查看等操作。</p>\n</blockquote>\n<blockquote>\n<p>java.io.File中的常用方法</p>\n</blockquote>\n<ul>\n<li>File.separator</li>\n<li>isFile()、isDirectory()、exists()、canRead()、canWrite()、isHidden()</li>\n<li>createNewFile()、mkdirs()、delete()、getParent() 、getName()、getAbsolutePath()</li>\n<li>list()、listFiles()、lastModified()、length()</li>\n</ul>\n<blockquote>\n<p>io流分类</p>\n</blockquote>\n<ul>\n<li>按数据单位分为字节流和字符流</li>\n<li>按流的流向分为输入流和输出流</li>\n<li>按流的角色分为节点流（直接作用于文件的流）和处理流（对文件流或其他流的处理）</li>\n</ul>\n<blockquote>\n</blockquote>\n<h3 id=\"网络编程\"><a href=\"#网络编程\" class=\"headerlink\" title=\"网络编程\"></a>网络编程</h3><h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><h3 id=\"Java8函数式编程\"><a href=\"#Java8函数式编程\" class=\"headerlink\" title=\"Java8函数式编程\"></a>Java8函数式编程</h3>"},{"title":"Log4j配置","date":"2019-08-28T10:49:24.000Z","_content":"### what is\n- Log4j是Apache下的一款开源的日志框架;在项目中，我们会结合slf4j和log4j一起使用;\n- Log4j提供了简单的API调用，强大的日志格式定义以及灵活的扩展性。我们可以自己定义Appender来满足我们对于日志输出的需求;\n- Log4j有三个主要的组件：Loggers(记录器)，Appenders(输出源)和Layouts(布局);\n\n### why use it\n- 我们在系统中对于记录日志的需求并不单纯。首先，我们希望日志要能持久化到磁盘，最基本的就是要能够保存到文件中；其次，我们希望在开发和生产环境中记录的日志并不相同，明显开发环境的日志记录会更多方便调试，但放到生产环境下大量的日志很容易会撑爆服务器，因此在生产环境我们希望只记录重要信息。\n- 基于不单纯的目的，System.out.println是直接不能满足我们的要求，因此抛弃它，选择功能更强的日志框架。而log4j是apache下一款著名的开源日志框架，log4j满足上面的一切需求。\n- 记录日志的框架并不仅仅只有log4j，比较有名的还有logback等，现在比较火的SpringBoot默认集成的日志就是logback。不管哪种日志框架，一般都能够实现日志的持久化功能。\n\n### 日志级别\nLoggers组件在此系统中被分为五个级别：DEBUG、INFO、WARN、ERROR和FATAL。这五个级别是有顺序的，DEBUG < INFO < WARN < ERROR < FATAL，分别用来指定这条日志信息的重要程度，明白这一点很重要，Log4j有一个规则：只输出级别不低于设定级别的日志信息，假设Loggers级别设定为INFO，则INFO、WARN、ERROR和FATAL级别的日志信息都会输出，而级别比INFO低的DEBUG则不会输出。\n\n### 输出格式说明：\n```\n%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。\n%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}。\n%r：输出自应用程序启动到输出该log信息耗费的毫秒数。\n%t：输出产生该日志事件的线程名。\n%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。\n%c：输出日志信息所属的类目，通常就是所在类的全名。\n%M：输出产生日志信息的方法名。\n%F：输出日志消息产生时所在的文件名称。\n%L:：输出代码中的行号。\n%m:：输出代码中指定的具体日志信息。\n%n：输出一个回车换行符，Windows平台为\"rn\"，Unix平台为\"n\"。\n%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。\n%%：输出一个\"%\"字符。\n另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：\n1) c：指定输出category的名称，最小的长度是20，如果category的名称长度小于20的话，默认的情况下右对齐。\n2)%-20c：\"-\"号表示左对齐。\n3)%.30c：指定输出category的名称，最大的长度是30，如果category的名称长度大于30的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。\n```\n\n### log4j.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE log4j:configuration PUBLIC \"-//log4j/log4j Configuration//EN\" \"log4j.dtd\">\n<log4j:configuration>\n    <!--输出到控制台-->\n    <appender name=\"consoleAppender\" class=\"org.apache.log4j.ConsoleAppender\">\n        <param name=\"Threshold\" value=\"DEBUG\"/>\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <param name=\"ConversionPattern\" value=\"[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n\"/>\n        </layout>\n    </appender>\n\n    <!--输出到文件（info）-->\n    <!--将生成“info.log.2014-06-11”这样的日志文件-->\n    <appender name=\"fileAppenderInfo\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n        <param name=\"File\" value=\"${user.home}/logs/website/info.log\" />\n        <param name=\"DatePattern\" value=\".yyyy-MM-dd\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <param name=\"ConversionPattern\" value=\"[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n\"/>\n        </layout>\n        <filter class=\"org.apache.log4j.varia.LevelRangeFilter\">\n            <param name=\"LevelMin\" value=\"INFO\" />\n            <param name=\"LevelMax\" value=\"INFO\" />\n        </filter>\n    </appender>\n\n    <!--输出到文件（warn）-->\n    <appender name=\"fileAppenderWarn\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n        <param name=\"File\" value=\"${user.home}/logs/website/warn.log\" />\n        <param name=\"DatePattern\" value=\".yyyy-MM-dd\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <param name=\"ConversionPattern\" value=\"[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n\"/>\n        </layout>\n\n        <filter class=\"org.apache.log4j.varia.LevelRangeFilter\">\n            <param name=\"LevelMin\" value=\"WARN\" />\n            <param name=\"LevelMax\" value=\"WARN\" />\n        </filter>\n    </appender>\n\n    <!--输出到文件（error）-->\n    <appender name=\"fileAppenderError\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n        <param name=\"File\" value=\"${user.home}/logs/website/error.log\" />\n        <param name=\"DatePattern\" value=\".yyyy-MM-dd\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <param name=\"ConversionPattern\" value=\"[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n\"/>\n        </layout>\n        <filter class=\"org.apache.log4j.varia.LevelRangeFilter\">\n            <param name=\"LevelMin\" value=\"ERROR\" />\n            <param name=\"LevelMax\" value=\"ERROR\" />\n        </filter>\n    </appender>\n\n    <!--屏蔽所有org.springframework.*输出的Debug（及以下）信息-->\n    <logger name=\"org.springframework\">\n        <level value=\"INFO\"></level>\n    </logger>\n\n    <root>\n        <level value=\"ALL\"/>\n        <appender-ref ref=\"consoleAppender\" />\n     <!--    <appender-ref ref=\"fileAppenderInfo\" />\n        <appender-ref ref=\"fileAppenderWarn\" />\n        <appender-ref ref=\"fileAppenderError\" /> -->\n    </root>\n</log4j:configuration>\n```\n\n### log4j.properties\n```\n#默认输出路径\nlog4j.rootLogger=info,stdout,logfile,busi1\nlog4j.appender.logfile=org.apache.log4j.FileAppender\nlog4j.appender.logfile.File=logs/cmsmgr.log\nlog4j.appender.logfile.layout=org.apache.log4j.PatternLayout\nlog4j.appender.logfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %F %p %m%n\n\nlog4j.logger.com.ibatis=INFO\nlog4j.logger.com.ibatis.common.jdbc.SimpleDataSource=INFO\nlog4j.logger.com.ibatis.common.jdbc.ScriptRunner=INFO\nlog4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=INFO\nlog4j.logger.java.sql.Connection=INFO\nlog4j.logger.java.sql.Statement=INFO\nlog4j.logger.java.sql.PreparedStatement=INFO\n#输出到控制台\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.Threshold=INFO\nlog4j.appender.stdout.ImmediateFlush=true\nlog4j.appender.stdout.Target=System.err\nlog4j.appender.stdout.layout.ConversionPattern=[%-5p] %d(%r) --> [%t] %l: %m %x %n\n#输出到busi1\nlog4j.logger.busi1= info, busi1\n#每天产生一个日志文件\nlog4j.appender.busi1=org.apache.log4j.DailyRollingFileAppender\n#日志文件格式\nlog4j.appender.busi1.DatePattern='.'yyyy-MM-dd-HH\n#日志路径\nlog4j.appender.busi1.File=logs/busi1.log\n#最低输出日志级别\nlog4j.appender.busi1.Threshold = INFO\n#输出的布局样式\nlog4j.appender.busi1.layout=org.apache.log4j.PatternLayout\n#自定义输出哪些信息\nlog4j.appender.busi1.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %l%t %m%n\n\n\n#输出到busi\nlog4j.logger.busi= info, busi\nlog4j.appender.busi=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.busi.File=logs/busi.log\nlog4j.appender.busi.Threshold = INFO\nlog4j.appender.busi.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.busi.layout=org.apache.log4j.PatternLayout\nlog4j.appender.busi.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %l%t %m%n\n```","source":"_posts/Log4j配置.md","raw":"---\ntitle: Log4j配置\ndate: 2019-08-28 18:49:24\ntags: log4j\ncategories: 配置文件\n---\n### what is\n- Log4j是Apache下的一款开源的日志框架;在项目中，我们会结合slf4j和log4j一起使用;\n- Log4j提供了简单的API调用，强大的日志格式定义以及灵活的扩展性。我们可以自己定义Appender来满足我们对于日志输出的需求;\n- Log4j有三个主要的组件：Loggers(记录器)，Appenders(输出源)和Layouts(布局);\n\n### why use it\n- 我们在系统中对于记录日志的需求并不单纯。首先，我们希望日志要能持久化到磁盘，最基本的就是要能够保存到文件中；其次，我们希望在开发和生产环境中记录的日志并不相同，明显开发环境的日志记录会更多方便调试，但放到生产环境下大量的日志很容易会撑爆服务器，因此在生产环境我们希望只记录重要信息。\n- 基于不单纯的目的，System.out.println是直接不能满足我们的要求，因此抛弃它，选择功能更强的日志框架。而log4j是apache下一款著名的开源日志框架，log4j满足上面的一切需求。\n- 记录日志的框架并不仅仅只有log4j，比较有名的还有logback等，现在比较火的SpringBoot默认集成的日志就是logback。不管哪种日志框架，一般都能够实现日志的持久化功能。\n\n### 日志级别\nLoggers组件在此系统中被分为五个级别：DEBUG、INFO、WARN、ERROR和FATAL。这五个级别是有顺序的，DEBUG < INFO < WARN < ERROR < FATAL，分别用来指定这条日志信息的重要程度，明白这一点很重要，Log4j有一个规则：只输出级别不低于设定级别的日志信息，假设Loggers级别设定为INFO，则INFO、WARN、ERROR和FATAL级别的日志信息都会输出，而级别比INFO低的DEBUG则不会输出。\n\n### 输出格式说明：\n```\n%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。\n%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}。\n%r：输出自应用程序启动到输出该log信息耗费的毫秒数。\n%t：输出产生该日志事件的线程名。\n%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。\n%c：输出日志信息所属的类目，通常就是所在类的全名。\n%M：输出产生日志信息的方法名。\n%F：输出日志消息产生时所在的文件名称。\n%L:：输出代码中的行号。\n%m:：输出代码中指定的具体日志信息。\n%n：输出一个回车换行符，Windows平台为\"rn\"，Unix平台为\"n\"。\n%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。\n%%：输出一个\"%\"字符。\n另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：\n1) c：指定输出category的名称，最小的长度是20，如果category的名称长度小于20的话，默认的情况下右对齐。\n2)%-20c：\"-\"号表示左对齐。\n3)%.30c：指定输出category的名称，最大的长度是30，如果category的名称长度大于30的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。\n```\n\n### log4j.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE log4j:configuration PUBLIC \"-//log4j/log4j Configuration//EN\" \"log4j.dtd\">\n<log4j:configuration>\n    <!--输出到控制台-->\n    <appender name=\"consoleAppender\" class=\"org.apache.log4j.ConsoleAppender\">\n        <param name=\"Threshold\" value=\"DEBUG\"/>\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <param name=\"ConversionPattern\" value=\"[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n\"/>\n        </layout>\n    </appender>\n\n    <!--输出到文件（info）-->\n    <!--将生成“info.log.2014-06-11”这样的日志文件-->\n    <appender name=\"fileAppenderInfo\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n        <param name=\"File\" value=\"${user.home}/logs/website/info.log\" />\n        <param name=\"DatePattern\" value=\".yyyy-MM-dd\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <param name=\"ConversionPattern\" value=\"[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n\"/>\n        </layout>\n        <filter class=\"org.apache.log4j.varia.LevelRangeFilter\">\n            <param name=\"LevelMin\" value=\"INFO\" />\n            <param name=\"LevelMax\" value=\"INFO\" />\n        </filter>\n    </appender>\n\n    <!--输出到文件（warn）-->\n    <appender name=\"fileAppenderWarn\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n        <param name=\"File\" value=\"${user.home}/logs/website/warn.log\" />\n        <param name=\"DatePattern\" value=\".yyyy-MM-dd\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <param name=\"ConversionPattern\" value=\"[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n\"/>\n        </layout>\n\n        <filter class=\"org.apache.log4j.varia.LevelRangeFilter\">\n            <param name=\"LevelMin\" value=\"WARN\" />\n            <param name=\"LevelMax\" value=\"WARN\" />\n        </filter>\n    </appender>\n\n    <!--输出到文件（error）-->\n    <appender name=\"fileAppenderError\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n        <param name=\"File\" value=\"${user.home}/logs/website/error.log\" />\n        <param name=\"DatePattern\" value=\".yyyy-MM-dd\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <param name=\"ConversionPattern\" value=\"[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n\"/>\n        </layout>\n        <filter class=\"org.apache.log4j.varia.LevelRangeFilter\">\n            <param name=\"LevelMin\" value=\"ERROR\" />\n            <param name=\"LevelMax\" value=\"ERROR\" />\n        </filter>\n    </appender>\n\n    <!--屏蔽所有org.springframework.*输出的Debug（及以下）信息-->\n    <logger name=\"org.springframework\">\n        <level value=\"INFO\"></level>\n    </logger>\n\n    <root>\n        <level value=\"ALL\"/>\n        <appender-ref ref=\"consoleAppender\" />\n     <!--    <appender-ref ref=\"fileAppenderInfo\" />\n        <appender-ref ref=\"fileAppenderWarn\" />\n        <appender-ref ref=\"fileAppenderError\" /> -->\n    </root>\n</log4j:configuration>\n```\n\n### log4j.properties\n```\n#默认输出路径\nlog4j.rootLogger=info,stdout,logfile,busi1\nlog4j.appender.logfile=org.apache.log4j.FileAppender\nlog4j.appender.logfile.File=logs/cmsmgr.log\nlog4j.appender.logfile.layout=org.apache.log4j.PatternLayout\nlog4j.appender.logfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %F %p %m%n\n\nlog4j.logger.com.ibatis=INFO\nlog4j.logger.com.ibatis.common.jdbc.SimpleDataSource=INFO\nlog4j.logger.com.ibatis.common.jdbc.ScriptRunner=INFO\nlog4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=INFO\nlog4j.logger.java.sql.Connection=INFO\nlog4j.logger.java.sql.Statement=INFO\nlog4j.logger.java.sql.PreparedStatement=INFO\n#输出到控制台\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.Threshold=INFO\nlog4j.appender.stdout.ImmediateFlush=true\nlog4j.appender.stdout.Target=System.err\nlog4j.appender.stdout.layout.ConversionPattern=[%-5p] %d(%r) --> [%t] %l: %m %x %n\n#输出到busi1\nlog4j.logger.busi1= info, busi1\n#每天产生一个日志文件\nlog4j.appender.busi1=org.apache.log4j.DailyRollingFileAppender\n#日志文件格式\nlog4j.appender.busi1.DatePattern='.'yyyy-MM-dd-HH\n#日志路径\nlog4j.appender.busi1.File=logs/busi1.log\n#最低输出日志级别\nlog4j.appender.busi1.Threshold = INFO\n#输出的布局样式\nlog4j.appender.busi1.layout=org.apache.log4j.PatternLayout\n#自定义输出哪些信息\nlog4j.appender.busi1.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %l%t %m%n\n\n\n#输出到busi\nlog4j.logger.busi= info, busi\nlog4j.appender.busi=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.busi.File=logs/busi.log\nlog4j.appender.busi.Threshold = INFO\nlog4j.appender.busi.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.busi.layout=org.apache.log4j.PatternLayout\nlog4j.appender.busi.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %l%t %m%n\n```","slug":"Log4j配置","published":1,"updated":"2019-08-28T11:56:32.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8psc0020agtnwpbagi51","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>Log4j是Apache下的一款开源的日志框架;在项目中，我们会结合slf4j和log4j一起使用;</li>\n<li>Log4j提供了简单的API调用，强大的日志格式定义以及灵活的扩展性。我们可以自己定义Appender来满足我们对于日志输出的需求;</li>\n<li>Log4j有三个主要的组件：Loggers(记录器)，Appenders(输出源)和Layouts(布局);</li>\n</ul>\n<h3 id=\"why-use-it\"><a href=\"#why-use-it\" class=\"headerlink\" title=\"why use it\"></a>why use it</h3><ul>\n<li>我们在系统中对于记录日志的需求并不单纯。首先，我们希望日志要能持久化到磁盘，最基本的就是要能够保存到文件中；其次，我们希望在开发和生产环境中记录的日志并不相同，明显开发环境的日志记录会更多方便调试，但放到生产环境下大量的日志很容易会撑爆服务器，因此在生产环境我们希望只记录重要信息。</li>\n<li>基于不单纯的目的，System.out.println是直接不能满足我们的要求，因此抛弃它，选择功能更强的日志框架。而log4j是apache下一款著名的开源日志框架，log4j满足上面的一切需求。</li>\n<li>记录日志的框架并不仅仅只有log4j，比较有名的还有logback等，现在比较火的SpringBoot默认集成的日志就是logback。不管哪种日志框架，一般都能够实现日志的持久化功能。</li>\n</ul>\n<h3 id=\"日志级别\"><a href=\"#日志级别\" class=\"headerlink\" title=\"日志级别\"></a>日志级别</h3><p>Loggers组件在此系统中被分为五个级别：DEBUG、INFO、WARN、ERROR和FATAL。这五个级别是有顺序的，DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，分别用来指定这条日志信息的重要程度，明白这一点很重要，Log4j有一个规则：只输出级别不低于设定级别的日志信息，假设Loggers级别设定为INFO，则INFO、WARN、ERROR和FATAL级别的日志信息都会输出，而级别比INFO低的DEBUG则不会输出。</p>\n<h3 id=\"输出格式说明：\"><a href=\"#输出格式说明：\" class=\"headerlink\" title=\"输出格式说明：\"></a>输出格式说明：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。</span><br><span class=\"line\">%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d&#123;yyyy/MM/dd HH:mm:ss,SSS&#125;。</span><br><span class=\"line\">%r：输出自应用程序启动到输出该log信息耗费的毫秒数。</span><br><span class=\"line\">%t：输出产生该日志事件的线程名。</span><br><span class=\"line\">%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。</span><br><span class=\"line\">%c：输出日志信息所属的类目，通常就是所在类的全名。</span><br><span class=\"line\">%M：输出产生日志信息的方法名。</span><br><span class=\"line\">%F：输出日志消息产生时所在的文件名称。</span><br><span class=\"line\">%L:：输出代码中的行号。</span><br><span class=\"line\">%m:：输出代码中指定的具体日志信息。</span><br><span class=\"line\">%n：输出一个回车换行符，Windows平台为&quot;rn&quot;，Unix平台为&quot;n&quot;。</span><br><span class=\"line\">%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。</span><br><span class=\"line\">%%：输出一个&quot;%&quot;字符。</span><br><span class=\"line\">另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：</span><br><span class=\"line\">1) c：指定输出category的名称，最小的长度是20，如果category的名称长度小于20的话，默认的情况下右对齐。</span><br><span class=\"line\">2)%-20c：&quot;-&quot;号表示左对齐。</span><br><span class=\"line\">3)%.30c：指定输出category的名称，最大的长度是30，如果category的名称长度大于30的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"log4j-xml\"><a href=\"#log4j-xml\" class=\"headerlink\" title=\"log4j.xml\"></a>log4j.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE log4j:configuration PUBLIC \"-//log4j/log4j Configuration//EN\" \"log4j.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">log4j:configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--输出到控制台--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"consoleAppender\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Threshold\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--输出到文件（info）--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--将生成“info.log.2014-06-11”这样的日志文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileAppenderInfo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.DailyRollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"File\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;user.home&#125;/logs/website/info.log\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"DatePattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".yyyy-MM-dd\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.varia.LevelRangeFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMin\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"INFO\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMax\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"INFO\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--输出到文件（warn）--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileAppenderWarn\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.DailyRollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"File\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;user.home&#125;/logs/website/warn.log\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"DatePattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".yyyy-MM-dd\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.varia.LevelRangeFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMin\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMax\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--输出到文件（error）--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileAppenderError\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.DailyRollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"File\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;user.home&#125;/logs/website/error.log\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"DatePattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".yyyy-MM-dd\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.varia.LevelRangeFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMin\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"ERROR\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMax\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"ERROR\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--屏蔽所有org.springframework.*输出的Debug（及以下）信息--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"INFO\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"ALL\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"consoleAppender\"</span> /&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--    &lt;appender-ref ref=\"fileAppenderInfo\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;appender-ref ref=\"fileAppenderWarn\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;appender-ref ref=\"fileAppenderError\" /&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"log4j-properties\"><a href=\"#log4j-properties\" class=\"headerlink\" title=\"log4j.properties\"></a>log4j.properties</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#默认输出路径</span><br><span class=\"line\">log4j.rootLogger=info,stdout,logfile,busi1</span><br><span class=\"line\">log4j.appender.logfile=org.apache.log4j.FileAppender</span><br><span class=\"line\">log4j.appender.logfile.File=logs/cmsmgr.log</span><br><span class=\"line\">log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.logfile.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %F %p %m%n</span><br><span class=\"line\"></span><br><span class=\"line\">log4j.logger.com.ibatis=INFO</span><br><span class=\"line\">log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=INFO</span><br><span class=\"line\">log4j.logger.com.ibatis.common.jdbc.ScriptRunner=INFO</span><br><span class=\"line\">log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=INFO</span><br><span class=\"line\">log4j.logger.java.sql.Connection=INFO</span><br><span class=\"line\">log4j.logger.java.sql.Statement=INFO</span><br><span class=\"line\">log4j.logger.java.sql.PreparedStatement=INFO</span><br><span class=\"line\">#输出到控制台</span><br><span class=\"line\">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.stdout.Threshold=INFO</span><br><span class=\"line\">log4j.appender.stdout.ImmediateFlush=true</span><br><span class=\"line\">log4j.appender.stdout.Target=System.err</span><br><span class=\"line\">log4j.appender.stdout.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class=\"line\">#输出到busi1</span><br><span class=\"line\">log4j.logger.busi1= info, busi1</span><br><span class=\"line\">#每天产生一个日志文件</span><br><span class=\"line\">log4j.appender.busi1=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">#日志文件格式</span><br><span class=\"line\">log4j.appender.busi1.DatePattern=&apos;.&apos;yyyy-MM-dd-HH</span><br><span class=\"line\">#日志路径</span><br><span class=\"line\">log4j.appender.busi1.File=logs/busi1.log</span><br><span class=\"line\">#最低输出日志级别</span><br><span class=\"line\">log4j.appender.busi1.Threshold = INFO</span><br><span class=\"line\">#输出的布局样式</span><br><span class=\"line\">log4j.appender.busi1.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">#自定义输出哪些信息</span><br><span class=\"line\">log4j.appender.busi1.layout.ConversionPattern=[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %l%t %m%n</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#输出到busi</span><br><span class=\"line\">log4j.logger.busi= info, busi</span><br><span class=\"line\">log4j.appender.busi=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.busi.File=logs/busi.log</span><br><span class=\"line\">log4j.appender.busi.Threshold = INFO</span><br><span class=\"line\">log4j.appender.busi.DatePattern=&apos;.&apos;yyyy-MM-dd-HH</span><br><span class=\"line\">log4j.appender.busi.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.busi.layout.ConversionPattern=[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %l%t %m%n</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>Log4j是Apache下的一款开源的日志框架;在项目中，我们会结合slf4j和log4j一起使用;</li>\n<li>Log4j提供了简单的API调用，强大的日志格式定义以及灵活的扩展性。我们可以自己定义Appender来满足我们对于日志输出的需求;</li>\n<li>Log4j有三个主要的组件：Loggers(记录器)，Appenders(输出源)和Layouts(布局);</li>\n</ul>\n<h3 id=\"why-use-it\"><a href=\"#why-use-it\" class=\"headerlink\" title=\"why use it\"></a>why use it</h3><ul>\n<li>我们在系统中对于记录日志的需求并不单纯。首先，我们希望日志要能持久化到磁盘，最基本的就是要能够保存到文件中；其次，我们希望在开发和生产环境中记录的日志并不相同，明显开发环境的日志记录会更多方便调试，但放到生产环境下大量的日志很容易会撑爆服务器，因此在生产环境我们希望只记录重要信息。</li>\n<li>基于不单纯的目的，System.out.println是直接不能满足我们的要求，因此抛弃它，选择功能更强的日志框架。而log4j是apache下一款著名的开源日志框架，log4j满足上面的一切需求。</li>\n<li>记录日志的框架并不仅仅只有log4j，比较有名的还有logback等，现在比较火的SpringBoot默认集成的日志就是logback。不管哪种日志框架，一般都能够实现日志的持久化功能。</li>\n</ul>\n<h3 id=\"日志级别\"><a href=\"#日志级别\" class=\"headerlink\" title=\"日志级别\"></a>日志级别</h3><p>Loggers组件在此系统中被分为五个级别：DEBUG、INFO、WARN、ERROR和FATAL。这五个级别是有顺序的，DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，分别用来指定这条日志信息的重要程度，明白这一点很重要，Log4j有一个规则：只输出级别不低于设定级别的日志信息，假设Loggers级别设定为INFO，则INFO、WARN、ERROR和FATAL级别的日志信息都会输出，而级别比INFO低的DEBUG则不会输出。</p>\n<h3 id=\"输出格式说明：\"><a href=\"#输出格式说明：\" class=\"headerlink\" title=\"输出格式说明：\"></a>输出格式说明：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。</span><br><span class=\"line\">%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d&#123;yyyy/MM/dd HH:mm:ss,SSS&#125;。</span><br><span class=\"line\">%r：输出自应用程序启动到输出该log信息耗费的毫秒数。</span><br><span class=\"line\">%t：输出产生该日志事件的线程名。</span><br><span class=\"line\">%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。</span><br><span class=\"line\">%c：输出日志信息所属的类目，通常就是所在类的全名。</span><br><span class=\"line\">%M：输出产生日志信息的方法名。</span><br><span class=\"line\">%F：输出日志消息产生时所在的文件名称。</span><br><span class=\"line\">%L:：输出代码中的行号。</span><br><span class=\"line\">%m:：输出代码中指定的具体日志信息。</span><br><span class=\"line\">%n：输出一个回车换行符，Windows平台为&quot;rn&quot;，Unix平台为&quot;n&quot;。</span><br><span class=\"line\">%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。</span><br><span class=\"line\">%%：输出一个&quot;%&quot;字符。</span><br><span class=\"line\">另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：</span><br><span class=\"line\">1) c：指定输出category的名称，最小的长度是20，如果category的名称长度小于20的话，默认的情况下右对齐。</span><br><span class=\"line\">2)%-20c：&quot;-&quot;号表示左对齐。</span><br><span class=\"line\">3)%.30c：指定输出category的名称，最大的长度是30，如果category的名称长度大于30的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"log4j-xml\"><a href=\"#log4j-xml\" class=\"headerlink\" title=\"log4j.xml\"></a>log4j.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE log4j:configuration PUBLIC \"-//log4j/log4j Configuration//EN\" \"log4j.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">log4j:configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--输出到控制台--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"consoleAppender\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Threshold\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--输出到文件（info）--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--将生成“info.log.2014-06-11”这样的日志文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileAppenderInfo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.DailyRollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"File\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;user.home&#125;/logs/website/info.log\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"DatePattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".yyyy-MM-dd\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.varia.LevelRangeFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMin\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"INFO\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMax\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"INFO\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--输出到文件（warn）--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileAppenderWarn\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.DailyRollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"File\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;user.home&#125;/logs/website/warn.log\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"DatePattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".yyyy-MM-dd\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.varia.LevelRangeFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMin\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMax\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"WARN\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--输出到文件（error）--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileAppenderError\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.DailyRollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"File\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;user.home&#125;/logs/website/error.log\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"DatePattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".yyyy-MM-dd\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.varia.LevelRangeFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMin\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"ERROR\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMax\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"ERROR\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--屏蔽所有org.springframework.*输出的Debug（及以下）信息--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"INFO\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"ALL\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"consoleAppender\"</span> /&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--    &lt;appender-ref ref=\"fileAppenderInfo\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;appender-ref ref=\"fileAppenderWarn\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;appender-ref ref=\"fileAppenderError\" /&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"log4j-properties\"><a href=\"#log4j-properties\" class=\"headerlink\" title=\"log4j.properties\"></a>log4j.properties</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#默认输出路径</span><br><span class=\"line\">log4j.rootLogger=info,stdout,logfile,busi1</span><br><span class=\"line\">log4j.appender.logfile=org.apache.log4j.FileAppender</span><br><span class=\"line\">log4j.appender.logfile.File=logs/cmsmgr.log</span><br><span class=\"line\">log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.logfile.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %F %p %m%n</span><br><span class=\"line\"></span><br><span class=\"line\">log4j.logger.com.ibatis=INFO</span><br><span class=\"line\">log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=INFO</span><br><span class=\"line\">log4j.logger.com.ibatis.common.jdbc.ScriptRunner=INFO</span><br><span class=\"line\">log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=INFO</span><br><span class=\"line\">log4j.logger.java.sql.Connection=INFO</span><br><span class=\"line\">log4j.logger.java.sql.Statement=INFO</span><br><span class=\"line\">log4j.logger.java.sql.PreparedStatement=INFO</span><br><span class=\"line\">#输出到控制台</span><br><span class=\"line\">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.stdout.Threshold=INFO</span><br><span class=\"line\">log4j.appender.stdout.ImmediateFlush=true</span><br><span class=\"line\">log4j.appender.stdout.Target=System.err</span><br><span class=\"line\">log4j.appender.stdout.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class=\"line\">#输出到busi1</span><br><span class=\"line\">log4j.logger.busi1= info, busi1</span><br><span class=\"line\">#每天产生一个日志文件</span><br><span class=\"line\">log4j.appender.busi1=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">#日志文件格式</span><br><span class=\"line\">log4j.appender.busi1.DatePattern=&apos;.&apos;yyyy-MM-dd-HH</span><br><span class=\"line\">#日志路径</span><br><span class=\"line\">log4j.appender.busi1.File=logs/busi1.log</span><br><span class=\"line\">#最低输出日志级别</span><br><span class=\"line\">log4j.appender.busi1.Threshold = INFO</span><br><span class=\"line\">#输出的布局样式</span><br><span class=\"line\">log4j.appender.busi1.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">#自定义输出哪些信息</span><br><span class=\"line\">log4j.appender.busi1.layout.ConversionPattern=[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %l%t %m%n</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#输出到busi</span><br><span class=\"line\">log4j.logger.busi= info, busi</span><br><span class=\"line\">log4j.appender.busi=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.busi.File=logs/busi.log</span><br><span class=\"line\">log4j.appender.busi.Threshold = INFO</span><br><span class=\"line\">log4j.appender.busi.DatePattern=&apos;.&apos;yyyy-MM-dd-HH</span><br><span class=\"line\">log4j.appender.busi.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.busi.layout.ConversionPattern=[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %l%t %m%n</span><br></pre></td></tr></table></figure>"},{"title":"LogBack配置","date":"2019-08-28T10:51:03.000Z","_content":"### what is\n-Logback是由log4j创始人设计的另一个开源日志组件,[官方网站] (http://logback.qos.ch);\n- 它当前分为下面几个模块：\n1. logback-core：其它两个模块的基础模块;\n2. logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4jAPI使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging;\n3. logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能;\n\n### why use it\n- 更快的实现：Logback的内核重写了，在一些关键执行路径上性能提升10倍以上。而且logback不仅性能提升了，初始化内存加载也更小了；\n- 非常充分的测试：Logback经过了几年，数不清小时的测试。Logback的测试完全不同级别的；\n- Logback-classic非常自然实现了SLF4j，在使用SLF4j中，你都感觉不到logback-classic；\n- 非常充分的文档：官方网站有两百多页的文档；\n- 自动重新加载配置文件：当配置文件修改了，Logback-classic能自动重新加载配置文件。扫描过程快且安全，它并不需要另外创建一个扫描线程；\n- Filters（过滤器）：在log4j，只有降低日志级别，不过这样会打出大量的日志，会影响应用性能。在Logback，你可以继续保持那个日志级别；\n- 自动压缩已经打出来的log：RollingFileAppender在产生新文件的时候，会自动异步压缩已经打出来的日志文件。\n- 自动去除旧的日志文件：设置TimeBasedRollingPolicy或者SizeAndTimeBasedFNATP的maxHistory属性，你可以控制已经产生日志文件的最大数量；\n\n### logback.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n\tscan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。\n\tscanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。\n\tdebug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。\n-->\n<configuration debug=\"true\" scan=\"true\" scanPeriod=\"60 seconds\">\n\t<!-- 上下文名称，用于区分不同应用程序的记录 默认default -->\n\t<contextName>default</contextName>\n\n\t<!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->\n\t<property name=\"LOG_HOME\" value=\"./log\" />\n\t<!-- 定义日志布局的转换样式 -->\n\t<!--格式化输出：%d表示日期，%p优先级，%c类全限定名，%M方法名，%L行号，%m日志信息，%n换行 -->\n\t<property name=\"layout_pattern\" value=\"%d{yyyy-MM-dd HH:mm:ss}[%p][%c][%M][%L] -> %m%n\" />\n\t<property name=\"layout_pattern2\" value=\"%date [%thread] %-5level %logger{36} [%line] - %msg%n\"/>\n\t<!-- 定义要保存的最大归档文件数量，异步删除旧文件 （需要结合滚动pattern具体分析） -->\n\t<property name=\"logFile_period\" value=\"30\" />\n\t<!-- 定义单个日志文件的最大为10M 超出此大小则生成新文件 -->\n\t<property name=\"logFile_maxSize\" value=\"10MB\" />\n\n\t<!-- 邮件参数设置 -->\n\t<!-- 定义邮件服务器地址 -->\n\t<property name=\"smtpHost\" value=\"smtp.163.com\" />\n\t<!-- smtp端口 ，默认值25 -->\n\t<property name=\"smtpPort\" value=\"25\" />\n\t<!-- 发件人用户名 -->\n\t<property name=\"username\" value=\"jmzc_top\" />\n\t<!-- 发件人授权码 -->\n\t<property name=\"password\" value=\"grant163tojmzc\" />\n\t<!-- 安全连接 默认false -->\n\t<property name=\"SSL\" value=\"false\" />\n\t<!-- 收件人邮箱 -->\n\t<property name=\"email_to\" value=\"jmzc_top@aliyun.com\" />\n\t<!-- 发件人邮箱 -->\n\t<property name=\"email_from\" value=\"jmzc_top@163.com\" />\n\t<!-- 主题 默认%logger{20} - %m -->\n\t<property name=\"email_subject\" value=\"【Error】: %logger\" />\n\n\t<!-- 输出日志到控制台 -->\n\t<appender name=\"Console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\n\t\t\t<pattern>${layout_pattern}</pattern>\n\t\t\t<charset>UTF-8</charset>\n\t\t</encoder>\n\t\t<!-- 过滤器，记录>=DEBUG级别的日志 -->\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t\t<level>DEBUG</level>\n\t\t</filter>\n\t</appender>\n\t<!-- 输入日志到文件 DEBUG级别 -->\n\t<appender name=\"FileDebug\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<FileNamePattern>${LOG_HOME}/debug.%d{yyyyMMdd}.zip</FileNamePattern>\n\t\t\t<MaxHistory>${logFile_period}</MaxHistory>\n\t\t</rollingPolicy>\n\t\t<encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\n\t\t\t<pattern>${layout_pattern}</pattern>\n\t\t</encoder>\n\t\t<triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<MaxFileSize>${logFile_maxSize}</MaxFileSize>\n\t\t</triggeringPolicy>\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t\t<level>DEBUG</level>\n\t\t</filter>\n\t\t<!-- 过滤器，只记录DEBUG级别的日志 -->\n\t\t<!-- <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n\t\t\t<level>DEBUG</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t\t</filter> -->\n\t</appender>\n\n\t<!-- 输入日志到文件 ERROR级别 -->\n\t<appender name=\"FileError\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- 设置文件滚动的样式 %d{yyyyMMdd}表示每天滚动 或者达到最大文件大小后滚动 .gz | .zip | .log | .txt -->\n\t\t\t<FileNamePattern>${LOG_HOME}/error.%d{yyyyMMdd}.zip</FileNamePattern>\n\t\t\t<MaxHistory>${logFile_period}</MaxHistory>\n\t\t</rollingPolicy>\n\t\t<encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\n\t\t\t<pattern>${layout_pattern}</pattern>\n\t\t</encoder>\n\t\t<triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<MaxFileSize>${logFile_maxSize}</MaxFileSize>\n\t\t</triggeringPolicy>\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t\t<level>ERROR</level>\n\t\t</filter>\n\t</appender>\n\n\t<!-- 输出日志到邮件 janino.jar和mail.jar -->\n\t<appender name=\"Email\" class=\"ch.qos.logback.classic.net.SMTPAppender\">\n\t\t<!-- 基于标记和日志等级发送邮件 -->\n\t\t<evaluator class=\"ch.qos.logback.classic.boolex.JaninoEventEvaluator\">\n\t\t\t<expression>\n\t\t\t\t(level > WARN &amp;&amp; null != throwable)||(marker != null &amp;&amp; marker.contains(\"DEVELOP\"))\n\t\t\t</expression>\n\t\t</evaluator>\n\t\t<!-- 一个邮件只包含一个日志条目 -->\n\t\t<cyclicBufferTracker class=\"ch.qos.logback.core.spi.CyclicBufferTracker\">\n\t\t\t<bufferSize>1</bufferSize>\n\t\t</cyclicBufferTracker>\n\t\t<!-- 设置同步发送，异步不好用？？？ -->\n\t\t<asynchronousSending>false</asynchronousSending>\n\t\t<smtpHost>${smtpHost}</smtpHost>\n\t\t<smtpPort>${smtpPort}</smtpPort>\n\t\t<SSL>${SSL}</SSL>\n\t\t<username>${username}</username>\n\t\t<password>${password}</password>\n\t\t<to>${email_to}</to>\n\t\t<from>${email_from}</from>\n\t\t<subject>${email_subject}</subject>\n\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n\t\t\t<Pattern>${layout_pattern}</Pattern>\n\t\t</layout>\n\t</appender>\n\n\t<!-- root是所有logger的祖先 -->\n\t<!-- 日志输出级别 TRACE < DEBUG < INFO < WARN < ERROR -->\n\t<root level=\"INFO\">\n\t\t<appender-ref ref=\"Console\" />\n\t\t<!--\n\t\t\t<appender-ref ref=\"FileDebug\" />\n\t\t\t<appender-ref ref=\"FileError\" />\n\t\t\t<appender-ref ref=\"Email\" />\n\t\t-->\n\t</root>\n\t\n\t<!-- show parameters for hibernate sql 专为 Hibernate 定制 -->\n\t<logger name=\"org.hibernate.type.descriptor.sql.BasicBinder\" level=\"TRACE\" />\n\t<logger name=\"org.hibernate.type.descriptor.sql.BasicExtractor\" level=\"DEBUG\" />\n\t<logger name=\"org.hibernate.SQL\" level=\"DEBUG\" />\n\t<logger name=\"org.hibernate.engine.QueryParameters\" level=\"DEBUG\" />\n\t<logger name=\"org.hibernate.engine.query.HQLQueryPlan\" level=\"DEBUG\" />\n\t \n\t<!--myibatis log configure-->\n\t<logger name=\"com.apache.ibatis\" level=\"TRACE\"/>\n\t<logger name=\"java.sql.Connection\" level=\"DEBUG\"/>\n\t<logger name=\"java.sql.Statement\" level=\"DEBUG\"/>\n\t<logger name=\"java.sql.PreparedStatement\" level=\"DEBUG\"/>\n</configuration>\n```","source":"_posts/LogBack配置.md","raw":"---\ntitle: LogBack配置\ndate: 2019-08-28 18:51:03\ntags: logback\ncategories: 配置文件\n---\n### what is\n-Logback是由log4j创始人设计的另一个开源日志组件,[官方网站] (http://logback.qos.ch);\n- 它当前分为下面几个模块：\n1. logback-core：其它两个模块的基础模块;\n2. logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4jAPI使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging;\n3. logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能;\n\n### why use it\n- 更快的实现：Logback的内核重写了，在一些关键执行路径上性能提升10倍以上。而且logback不仅性能提升了，初始化内存加载也更小了；\n- 非常充分的测试：Logback经过了几年，数不清小时的测试。Logback的测试完全不同级别的；\n- Logback-classic非常自然实现了SLF4j，在使用SLF4j中，你都感觉不到logback-classic；\n- 非常充分的文档：官方网站有两百多页的文档；\n- 自动重新加载配置文件：当配置文件修改了，Logback-classic能自动重新加载配置文件。扫描过程快且安全，它并不需要另外创建一个扫描线程；\n- Filters（过滤器）：在log4j，只有降低日志级别，不过这样会打出大量的日志，会影响应用性能。在Logback，你可以继续保持那个日志级别；\n- 自动压缩已经打出来的log：RollingFileAppender在产生新文件的时候，会自动异步压缩已经打出来的日志文件。\n- 自动去除旧的日志文件：设置TimeBasedRollingPolicy或者SizeAndTimeBasedFNATP的maxHistory属性，你可以控制已经产生日志文件的最大数量；\n\n### logback.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n\tscan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。\n\tscanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。\n\tdebug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。\n-->\n<configuration debug=\"true\" scan=\"true\" scanPeriod=\"60 seconds\">\n\t<!-- 上下文名称，用于区分不同应用程序的记录 默认default -->\n\t<contextName>default</contextName>\n\n\t<!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->\n\t<property name=\"LOG_HOME\" value=\"./log\" />\n\t<!-- 定义日志布局的转换样式 -->\n\t<!--格式化输出：%d表示日期，%p优先级，%c类全限定名，%M方法名，%L行号，%m日志信息，%n换行 -->\n\t<property name=\"layout_pattern\" value=\"%d{yyyy-MM-dd HH:mm:ss}[%p][%c][%M][%L] -> %m%n\" />\n\t<property name=\"layout_pattern2\" value=\"%date [%thread] %-5level %logger{36} [%line] - %msg%n\"/>\n\t<!-- 定义要保存的最大归档文件数量，异步删除旧文件 （需要结合滚动pattern具体分析） -->\n\t<property name=\"logFile_period\" value=\"30\" />\n\t<!-- 定义单个日志文件的最大为10M 超出此大小则生成新文件 -->\n\t<property name=\"logFile_maxSize\" value=\"10MB\" />\n\n\t<!-- 邮件参数设置 -->\n\t<!-- 定义邮件服务器地址 -->\n\t<property name=\"smtpHost\" value=\"smtp.163.com\" />\n\t<!-- smtp端口 ，默认值25 -->\n\t<property name=\"smtpPort\" value=\"25\" />\n\t<!-- 发件人用户名 -->\n\t<property name=\"username\" value=\"jmzc_top\" />\n\t<!-- 发件人授权码 -->\n\t<property name=\"password\" value=\"grant163tojmzc\" />\n\t<!-- 安全连接 默认false -->\n\t<property name=\"SSL\" value=\"false\" />\n\t<!-- 收件人邮箱 -->\n\t<property name=\"email_to\" value=\"jmzc_top@aliyun.com\" />\n\t<!-- 发件人邮箱 -->\n\t<property name=\"email_from\" value=\"jmzc_top@163.com\" />\n\t<!-- 主题 默认%logger{20} - %m -->\n\t<property name=\"email_subject\" value=\"【Error】: %logger\" />\n\n\t<!-- 输出日志到控制台 -->\n\t<appender name=\"Console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\n\t\t\t<pattern>${layout_pattern}</pattern>\n\t\t\t<charset>UTF-8</charset>\n\t\t</encoder>\n\t\t<!-- 过滤器，记录>=DEBUG级别的日志 -->\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t\t<level>DEBUG</level>\n\t\t</filter>\n\t</appender>\n\t<!-- 输入日志到文件 DEBUG级别 -->\n\t<appender name=\"FileDebug\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<FileNamePattern>${LOG_HOME}/debug.%d{yyyyMMdd}.zip</FileNamePattern>\n\t\t\t<MaxHistory>${logFile_period}</MaxHistory>\n\t\t</rollingPolicy>\n\t\t<encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\n\t\t\t<pattern>${layout_pattern}</pattern>\n\t\t</encoder>\n\t\t<triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<MaxFileSize>${logFile_maxSize}</MaxFileSize>\n\t\t</triggeringPolicy>\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t\t<level>DEBUG</level>\n\t\t</filter>\n\t\t<!-- 过滤器，只记录DEBUG级别的日志 -->\n\t\t<!-- <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n\t\t\t<level>DEBUG</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t\t</filter> -->\n\t</appender>\n\n\t<!-- 输入日志到文件 ERROR级别 -->\n\t<appender name=\"FileError\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- 设置文件滚动的样式 %d{yyyyMMdd}表示每天滚动 或者达到最大文件大小后滚动 .gz | .zip | .log | .txt -->\n\t\t\t<FileNamePattern>${LOG_HOME}/error.%d{yyyyMMdd}.zip</FileNamePattern>\n\t\t\t<MaxHistory>${logFile_period}</MaxHistory>\n\t\t</rollingPolicy>\n\t\t<encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\n\t\t\t<pattern>${layout_pattern}</pattern>\n\t\t</encoder>\n\t\t<triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<MaxFileSize>${logFile_maxSize}</MaxFileSize>\n\t\t</triggeringPolicy>\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t\t<level>ERROR</level>\n\t\t</filter>\n\t</appender>\n\n\t<!-- 输出日志到邮件 janino.jar和mail.jar -->\n\t<appender name=\"Email\" class=\"ch.qos.logback.classic.net.SMTPAppender\">\n\t\t<!-- 基于标记和日志等级发送邮件 -->\n\t\t<evaluator class=\"ch.qos.logback.classic.boolex.JaninoEventEvaluator\">\n\t\t\t<expression>\n\t\t\t\t(level > WARN &amp;&amp; null != throwable)||(marker != null &amp;&amp; marker.contains(\"DEVELOP\"))\n\t\t\t</expression>\n\t\t</evaluator>\n\t\t<!-- 一个邮件只包含一个日志条目 -->\n\t\t<cyclicBufferTracker class=\"ch.qos.logback.core.spi.CyclicBufferTracker\">\n\t\t\t<bufferSize>1</bufferSize>\n\t\t</cyclicBufferTracker>\n\t\t<!-- 设置同步发送，异步不好用？？？ -->\n\t\t<asynchronousSending>false</asynchronousSending>\n\t\t<smtpHost>${smtpHost}</smtpHost>\n\t\t<smtpPort>${smtpPort}</smtpPort>\n\t\t<SSL>${SSL}</SSL>\n\t\t<username>${username}</username>\n\t\t<password>${password}</password>\n\t\t<to>${email_to}</to>\n\t\t<from>${email_from}</from>\n\t\t<subject>${email_subject}</subject>\n\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n\t\t\t<Pattern>${layout_pattern}</Pattern>\n\t\t</layout>\n\t</appender>\n\n\t<!-- root是所有logger的祖先 -->\n\t<!-- 日志输出级别 TRACE < DEBUG < INFO < WARN < ERROR -->\n\t<root level=\"INFO\">\n\t\t<appender-ref ref=\"Console\" />\n\t\t<!--\n\t\t\t<appender-ref ref=\"FileDebug\" />\n\t\t\t<appender-ref ref=\"FileError\" />\n\t\t\t<appender-ref ref=\"Email\" />\n\t\t-->\n\t</root>\n\t\n\t<!-- show parameters for hibernate sql 专为 Hibernate 定制 -->\n\t<logger name=\"org.hibernate.type.descriptor.sql.BasicBinder\" level=\"TRACE\" />\n\t<logger name=\"org.hibernate.type.descriptor.sql.BasicExtractor\" level=\"DEBUG\" />\n\t<logger name=\"org.hibernate.SQL\" level=\"DEBUG\" />\n\t<logger name=\"org.hibernate.engine.QueryParameters\" level=\"DEBUG\" />\n\t<logger name=\"org.hibernate.engine.query.HQLQueryPlan\" level=\"DEBUG\" />\n\t \n\t<!--myibatis log configure-->\n\t<logger name=\"com.apache.ibatis\" level=\"TRACE\"/>\n\t<logger name=\"java.sql.Connection\" level=\"DEBUG\"/>\n\t<logger name=\"java.sql.Statement\" level=\"DEBUG\"/>\n\t<logger name=\"java.sql.PreparedStatement\" level=\"DEBUG\"/>\n</configuration>\n```","slug":"LogBack配置","published":1,"updated":"2019-08-28T11:44:12.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8psf0022agtnt2jgwlg6","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><p>-Logback是由log4j创始人设计的另一个开源日志组件,[官方网站] (<a href=\"http://logback.qos.ch\" target=\"_blank\" rel=\"noopener\">http://logback.qos.ch</a>);</p>\n<ul>\n<li>它当前分为下面几个模块：</li>\n</ul>\n<ol>\n<li>logback-core：其它两个模块的基础模块;</li>\n<li>logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4jAPI使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging;</li>\n<li>logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能;</li>\n</ol>\n<h3 id=\"why-use-it\"><a href=\"#why-use-it\" class=\"headerlink\" title=\"why use it\"></a>why use it</h3><ul>\n<li>更快的实现：Logback的内核重写了，在一些关键执行路径上性能提升10倍以上。而且logback不仅性能提升了，初始化内存加载也更小了；</li>\n<li>非常充分的测试：Logback经过了几年，数不清小时的测试。Logback的测试完全不同级别的；</li>\n<li>Logback-classic非常自然实现了SLF4j，在使用SLF4j中，你都感觉不到logback-classic；</li>\n<li>非常充分的文档：官方网站有两百多页的文档；</li>\n<li>自动重新加载配置文件：当配置文件修改了，Logback-classic能自动重新加载配置文件。扫描过程快且安全，它并不需要另外创建一个扫描线程；</li>\n<li>Filters（过滤器）：在log4j，只有降低日志级别，不过这样会打出大量的日志，会影响应用性能。在Logback，你可以继续保持那个日志级别；</li>\n<li>自动压缩已经打出来的log：RollingFileAppender在产生新文件的时候，会自动异步压缩已经打出来的日志文件。</li>\n<li>自动去除旧的日志文件：设置TimeBasedRollingPolicy或者SizeAndTimeBasedFNATP的maxHistory属性，你可以控制已经产生日志文件的最大数量；</li>\n</ul>\n<h3 id=\"logback-xml\"><a href=\"#logback-xml\" class=\"headerlink\" title=\"logback.xml\"></a>logback.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\tscan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span></span><br><span class=\"line\"><span class=\"comment\">\tscanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</span></span><br><span class=\"line\"><span class=\"comment\">\tde<span class=\"doctag\">bug:</span> 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 seconds\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 上下文名称，用于区分不同应用程序的记录 默认default --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">contextName</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">contextName</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOG_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"./log\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 定义日志布局的转换样式 --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--格式化输出：%d表示日期，%p优先级，%c类全限定名，%M方法名，%L行号，%m日志信息，%n换行 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"layout_pattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%d&#123;yyyy-MM-dd HH:mm:ss&#125;[%p][%c][%M][%L] -&gt; %m%n\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"layout_pattern2\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date [%thread] %-5level %logger&#123;36&#125; [%line] - %msg%n\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 定义要保存的最大归档文件数量，异步删除旧文件 （需要结合滚动pattern具体分析） --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logFile_period\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"30\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 定义单个日志文件的最大为10M 超出此大小则生成新文件 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logFile_maxSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10MB\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 邮件参数设置 --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 定义邮件服务器地址 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"smtpHost\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"smtp.163.com\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- smtp端口 ，默认值25 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"smtpPort\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"25\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 发件人用户名 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jmzc_top\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 发件人授权码 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"grant163tojmzc\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 安全连接 默认false --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"SSL\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 收件人邮箱 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email_to\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jmzc_top@aliyun.com\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 发件人邮箱 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email_from\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jmzc_top@163.com\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 主题 默认%logger&#123;20&#125; - %m --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email_subject\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"【Error】: %logger\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 输出日志到控制台 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Console\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;layout_pattern&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 过滤器，记录&gt;=DEBUG级别的日志 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.ThresholdFilter\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 输入日志到文件 DEBUG级别 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FileDebug\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/debug.%d&#123;yyyyMMdd&#125;.zip<span class=\"tag\">&lt;/<span class=\"name\">FileNamePattern</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">MaxHistory</span>&gt;</span>$&#123;logFile_period&#125;<span class=\"tag\">&lt;/<span class=\"name\">MaxHistory</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;layout_pattern&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">triggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">MaxFileSize</span>&gt;</span>$&#123;logFile_maxSize&#125;<span class=\"tag\">&lt;/<span class=\"name\">MaxFileSize</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">triggeringPolicy</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.ThresholdFilter\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 过滤器，只记录DEBUG级别的日志 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;level&gt;DEBUG&lt;/level&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;/filter&gt; --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 输入日志到文件 ERROR级别 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FileError\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 设置文件滚动的样式 %d&#123;yyyyMMdd&#125;表示每天滚动 或者达到最大文件大小后滚动 .gz | .zip | .log | .txt --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/error.%d&#123;yyyyMMdd&#125;.zip<span class=\"tag\">&lt;/<span class=\"name\">FileNamePattern</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">MaxHistory</span>&gt;</span>$&#123;logFile_period&#125;<span class=\"tag\">&lt;/<span class=\"name\">MaxHistory</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;layout_pattern&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">triggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">MaxFileSize</span>&gt;</span>$&#123;logFile_maxSize&#125;<span class=\"tag\">&lt;/<span class=\"name\">MaxFileSize</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">triggeringPolicy</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.ThresholdFilter\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 输出日志到邮件 janino.jar和mail.jar --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Email\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.net.SMTPAppender\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 基于标记和日志等级发送邮件 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">evaluator</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.boolex.JaninoEventEvaluator\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">expression</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t(level &gt; WARN &amp;amp;&amp;amp; null != throwable)||(marker != null &amp;amp;&amp;amp; marker.contains(\"DEVELOP\"))</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">expression</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">evaluator</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 一个邮件只包含一个日志条目 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">cyclicBufferTracker</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.spi.CyclicBufferTracker\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bufferSize</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">bufferSize</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">cyclicBufferTracker</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 设置同步发送，异步不好用？？？ --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">asynchronousSending</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">asynchronousSending</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">smtpHost</span>&gt;</span>$&#123;smtpHost&#125;<span class=\"tag\">&lt;/<span class=\"name\">smtpHost</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">smtpPort</span>&gt;</span>$&#123;smtpPort&#125;<span class=\"tag\">&lt;/<span class=\"name\">smtpPort</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">SSL</span>&gt;</span>$&#123;SSL&#125;<span class=\"tag\">&lt;/<span class=\"name\">SSL</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>$&#123;username&#125;<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>$&#123;password&#125;<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">to</span>&gt;</span>$&#123;email_to&#125;<span class=\"tag\">&lt;/<span class=\"name\">to</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">from</span>&gt;</span>$&#123;email_from&#125;<span class=\"tag\">&lt;/<span class=\"name\">from</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">subject</span>&gt;</span>$&#123;email_subject&#125;<span class=\"tag\">&lt;/<span class=\"name\">subject</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>$&#123;layout_pattern&#125;<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- root是所有logger的祖先 --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 日志输出级别 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"INFO\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"Console\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;appender-ref ref=\"FileDebug\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;appender-ref ref=\"FileError\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;appender-ref ref=\"Email\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- show parameters for hibernate sql 专为 Hibernate 定制 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.hibernate.type.descriptor.sql.BasicBinder\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"TRACE\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.hibernate.type.descriptor.sql.BasicExtractor\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.hibernate.SQL\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.hibernate.engine.QueryParameters\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.hibernate.engine.query.HQLQueryPlan\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></span><br><span class=\"line\">\t </span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--myibatis log configure--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.apache.ibatis\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"TRACE\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql.Connection\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql.Statement\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql.PreparedStatement\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><p>-Logback是由log4j创始人设计的另一个开源日志组件,[官方网站] (<a href=\"http://logback.qos.ch\" target=\"_blank\" rel=\"noopener\">http://logback.qos.ch</a>);</p>\n<ul>\n<li>它当前分为下面几个模块：</li>\n</ul>\n<ol>\n<li>logback-core：其它两个模块的基础模块;</li>\n<li>logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4jAPI使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging;</li>\n<li>logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能;</li>\n</ol>\n<h3 id=\"why-use-it\"><a href=\"#why-use-it\" class=\"headerlink\" title=\"why use it\"></a>why use it</h3><ul>\n<li>更快的实现：Logback的内核重写了，在一些关键执行路径上性能提升10倍以上。而且logback不仅性能提升了，初始化内存加载也更小了；</li>\n<li>非常充分的测试：Logback经过了几年，数不清小时的测试。Logback的测试完全不同级别的；</li>\n<li>Logback-classic非常自然实现了SLF4j，在使用SLF4j中，你都感觉不到logback-classic；</li>\n<li>非常充分的文档：官方网站有两百多页的文档；</li>\n<li>自动重新加载配置文件：当配置文件修改了，Logback-classic能自动重新加载配置文件。扫描过程快且安全，它并不需要另外创建一个扫描线程；</li>\n<li>Filters（过滤器）：在log4j，只有降低日志级别，不过这样会打出大量的日志，会影响应用性能。在Logback，你可以继续保持那个日志级别；</li>\n<li>自动压缩已经打出来的log：RollingFileAppender在产生新文件的时候，会自动异步压缩已经打出来的日志文件。</li>\n<li>自动去除旧的日志文件：设置TimeBasedRollingPolicy或者SizeAndTimeBasedFNATP的maxHistory属性，你可以控制已经产生日志文件的最大数量；</li>\n</ul>\n<h3 id=\"logback-xml\"><a href=\"#logback-xml\" class=\"headerlink\" title=\"logback.xml\"></a>logback.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\tscan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span></span><br><span class=\"line\"><span class=\"comment\">\tscanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</span></span><br><span class=\"line\"><span class=\"comment\">\tde<span class=\"doctag\">bug:</span> 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 seconds\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 上下文名称，用于区分不同应用程序的记录 默认default --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">contextName</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">contextName</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOG_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"./log\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 定义日志布局的转换样式 --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--格式化输出：%d表示日期，%p优先级，%c类全限定名，%M方法名，%L行号，%m日志信息，%n换行 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"layout_pattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%d&#123;yyyy-MM-dd HH:mm:ss&#125;[%p][%c][%M][%L] -&gt; %m%n\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"layout_pattern2\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date [%thread] %-5level %logger&#123;36&#125; [%line] - %msg%n\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 定义要保存的最大归档文件数量，异步删除旧文件 （需要结合滚动pattern具体分析） --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logFile_period\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"30\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 定义单个日志文件的最大为10M 超出此大小则生成新文件 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logFile_maxSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10MB\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 邮件参数设置 --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 定义邮件服务器地址 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"smtpHost\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"smtp.163.com\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- smtp端口 ，默认值25 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"smtpPort\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"25\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 发件人用户名 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jmzc_top\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 发件人授权码 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"grant163tojmzc\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 安全连接 默认false --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"SSL\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 收件人邮箱 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email_to\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jmzc_top@aliyun.com\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 发件人邮箱 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email_from\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jmzc_top@163.com\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 主题 默认%logger&#123;20&#125; - %m --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email_subject\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"【Error】: %logger\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 输出日志到控制台 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Console\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;layout_pattern&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 过滤器，记录&gt;=DEBUG级别的日志 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.ThresholdFilter\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 输入日志到文件 DEBUG级别 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FileDebug\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/debug.%d&#123;yyyyMMdd&#125;.zip<span class=\"tag\">&lt;/<span class=\"name\">FileNamePattern</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">MaxHistory</span>&gt;</span>$&#123;logFile_period&#125;<span class=\"tag\">&lt;/<span class=\"name\">MaxHistory</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;layout_pattern&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">triggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">MaxFileSize</span>&gt;</span>$&#123;logFile_maxSize&#125;<span class=\"tag\">&lt;/<span class=\"name\">MaxFileSize</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">triggeringPolicy</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.ThresholdFilter\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 过滤器，只记录DEBUG级别的日志 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;level&gt;DEBUG&lt;/level&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;/filter&gt; --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 输入日志到文件 ERROR级别 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FileError\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 设置文件滚动的样式 %d&#123;yyyyMMdd&#125;表示每天滚动 或者达到最大文件大小后滚动 .gz | .zip | .log | .txt --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/error.%d&#123;yyyyMMdd&#125;.zip<span class=\"tag\">&lt;/<span class=\"name\">FileNamePattern</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">MaxHistory</span>&gt;</span>$&#123;logFile_period&#125;<span class=\"tag\">&lt;/<span class=\"name\">MaxHistory</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;layout_pattern&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">triggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">MaxFileSize</span>&gt;</span>$&#123;logFile_maxSize&#125;<span class=\"tag\">&lt;/<span class=\"name\">MaxFileSize</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">triggeringPolicy</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.ThresholdFilter\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 输出日志到邮件 janino.jar和mail.jar --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Email\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.net.SMTPAppender\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 基于标记和日志等级发送邮件 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">evaluator</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.boolex.JaninoEventEvaluator\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">expression</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t(level &gt; WARN &amp;amp;&amp;amp; null != throwable)||(marker != null &amp;amp;&amp;amp; marker.contains(\"DEVELOP\"))</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">expression</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">evaluator</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 一个邮件只包含一个日志条目 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">cyclicBufferTracker</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.spi.CyclicBufferTracker\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bufferSize</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">bufferSize</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">cyclicBufferTracker</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 设置同步发送，异步不好用？？？ --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">asynchronousSending</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">asynchronousSending</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">smtpHost</span>&gt;</span>$&#123;smtpHost&#125;<span class=\"tag\">&lt;/<span class=\"name\">smtpHost</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">smtpPort</span>&gt;</span>$&#123;smtpPort&#125;<span class=\"tag\">&lt;/<span class=\"name\">smtpPort</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">SSL</span>&gt;</span>$&#123;SSL&#125;<span class=\"tag\">&lt;/<span class=\"name\">SSL</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>$&#123;username&#125;<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>$&#123;password&#125;<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">to</span>&gt;</span>$&#123;email_to&#125;<span class=\"tag\">&lt;/<span class=\"name\">to</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">from</span>&gt;</span>$&#123;email_from&#125;<span class=\"tag\">&lt;/<span class=\"name\">from</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">subject</span>&gt;</span>$&#123;email_subject&#125;<span class=\"tag\">&lt;/<span class=\"name\">subject</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>$&#123;layout_pattern&#125;<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- root是所有logger的祖先 --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 日志输出级别 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"INFO\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"Console\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;appender-ref ref=\"FileDebug\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;appender-ref ref=\"FileError\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;appender-ref ref=\"Email\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- show parameters for hibernate sql 专为 Hibernate 定制 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.hibernate.type.descriptor.sql.BasicBinder\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"TRACE\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.hibernate.type.descriptor.sql.BasicExtractor\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.hibernate.SQL\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.hibernate.engine.QueryParameters\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.hibernate.engine.query.HQLQueryPlan\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span></span><br><span class=\"line\">\t </span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--myibatis log configure--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.apache.ibatis\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"TRACE\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql.Connection\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql.Statement\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql.PreparedStatement\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Maven入门","date":"2019-08-28T08:40:39.000Z","_content":"### what is\n- maven 是 apache软件基金会的一个产品；\n- maven 是一个将模型应用于工程的管理系统；\n- maven 是 一个Java项目的构建和管理工具，包括项目生命周期的管理和项目依赖的管理；\n\n### why use it\n- 简化项目构建，缩短了开发周期；\n- 将代码与架包分离，仅仅在POM中提供依赖的引用即可；\n- 统一的目录结构和约定，有利于开发者理解开发原则；\n\n### how to config it\n- 配置本地仓库路径\n```\n<settings>\n  ...\n  <localRepository>D:\\Repository\\mvnRepo</localRepository>\n  ...\n</settings>\n```\n- 配置远程镜像仓库\n```\n<settings>\n  ...\n  <mirrors>\n    <mirror>\n\t\t<id>alimaven</id>\n\t\t<name>aliyun maven</name>\n\t\t<url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n\t\t<mirrorOf>central</mirrorOf>\n    </mirror>\n  </mirrors>\n...\n</settings>\n```\n- 配置JDK版本（也可以使用编译插件）\n```\n<settings>\n  ...\n  <profiles>\n\t\t<!--定义工程的JDK版本-->\n\t\t<profile>\n\t\t\t<id>jdk-1.8</id>\n\t\t\t<activation>\n\t\t\t\t<activeteByDefault>true</activeteByDefault>\n\t\t\t\t<jdk>1.8</jdk>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<maven.compiler.source>1.8</maven.compiler.source>\n\t\t\t\t<maven.compiler.target>1.8</maven.compiler.target>\n\t\t\t\t<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\n\t\t\t</properties>\n\t\t</profile>\n  </profiles>\n  ...\n</settings>\n```\n\n### how to use it\n- maven的基本工作单元就是POM，POM中包含着项目的部分描述信息，所有的maven操作都是从POM开始的；\n- maven的指令代表着生命周期中的不同阶段，这些指令仅仅是一个抽象层的定义，真实的操作都有由相应的插件来处理的；\n- maven项目创建,使用原型（模板）创建不同的项目，过程中默认选择模板7（快速版）和默认1.0-snapshot版本；\n```\nmvn archetype:generate  \n  -DarchetypeGroupId=org.apache.maven.archetypes   \n  -DgroupId=com.mycompany.app  \n  -DartifactId=my-app  \n```\n- 创建结果如下：\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <!-- 指定模型的版本，一般不会变，统一版本可以确保稳定性 -->\n  <modelVersion>4.0.0</modelVersion>\n\n  <!--\n    指定坐标和打包方式：\n      groupId：组织和项目唯一标识；\n      artifactId：工程基础名称；\n      version：版本号和类型；\n      packaging：打包方式，默认jar，同时约束了生命周期的最终阶段；\n   -->\n  <groupId>com.mycompany.app</groupId>\n  <artifactId>my-app</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>jar</packaging>\n\n  <!--\n    Maven生成的文档相关：\n      name:项目的显示名称;\n      url:项目站点的位置;\n      description:项目的基本描述;\n   -->\n  <name>my-app</name>\n  <url>http://maven.apache.org</url>\n\n  <！-- 自定义的属性，EL方式引用 -->\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n```\n- 目录结构如下：(使用IDE创建的还会有resource目录)\n```\nmy-app\n|-- pom.xml\n`-- src\n    |-- main\n    |   `-- java\n    |       `-- com\n    |           `-- mycompany\n    |               `-- app\n    |                   `-- App.java\n    `-- test\n        `-- java\n            `-- com\n                `-- mycompany\n                    `-- app\n                        `-- AppTest.java\n```\n- 其他maven指令：   \n  1. `mvn compile`：编译源代码；   \n  2. `mvn test`：编译测试源代码并指定命名约定的单元测试；   \n  3. `mvn test-compile`：仅编译吃源代码；   \n  4. `mvn package`：打包到target目录中；   \n  5. `mvn install`：打包到本地仓库中；   \n  6. `mvn site`：生成项目的web站点；   \n  7. `mvn clean`：清理target的目录；   \n  8. `mvn eclipse:eclipse`：生成eclispe项目；   \n  9. `mvn idea:idea`：生成idea项目；   \n  10. `mvn eclipse:clean `：清楚eclispe配置；   \n  11. `mvn dependency:list`：列出所有依赖；   \n  12. `mvn deploy`：上传到私服；   \n  13. `mvn test -skipping compile -skipping test-compile`：不编译仅测试；   \n  14. `mvn -version/-v`：查看maven版本；   \n  15. `mvn jetty:run`：jetty上运行；   \n  16. `mvn -e`：显示错误信息；   \n  17. `mvn validate`：验证工程是否正确，所有需要的资源是否可用；   \n  18. `mvn verify`：运行任何检查，验证包是否有效且达到质量标准；   \n  19. `mvn dependency:tree`：输出依赖树；   \n  20. `mvn tomcat:run`：在tomcat6上运行；   \n  21. `mvn help:describe -Dplugin=pluginName -Dgoal(或-Dmojo)=goalName`：列出某个插件的goal信息；   \n  22. `mvn tomcat7:run -Dmaven.test.skip=true`：跳过测试；   \n  23. `mvn eclipse:eclipse -DskipTests`：生成导入Eclipse中的项目列表。一般在项目导入之前使用；   \n  24. `mvn install:install-file -DgroupId=com -DartifactId=client -Dversion=0.1.0 -Dpackaging=jar -Dfile=d:\\client-0.1.0.jar`：打包jar到本地库；\n\n### 其他配置\n- 如何发布jar到远程仓库\n```\n<distributionManagement>\n    <repository>\n      <id>mycompany-repository</id>\n      <name>MyCompany Repository</name>\n      <url>scp://repository.mycompany.com/repository/maven2</url>\n    </repository>\n</distributionManagement>\n```\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                      http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  ...\n  <servers>\n    <server>\n      <id>mycompany-repository</id>\n      <username>jvanzyl</username>\n      <!-- Default value is ~/.ssh/id_dsa -->\n      <privateKey>/path/to/identity</privateKey> (default is ~/.ssh/id_dsa)\n      <passphrase>my_key_passphrase</passphrase>\n    </server>\n  </servers>\n  ...\n</settings>\n```\n- 编译插件\n```\n<build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.7.0</version>\n        <configuration>\n          <source>1.8</source>\n          <target>1.8</target>\n        </configuration>\n      </plugin>\n    </plugins>\n</build>\n```\n- 测试插件:\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.18.1</version>\n    <!-- 同样实现跳过生命周期中的测试阶段 -->\n\t<configuration>\n        <skipTests>true</skipTests>\n\t</configuration>\n</plugin>\n```\n- 资源文件插件\n```\n<project>  \n  ...  \n  <build>  \n    ...  \n    <resources>  \n      <!--\n          资源插件默认行为只是将项目主资源文件复制到主代码编译输出目录中，将测试资源文件复制到测试代码编译输出目录中。\n      -->\n      <resource>  \n        <!-- 指定资源文件目录 -->\n        <directory>src/main/resources</directory>  \n        <!--\n          开启资源过滤 ：（默认false）\n            filtering：作用是用环境变量，pom文件里定义的属性和指定文件里的属性替换属性文件的占位符。\n        -->\n        <filtering>true</filtering>\n        <!-- includes之中的也会被过滤 -->  \n        <includes>  \n          <include>**/*.xml</include>\n        </includes>\n      </resource>\n      <resource>\n        <directory>src/main/resources</directory>\n        <filtering>false</filtering>\n        <!-- excludes之外的不会被过滤 -->\n        <excludes>\n          <exclude>**/*.xml</exclude>  \n        </excludes>  \n      </resource>  \n      ...  \n    </resources>  \n    ...  \n  </build>  \n  ...  \n</project>\n```\n- mybatis逆向工程插件\n```\n<plugin>\n\t<groupId>org.mybatis.generator</groupId>\n\t<artifactId>mybatis-generator-maven-plugin</artifactId>\n\t<version>1.3.7</version>\n\t<configuration>\n\t\t<configurationFile>${basedir}/src/main/resources/generatorConfig.xml</configurationFile>\n\t\t<overwrite>true</overwrite>\n\t</configuration>\n</plugin>\n\ngoal：mybatis-generator:generate\n```\n\n### Maven中的属性\n- 内置属性：\n  1. `${basedir}`：项目的根目录(包含pom.xml文件的目录；\n  2. `${version}`：项目版本；\n- POM属性：\n  1. `${project.build.sourceDirectory}`：项目的主源码目录，默认为src/main/java；\n  2. `${project.build.testSourceDirectory}`：项目的测试源码目录，默认为src/test/java；\n  3. `${project.build.directory}`：项目构件输出目录，默认为target/；\n  4. `${project.outputDirectory}`：项目主代码编译输出目录，默认为target/classes/；\n  5. `${project.testOutputDirectory}`：项目测试代码编译输出目录，默认为target/test-classes/；\n  6. `${project.groupId}`：项目的groupId；\n  7. `${project.artifactId}`：项目的artifactId；\n  8. `${project.version}`：项目的version，与${version}等价；\n  9. `${project.build.fianlName}`：项目打包输出文件的名称，默认为${project.artifactId}-${project.version}；\n- 自定义属性：用户可以在POM的<properties>元素下自定义Maven属性；\n- Settings属性：用户使用settings.开头的属性引用settings.xml文件中XML元素的值；\n- Java系统属性：所有Java系统属性都可以使用Maven属性引用；\n- 环境变量属性：所有环境变量都可以使用以env.开头的Maven属性引用；\n\n### 聚合工程\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.mycompany.app</groupId>\n  <artifactId>app</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>pom</packaging>\n\n  <modules>\n    <module>my-app</module>\n    <module>my-webapp</module>\n  </modules>\n</project>\n```\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <parent>\n    <groupId>com.mycompany.app</groupId>\n    <artifactId>app</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n  ...\n```\n\n### 参考文献\n- [Apache官方-快速入门](https://maven.apache.org/guides/getting-started/index.html)\n- [博客园-Maven属性、profile和资源过滤](https://www.cnblogs.com/forerver-elf/p/6257395.html)\n- [博客园-Maven常用命令](https://www.cnblogs.com/wkrbky/p/6352188.html)\n- [CSDN-30个常用的 Maven 命令](https://blog.csdn.net/benhuo931115/article/details/80674760)\n- [CSDN-maven-surefire-plugin简介](https://blog.csdn.net/en_joker/article/details/84067071)\n\n","source":"_posts/Maven入门.md","raw":"---\ntitle: Maven入门\ndate: 2019-08-28 16:40:39\ntags: maven\ncategories: 学习笔记\n---\n### what is\n- maven 是 apache软件基金会的一个产品；\n- maven 是一个将模型应用于工程的管理系统；\n- maven 是 一个Java项目的构建和管理工具，包括项目生命周期的管理和项目依赖的管理；\n\n### why use it\n- 简化项目构建，缩短了开发周期；\n- 将代码与架包分离，仅仅在POM中提供依赖的引用即可；\n- 统一的目录结构和约定，有利于开发者理解开发原则；\n\n### how to config it\n- 配置本地仓库路径\n```\n<settings>\n  ...\n  <localRepository>D:\\Repository\\mvnRepo</localRepository>\n  ...\n</settings>\n```\n- 配置远程镜像仓库\n```\n<settings>\n  ...\n  <mirrors>\n    <mirror>\n\t\t<id>alimaven</id>\n\t\t<name>aliyun maven</name>\n\t\t<url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n\t\t<mirrorOf>central</mirrorOf>\n    </mirror>\n  </mirrors>\n...\n</settings>\n```\n- 配置JDK版本（也可以使用编译插件）\n```\n<settings>\n  ...\n  <profiles>\n\t\t<!--定义工程的JDK版本-->\n\t\t<profile>\n\t\t\t<id>jdk-1.8</id>\n\t\t\t<activation>\n\t\t\t\t<activeteByDefault>true</activeteByDefault>\n\t\t\t\t<jdk>1.8</jdk>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<maven.compiler.source>1.8</maven.compiler.source>\n\t\t\t\t<maven.compiler.target>1.8</maven.compiler.target>\n\t\t\t\t<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\n\t\t\t</properties>\n\t\t</profile>\n  </profiles>\n  ...\n</settings>\n```\n\n### how to use it\n- maven的基本工作单元就是POM，POM中包含着项目的部分描述信息，所有的maven操作都是从POM开始的；\n- maven的指令代表着生命周期中的不同阶段，这些指令仅仅是一个抽象层的定义，真实的操作都有由相应的插件来处理的；\n- maven项目创建,使用原型（模板）创建不同的项目，过程中默认选择模板7（快速版）和默认1.0-snapshot版本；\n```\nmvn archetype:generate  \n  -DarchetypeGroupId=org.apache.maven.archetypes   \n  -DgroupId=com.mycompany.app  \n  -DartifactId=my-app  \n```\n- 创建结果如下：\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <!-- 指定模型的版本，一般不会变，统一版本可以确保稳定性 -->\n  <modelVersion>4.0.0</modelVersion>\n\n  <!--\n    指定坐标和打包方式：\n      groupId：组织和项目唯一标识；\n      artifactId：工程基础名称；\n      version：版本号和类型；\n      packaging：打包方式，默认jar，同时约束了生命周期的最终阶段；\n   -->\n  <groupId>com.mycompany.app</groupId>\n  <artifactId>my-app</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>jar</packaging>\n\n  <!--\n    Maven生成的文档相关：\n      name:项目的显示名称;\n      url:项目站点的位置;\n      description:项目的基本描述;\n   -->\n  <name>my-app</name>\n  <url>http://maven.apache.org</url>\n\n  <！-- 自定义的属性，EL方式引用 -->\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n```\n- 目录结构如下：(使用IDE创建的还会有resource目录)\n```\nmy-app\n|-- pom.xml\n`-- src\n    |-- main\n    |   `-- java\n    |       `-- com\n    |           `-- mycompany\n    |               `-- app\n    |                   `-- App.java\n    `-- test\n        `-- java\n            `-- com\n                `-- mycompany\n                    `-- app\n                        `-- AppTest.java\n```\n- 其他maven指令：   \n  1. `mvn compile`：编译源代码；   \n  2. `mvn test`：编译测试源代码并指定命名约定的单元测试；   \n  3. `mvn test-compile`：仅编译吃源代码；   \n  4. `mvn package`：打包到target目录中；   \n  5. `mvn install`：打包到本地仓库中；   \n  6. `mvn site`：生成项目的web站点；   \n  7. `mvn clean`：清理target的目录；   \n  8. `mvn eclipse:eclipse`：生成eclispe项目；   \n  9. `mvn idea:idea`：生成idea项目；   \n  10. `mvn eclipse:clean `：清楚eclispe配置；   \n  11. `mvn dependency:list`：列出所有依赖；   \n  12. `mvn deploy`：上传到私服；   \n  13. `mvn test -skipping compile -skipping test-compile`：不编译仅测试；   \n  14. `mvn -version/-v`：查看maven版本；   \n  15. `mvn jetty:run`：jetty上运行；   \n  16. `mvn -e`：显示错误信息；   \n  17. `mvn validate`：验证工程是否正确，所有需要的资源是否可用；   \n  18. `mvn verify`：运行任何检查，验证包是否有效且达到质量标准；   \n  19. `mvn dependency:tree`：输出依赖树；   \n  20. `mvn tomcat:run`：在tomcat6上运行；   \n  21. `mvn help:describe -Dplugin=pluginName -Dgoal(或-Dmojo)=goalName`：列出某个插件的goal信息；   \n  22. `mvn tomcat7:run -Dmaven.test.skip=true`：跳过测试；   \n  23. `mvn eclipse:eclipse -DskipTests`：生成导入Eclipse中的项目列表。一般在项目导入之前使用；   \n  24. `mvn install:install-file -DgroupId=com -DartifactId=client -Dversion=0.1.0 -Dpackaging=jar -Dfile=d:\\client-0.1.0.jar`：打包jar到本地库；\n\n### 其他配置\n- 如何发布jar到远程仓库\n```\n<distributionManagement>\n    <repository>\n      <id>mycompany-repository</id>\n      <name>MyCompany Repository</name>\n      <url>scp://repository.mycompany.com/repository/maven2</url>\n    </repository>\n</distributionManagement>\n```\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                      http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  ...\n  <servers>\n    <server>\n      <id>mycompany-repository</id>\n      <username>jvanzyl</username>\n      <!-- Default value is ~/.ssh/id_dsa -->\n      <privateKey>/path/to/identity</privateKey> (default is ~/.ssh/id_dsa)\n      <passphrase>my_key_passphrase</passphrase>\n    </server>\n  </servers>\n  ...\n</settings>\n```\n- 编译插件\n```\n<build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.7.0</version>\n        <configuration>\n          <source>1.8</source>\n          <target>1.8</target>\n        </configuration>\n      </plugin>\n    </plugins>\n</build>\n```\n- 测试插件:\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.18.1</version>\n    <!-- 同样实现跳过生命周期中的测试阶段 -->\n\t<configuration>\n        <skipTests>true</skipTests>\n\t</configuration>\n</plugin>\n```\n- 资源文件插件\n```\n<project>  \n  ...  \n  <build>  \n    ...  \n    <resources>  \n      <!--\n          资源插件默认行为只是将项目主资源文件复制到主代码编译输出目录中，将测试资源文件复制到测试代码编译输出目录中。\n      -->\n      <resource>  \n        <!-- 指定资源文件目录 -->\n        <directory>src/main/resources</directory>  \n        <!--\n          开启资源过滤 ：（默认false）\n            filtering：作用是用环境变量，pom文件里定义的属性和指定文件里的属性替换属性文件的占位符。\n        -->\n        <filtering>true</filtering>\n        <!-- includes之中的也会被过滤 -->  \n        <includes>  \n          <include>**/*.xml</include>\n        </includes>\n      </resource>\n      <resource>\n        <directory>src/main/resources</directory>\n        <filtering>false</filtering>\n        <!-- excludes之外的不会被过滤 -->\n        <excludes>\n          <exclude>**/*.xml</exclude>  \n        </excludes>  \n      </resource>  \n      ...  \n    </resources>  \n    ...  \n  </build>  \n  ...  \n</project>\n```\n- mybatis逆向工程插件\n```\n<plugin>\n\t<groupId>org.mybatis.generator</groupId>\n\t<artifactId>mybatis-generator-maven-plugin</artifactId>\n\t<version>1.3.7</version>\n\t<configuration>\n\t\t<configurationFile>${basedir}/src/main/resources/generatorConfig.xml</configurationFile>\n\t\t<overwrite>true</overwrite>\n\t</configuration>\n</plugin>\n\ngoal：mybatis-generator:generate\n```\n\n### Maven中的属性\n- 内置属性：\n  1. `${basedir}`：项目的根目录(包含pom.xml文件的目录；\n  2. `${version}`：项目版本；\n- POM属性：\n  1. `${project.build.sourceDirectory}`：项目的主源码目录，默认为src/main/java；\n  2. `${project.build.testSourceDirectory}`：项目的测试源码目录，默认为src/test/java；\n  3. `${project.build.directory}`：项目构件输出目录，默认为target/；\n  4. `${project.outputDirectory}`：项目主代码编译输出目录，默认为target/classes/；\n  5. `${project.testOutputDirectory}`：项目测试代码编译输出目录，默认为target/test-classes/；\n  6. `${project.groupId}`：项目的groupId；\n  7. `${project.artifactId}`：项目的artifactId；\n  8. `${project.version}`：项目的version，与${version}等价；\n  9. `${project.build.fianlName}`：项目打包输出文件的名称，默认为${project.artifactId}-${project.version}；\n- 自定义属性：用户可以在POM的<properties>元素下自定义Maven属性；\n- Settings属性：用户使用settings.开头的属性引用settings.xml文件中XML元素的值；\n- Java系统属性：所有Java系统属性都可以使用Maven属性引用；\n- 环境变量属性：所有环境变量都可以使用以env.开头的Maven属性引用；\n\n### 聚合工程\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.mycompany.app</groupId>\n  <artifactId>app</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>pom</packaging>\n\n  <modules>\n    <module>my-app</module>\n    <module>my-webapp</module>\n  </modules>\n</project>\n```\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <parent>\n    <groupId>com.mycompany.app</groupId>\n    <artifactId>app</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n  ...\n```\n\n### 参考文献\n- [Apache官方-快速入门](https://maven.apache.org/guides/getting-started/index.html)\n- [博客园-Maven属性、profile和资源过滤](https://www.cnblogs.com/forerver-elf/p/6257395.html)\n- [博客园-Maven常用命令](https://www.cnblogs.com/wkrbky/p/6352188.html)\n- [CSDN-30个常用的 Maven 命令](https://blog.csdn.net/benhuo931115/article/details/80674760)\n- [CSDN-maven-surefire-plugin简介](https://blog.csdn.net/en_joker/article/details/84067071)\n\n","slug":"Maven入门","published":1,"updated":"2019-08-28T08:53:23.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8psg0023agtnaggdm5kj","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>maven 是 apache软件基金会的一个产品；</li>\n<li>maven 是一个将模型应用于工程的管理系统；</li>\n<li>maven 是 一个Java项目的构建和管理工具，包括项目生命周期的管理和项目依赖的管理；</li>\n</ul>\n<h3 id=\"why-use-it\"><a href=\"#why-use-it\" class=\"headerlink\" title=\"why use it\"></a>why use it</h3><ul>\n<li>简化项目构建，缩短了开发周期；</li>\n<li>将代码与架包分离，仅仅在POM中提供依赖的引用即可；</li>\n<li>统一的目录结构和约定，有利于开发者理解开发原则；</li>\n</ul>\n<h3 id=\"how-to-config-it\"><a href=\"#how-to-config-it\" class=\"headerlink\" title=\"how to config it\"></a>how to config it</h3><ul>\n<li><p>配置本地仓库路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;localRepository&gt;D:\\Repository\\mvnRepo&lt;/localRepository&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置远程镜像仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;mirrors&gt;</span><br><span class=\"line\">    &lt;mirror&gt;</span><br><span class=\"line\">\t\t&lt;id&gt;alimaven&lt;/id&gt;</span><br><span class=\"line\">\t\t&lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class=\"line\">\t\t&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class=\"line\">\t\t&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">    &lt;/mirror&gt;</span><br><span class=\"line\">  &lt;/mirrors&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置JDK版本（也可以使用编译插件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;profiles&gt;</span><br><span class=\"line\">\t\t&lt;!--定义工程的JDK版本--&gt;</span><br><span class=\"line\">\t\t&lt;profile&gt;</span><br><span class=\"line\">\t\t\t&lt;id&gt;jdk-1.8&lt;/id&gt;</span><br><span class=\"line\">\t\t\t&lt;activation&gt;</span><br><span class=\"line\">\t\t\t\t&lt;activeteByDefault&gt;true&lt;/activeteByDefault&gt;</span><br><span class=\"line\">\t\t\t\t&lt;jdk&gt;1.8&lt;/jdk&gt;</span><br><span class=\"line\">\t\t\t&lt;/activation&gt;</span><br><span class=\"line\">\t\t\t&lt;properties&gt;</span><br><span class=\"line\">\t\t\t\t&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class=\"line\">\t\t\t\t&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class=\"line\">\t\t\t\t&lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span><br><span class=\"line\">\t\t\t&lt;/properties&gt;</span><br><span class=\"line\">\t\t&lt;/profile&gt;</span><br><span class=\"line\">  &lt;/profiles&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"how-to-use-it\"><a href=\"#how-to-use-it\" class=\"headerlink\" title=\"how to use it\"></a>how to use it</h3><ul>\n<li><p>maven的基本工作单元就是POM，POM中包含着项目的部分描述信息，所有的maven操作都是从POM开始的；</p>\n</li>\n<li><p>maven的指令代表着生命周期中的不同阶段，这些指令仅仅是一个抽象层的定义，真实的操作都有由相应的插件来处理的；</p>\n</li>\n<li><p>maven项目创建,使用原型（模板）创建不同的项目，过程中默认选择模板7（快速版）和默认1.0-snapshot版本；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn archetype:generate  </span><br><span class=\"line\">  -DarchetypeGroupId=org.apache.maven.archetypes   </span><br><span class=\"line\">  -DgroupId=com.mycompany.app  </span><br><span class=\"line\">  -DartifactId=my-app</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 指定模型的版本，一般不会变，统一版本可以确保稳定性 --&gt;</span><br><span class=\"line\">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!--</span><br><span class=\"line\">    指定坐标和打包方式：</span><br><span class=\"line\">      groupId：组织和项目唯一标识；</span><br><span class=\"line\">      artifactId：工程基础名称；</span><br><span class=\"line\">      version：版本号和类型；</span><br><span class=\"line\">      packaging：打包方式，默认jar，同时约束了生命周期的最终阶段；</span><br><span class=\"line\">   --&gt;</span><br><span class=\"line\">  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;my-app&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">  &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!--</span><br><span class=\"line\">    Maven生成的文档相关：</span><br><span class=\"line\">      name:项目的显示名称;</span><br><span class=\"line\">      url:项目站点的位置;</span><br><span class=\"line\">      description:项目的基本描述;</span><br><span class=\"line\">   --&gt;</span><br><span class=\"line\">  &lt;name&gt;my-app&lt;/name&gt;</span><br><span class=\"line\">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;！-- 自定义的属性，EL方式引用 --&gt;</span><br><span class=\"line\">  &lt;properties&gt;</span><br><span class=\"line\">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">  &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">  &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>目录结构如下：(使用IDE创建的还会有resource目录)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-app</span><br><span class=\"line\">|-- pom.xml</span><br><span class=\"line\">`-- src</span><br><span class=\"line\">    |-- main</span><br><span class=\"line\">    |   `-- java</span><br><span class=\"line\">    |       `-- com</span><br><span class=\"line\">    |           `-- mycompany</span><br><span class=\"line\">    |               `-- app</span><br><span class=\"line\">    |                   `-- App.java</span><br><span class=\"line\">    `-- test</span><br><span class=\"line\">        `-- java</span><br><span class=\"line\">            `-- com</span><br><span class=\"line\">                `-- mycompany</span><br><span class=\"line\">                    `-- app</span><br><span class=\"line\">                        `-- AppTest.java</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他maven指令：   </p>\n<ol>\n<li><code>mvn compile</code>：编译源代码；   </li>\n<li><code>mvn test</code>：编译测试源代码并指定命名约定的单元测试；   </li>\n<li><code>mvn test-compile</code>：仅编译吃源代码；   </li>\n<li><code>mvn package</code>：打包到target目录中；   </li>\n<li><code>mvn install</code>：打包到本地仓库中；   </li>\n<li><code>mvn site</code>：生成项目的web站点；   </li>\n<li><code>mvn clean</code>：清理target的目录；   </li>\n<li><code>mvn eclipse:eclipse</code>：生成eclispe项目；   </li>\n<li><code>mvn idea:idea</code>：生成idea项目；   </li>\n<li><code>mvn eclipse:clean</code>：清楚eclispe配置；   </li>\n<li><code>mvn dependency:list</code>：列出所有依赖；   </li>\n<li><code>mvn deploy</code>：上传到私服；   </li>\n<li><code>mvn test -skipping compile -skipping test-compile</code>：不编译仅测试；   </li>\n<li><code>mvn -version/-v</code>：查看maven版本；   </li>\n<li><code>mvn jetty:run</code>：jetty上运行；   </li>\n<li><code>mvn -e</code>：显示错误信息；   </li>\n<li><code>mvn validate</code>：验证工程是否正确，所有需要的资源是否可用；   </li>\n<li><code>mvn verify</code>：运行任何检查，验证包是否有效且达到质量标准；   </li>\n<li><code>mvn dependency:tree</code>：输出依赖树；   </li>\n<li><code>mvn tomcat:run</code>：在tomcat6上运行；   </li>\n<li><code>mvn help:describe -Dplugin=pluginName -Dgoal(或-Dmojo)=goalName</code>：列出某个插件的goal信息；   </li>\n<li><code>mvn tomcat7:run -Dmaven.test.skip=true</code>：跳过测试；   </li>\n<li><code>mvn eclipse:eclipse -DskipTests</code>：生成导入Eclipse中的项目列表。一般在项目导入之前使用；   </li>\n<li><code>mvn install:install-file -DgroupId=com -DartifactId=client -Dversion=0.1.0 -Dpackaging=jar -Dfile=d:\\client-0.1.0.jar</code>：打包jar到本地库；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h3><ul>\n<li>如何发布jar到远程仓库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;distributionManagement&gt;</span><br><span class=\"line\">    &lt;repository&gt;</span><br><span class=\"line\">      &lt;id&gt;mycompany-repository&lt;/id&gt;</span><br><span class=\"line\">      &lt;name&gt;MyCompany Repository&lt;/name&gt;</span><br><span class=\"line\">      &lt;url&gt;scp://repository.mycompany.com/repository/maven2&lt;/url&gt;</span><br><span class=\"line\">    &lt;/repository&gt;</span><br><span class=\"line\">&lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span><br><span class=\"line\">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">  xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0</span><br><span class=\"line\">                      http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;servers&gt;</span><br><span class=\"line\">    &lt;server&gt;</span><br><span class=\"line\">      &lt;id&gt;mycompany-repository&lt;/id&gt;</span><br><span class=\"line\">      &lt;username&gt;jvanzyl&lt;/username&gt;</span><br><span class=\"line\">      &lt;!-- Default value is ~/.ssh/id_dsa --&gt;</span><br><span class=\"line\">      &lt;privateKey&gt;/path/to/identity&lt;/privateKey&gt; (default is ~/.ssh/id_dsa)</span><br><span class=\"line\">      &lt;passphrase&gt;my_key_passphrase&lt;/passphrase&gt;</span><br><span class=\"line\">    &lt;/server&gt;</span><br><span class=\"line\">  &lt;/servers&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>编译插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;3.7.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;configuration&gt;</span><br><span class=\"line\">          &lt;source&gt;1.8&lt;/source&gt;</span><br><span class=\"line\">          &lt;target&gt;1.8&lt;/target&gt;</span><br><span class=\"line\">        &lt;/configuration&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">&lt;/build&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试插件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.18.1&lt;/version&gt;</span><br><span class=\"line\">    &lt;!-- 同样实现跳过生命周期中的测试阶段 --&gt;</span><br><span class=\"line\">\t&lt;configuration&gt;</span><br><span class=\"line\">        &lt;skipTests&gt;true&lt;/skipTests&gt;</span><br><span class=\"line\">\t&lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>资源文件插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;  </span><br><span class=\"line\">  ...  </span><br><span class=\"line\">  &lt;build&gt;  </span><br><span class=\"line\">    ...  </span><br><span class=\"line\">    &lt;resources&gt;  </span><br><span class=\"line\">      &lt;!--</span><br><span class=\"line\">          资源插件默认行为只是将项目主资源文件复制到主代码编译输出目录中，将测试资源文件复制到测试代码编译输出目录中。</span><br><span class=\"line\">      --&gt;</span><br><span class=\"line\">      &lt;resource&gt;  </span><br><span class=\"line\">        &lt;!-- 指定资源文件目录 --&gt;</span><br><span class=\"line\">        &lt;directory&gt;src/main/resources&lt;/directory&gt;  </span><br><span class=\"line\">        &lt;!--</span><br><span class=\"line\">          开启资源过滤 ：（默认false）</span><br><span class=\"line\">            filtering：作用是用环境变量，pom文件里定义的属性和指定文件里的属性替换属性文件的占位符。</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\">        &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class=\"line\">        &lt;!-- includes之中的也会被过滤 --&gt;  </span><br><span class=\"line\">        &lt;includes&gt;  </span><br><span class=\"line\">          &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class=\"line\">        &lt;/includes&gt;</span><br><span class=\"line\">      &lt;/resource&gt;</span><br><span class=\"line\">      &lt;resource&gt;</span><br><span class=\"line\">        &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class=\"line\">        &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class=\"line\">        &lt;!-- excludes之外的不会被过滤 --&gt;</span><br><span class=\"line\">        &lt;excludes&gt;</span><br><span class=\"line\">          &lt;exclude&gt;**/*.xml&lt;/exclude&gt;  </span><br><span class=\"line\">        &lt;/excludes&gt;  </span><br><span class=\"line\">      &lt;/resource&gt;  </span><br><span class=\"line\">      ...  </span><br><span class=\"line\">    &lt;/resources&gt;  </span><br><span class=\"line\">    ...  </span><br><span class=\"line\">  &lt;/build&gt;  </span><br><span class=\"line\">  ...  </span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mybatis逆向工程插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.3.7&lt;/version&gt;</span><br><span class=\"line\">\t&lt;configuration&gt;</span><br><span class=\"line\">\t\t&lt;configurationFile&gt;$&#123;basedir&#125;/src/main/resources/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class=\"line\">\t\t&lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class=\"line\">\t&lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">goal：mybatis-generator:generate</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Maven中的属性\"><a href=\"#Maven中的属性\" class=\"headerlink\" title=\"Maven中的属性\"></a>Maven中的属性</h3><ul>\n<li>内置属性：<ol>\n<li><code>${basedir}</code>：项目的根目录(包含pom.xml文件的目录；</li>\n<li><code>${version}</code>：项目版本；</li>\n</ol>\n</li>\n<li>POM属性：<ol>\n<li><code>${project.build.sourceDirectory}</code>：项目的主源码目录，默认为src/main/java；</li>\n<li><code>${project.build.testSourceDirectory}</code>：项目的测试源码目录，默认为src/test/java；</li>\n<li><code>${project.build.directory}</code>：项目构件输出目录，默认为target/；</li>\n<li><code>${project.outputDirectory}</code>：项目主代码编译输出目录，默认为target/classes/；</li>\n<li><code>${project.testOutputDirectory}</code>：项目测试代码编译输出目录，默认为target/test-classes/；</li>\n<li><code>${project.groupId}</code>：项目的groupId；</li>\n<li><code>${project.artifactId}</code>：项目的artifactId；</li>\n<li><code>${project.version}</code>：项目的version，与${version}等价；</li>\n<li><code>${project.build.fianlName}</code>：项目打包输出文件的名称，默认为${project.artifactId}-${project.version}；</li>\n</ol>\n</li>\n<li>自定义属性：用户可以在POM的<properties>元素下自定义Maven属性；</properties></li>\n<li>Settings属性：用户使用settings.开头的属性引用settings.xml文件中XML元素的值；</li>\n<li>Java系统属性：所有Java系统属性都可以使用Maven属性引用；</li>\n<li>环境变量属性：所有环境变量都可以使用以env.开头的Maven属性引用；</li>\n</ul>\n<h3 id=\"聚合工程\"><a href=\"#聚合工程\" class=\"headerlink\" title=\"聚合工程\"></a>聚合工程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0</span><br><span class=\"line\">                      http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;app&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;modules&gt;</span><br><span class=\"line\">    &lt;module&gt;my-app&lt;/module&gt;</span><br><span class=\"line\">    &lt;module&gt;my-webapp&lt;/module&gt;</span><br><span class=\"line\">  &lt;/modules&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0</span><br><span class=\"line\">                      http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">  &lt;parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;app&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">  &lt;/parent&gt;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ul>\n<li><a href=\"https://maven.apache.org/guides/getting-started/index.html\" target=\"_blank\" rel=\"noopener\">Apache官方-快速入门</a></li>\n<li><a href=\"https://www.cnblogs.com/forerver-elf/p/6257395.html\" target=\"_blank\" rel=\"noopener\">博客园-Maven属性、profile和资源过滤</a></li>\n<li><a href=\"https://www.cnblogs.com/wkrbky/p/6352188.html\" target=\"_blank\" rel=\"noopener\">博客园-Maven常用命令</a></li>\n<li><a href=\"https://blog.csdn.net/benhuo931115/article/details/80674760\" target=\"_blank\" rel=\"noopener\">CSDN-30个常用的 Maven 命令</a></li>\n<li><a href=\"https://blog.csdn.net/en_joker/article/details/84067071\" target=\"_blank\" rel=\"noopener\">CSDN-maven-surefire-plugin简介</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"what-is\"><a href=\"#what-is\" class=\"headerlink\" title=\"what is\"></a>what is</h3><ul>\n<li>maven 是 apache软件基金会的一个产品；</li>\n<li>maven 是一个将模型应用于工程的管理系统；</li>\n<li>maven 是 一个Java项目的构建和管理工具，包括项目生命周期的管理和项目依赖的管理；</li>\n</ul>\n<h3 id=\"why-use-it\"><a href=\"#why-use-it\" class=\"headerlink\" title=\"why use it\"></a>why use it</h3><ul>\n<li>简化项目构建，缩短了开发周期；</li>\n<li>将代码与架包分离，仅仅在POM中提供依赖的引用即可；</li>\n<li>统一的目录结构和约定，有利于开发者理解开发原则；</li>\n</ul>\n<h3 id=\"how-to-config-it\"><a href=\"#how-to-config-it\" class=\"headerlink\" title=\"how to config it\"></a>how to config it</h3><ul>\n<li><p>配置本地仓库路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;localRepository&gt;D:\\Repository\\mvnRepo&lt;/localRepository&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置远程镜像仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;mirrors&gt;</span><br><span class=\"line\">    &lt;mirror&gt;</span><br><span class=\"line\">\t\t&lt;id&gt;alimaven&lt;/id&gt;</span><br><span class=\"line\">\t\t&lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class=\"line\">\t\t&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class=\"line\">\t\t&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">    &lt;/mirror&gt;</span><br><span class=\"line\">  &lt;/mirrors&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置JDK版本（也可以使用编译插件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;profiles&gt;</span><br><span class=\"line\">\t\t&lt;!--定义工程的JDK版本--&gt;</span><br><span class=\"line\">\t\t&lt;profile&gt;</span><br><span class=\"line\">\t\t\t&lt;id&gt;jdk-1.8&lt;/id&gt;</span><br><span class=\"line\">\t\t\t&lt;activation&gt;</span><br><span class=\"line\">\t\t\t\t&lt;activeteByDefault&gt;true&lt;/activeteByDefault&gt;</span><br><span class=\"line\">\t\t\t\t&lt;jdk&gt;1.8&lt;/jdk&gt;</span><br><span class=\"line\">\t\t\t&lt;/activation&gt;</span><br><span class=\"line\">\t\t\t&lt;properties&gt;</span><br><span class=\"line\">\t\t\t\t&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class=\"line\">\t\t\t\t&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class=\"line\">\t\t\t\t&lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span><br><span class=\"line\">\t\t\t&lt;/properties&gt;</span><br><span class=\"line\">\t\t&lt;/profile&gt;</span><br><span class=\"line\">  &lt;/profiles&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"how-to-use-it\"><a href=\"#how-to-use-it\" class=\"headerlink\" title=\"how to use it\"></a>how to use it</h3><ul>\n<li><p>maven的基本工作单元就是POM，POM中包含着项目的部分描述信息，所有的maven操作都是从POM开始的；</p>\n</li>\n<li><p>maven的指令代表着生命周期中的不同阶段，这些指令仅仅是一个抽象层的定义，真实的操作都有由相应的插件来处理的；</p>\n</li>\n<li><p>maven项目创建,使用原型（模板）创建不同的项目，过程中默认选择模板7（快速版）和默认1.0-snapshot版本；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn archetype:generate  </span><br><span class=\"line\">  -DarchetypeGroupId=org.apache.maven.archetypes   </span><br><span class=\"line\">  -DgroupId=com.mycompany.app  </span><br><span class=\"line\">  -DartifactId=my-app</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 指定模型的版本，一般不会变，统一版本可以确保稳定性 --&gt;</span><br><span class=\"line\">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!--</span><br><span class=\"line\">    指定坐标和打包方式：</span><br><span class=\"line\">      groupId：组织和项目唯一标识；</span><br><span class=\"line\">      artifactId：工程基础名称；</span><br><span class=\"line\">      version：版本号和类型；</span><br><span class=\"line\">      packaging：打包方式，默认jar，同时约束了生命周期的最终阶段；</span><br><span class=\"line\">   --&gt;</span><br><span class=\"line\">  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;my-app&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">  &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!--</span><br><span class=\"line\">    Maven生成的文档相关：</span><br><span class=\"line\">      name:项目的显示名称;</span><br><span class=\"line\">      url:项目站点的位置;</span><br><span class=\"line\">      description:项目的基本描述;</span><br><span class=\"line\">   --&gt;</span><br><span class=\"line\">  &lt;name&gt;my-app&lt;/name&gt;</span><br><span class=\"line\">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;！-- 自定义的属性，EL方式引用 --&gt;</span><br><span class=\"line\">  &lt;properties&gt;</span><br><span class=\"line\">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">  &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">  &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>目录结构如下：(使用IDE创建的还会有resource目录)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-app</span><br><span class=\"line\">|-- pom.xml</span><br><span class=\"line\">`-- src</span><br><span class=\"line\">    |-- main</span><br><span class=\"line\">    |   `-- java</span><br><span class=\"line\">    |       `-- com</span><br><span class=\"line\">    |           `-- mycompany</span><br><span class=\"line\">    |               `-- app</span><br><span class=\"line\">    |                   `-- App.java</span><br><span class=\"line\">    `-- test</span><br><span class=\"line\">        `-- java</span><br><span class=\"line\">            `-- com</span><br><span class=\"line\">                `-- mycompany</span><br><span class=\"line\">                    `-- app</span><br><span class=\"line\">                        `-- AppTest.java</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他maven指令：   </p>\n<ol>\n<li><code>mvn compile</code>：编译源代码；   </li>\n<li><code>mvn test</code>：编译测试源代码并指定命名约定的单元测试；   </li>\n<li><code>mvn test-compile</code>：仅编译吃源代码；   </li>\n<li><code>mvn package</code>：打包到target目录中；   </li>\n<li><code>mvn install</code>：打包到本地仓库中；   </li>\n<li><code>mvn site</code>：生成项目的web站点；   </li>\n<li><code>mvn clean</code>：清理target的目录；   </li>\n<li><code>mvn eclipse:eclipse</code>：生成eclispe项目；   </li>\n<li><code>mvn idea:idea</code>：生成idea项目；   </li>\n<li><code>mvn eclipse:clean</code>：清楚eclispe配置；   </li>\n<li><code>mvn dependency:list</code>：列出所有依赖；   </li>\n<li><code>mvn deploy</code>：上传到私服；   </li>\n<li><code>mvn test -skipping compile -skipping test-compile</code>：不编译仅测试；   </li>\n<li><code>mvn -version/-v</code>：查看maven版本；   </li>\n<li><code>mvn jetty:run</code>：jetty上运行；   </li>\n<li><code>mvn -e</code>：显示错误信息；   </li>\n<li><code>mvn validate</code>：验证工程是否正确，所有需要的资源是否可用；   </li>\n<li><code>mvn verify</code>：运行任何检查，验证包是否有效且达到质量标准；   </li>\n<li><code>mvn dependency:tree</code>：输出依赖树；   </li>\n<li><code>mvn tomcat:run</code>：在tomcat6上运行；   </li>\n<li><code>mvn help:describe -Dplugin=pluginName -Dgoal(或-Dmojo)=goalName</code>：列出某个插件的goal信息；   </li>\n<li><code>mvn tomcat7:run -Dmaven.test.skip=true</code>：跳过测试；   </li>\n<li><code>mvn eclipse:eclipse -DskipTests</code>：生成导入Eclipse中的项目列表。一般在项目导入之前使用；   </li>\n<li><code>mvn install:install-file -DgroupId=com -DartifactId=client -Dversion=0.1.0 -Dpackaging=jar -Dfile=d:\\client-0.1.0.jar</code>：打包jar到本地库；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h3><ul>\n<li>如何发布jar到远程仓库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;distributionManagement&gt;</span><br><span class=\"line\">    &lt;repository&gt;</span><br><span class=\"line\">      &lt;id&gt;mycompany-repository&lt;/id&gt;</span><br><span class=\"line\">      &lt;name&gt;MyCompany Repository&lt;/name&gt;</span><br><span class=\"line\">      &lt;url&gt;scp://repository.mycompany.com/repository/maven2&lt;/url&gt;</span><br><span class=\"line\">    &lt;/repository&gt;</span><br><span class=\"line\">&lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span><br><span class=\"line\">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">  xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0</span><br><span class=\"line\">                      http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;servers&gt;</span><br><span class=\"line\">    &lt;server&gt;</span><br><span class=\"line\">      &lt;id&gt;mycompany-repository&lt;/id&gt;</span><br><span class=\"line\">      &lt;username&gt;jvanzyl&lt;/username&gt;</span><br><span class=\"line\">      &lt;!-- Default value is ~/.ssh/id_dsa --&gt;</span><br><span class=\"line\">      &lt;privateKey&gt;/path/to/identity&lt;/privateKey&gt; (default is ~/.ssh/id_dsa)</span><br><span class=\"line\">      &lt;passphrase&gt;my_key_passphrase&lt;/passphrase&gt;</span><br><span class=\"line\">    &lt;/server&gt;</span><br><span class=\"line\">  &lt;/servers&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>编译插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;3.7.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;configuration&gt;</span><br><span class=\"line\">          &lt;source&gt;1.8&lt;/source&gt;</span><br><span class=\"line\">          &lt;target&gt;1.8&lt;/target&gt;</span><br><span class=\"line\">        &lt;/configuration&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">&lt;/build&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试插件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.18.1&lt;/version&gt;</span><br><span class=\"line\">    &lt;!-- 同样实现跳过生命周期中的测试阶段 --&gt;</span><br><span class=\"line\">\t&lt;configuration&gt;</span><br><span class=\"line\">        &lt;skipTests&gt;true&lt;/skipTests&gt;</span><br><span class=\"line\">\t&lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>资源文件插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;  </span><br><span class=\"line\">  ...  </span><br><span class=\"line\">  &lt;build&gt;  </span><br><span class=\"line\">    ...  </span><br><span class=\"line\">    &lt;resources&gt;  </span><br><span class=\"line\">      &lt;!--</span><br><span class=\"line\">          资源插件默认行为只是将项目主资源文件复制到主代码编译输出目录中，将测试资源文件复制到测试代码编译输出目录中。</span><br><span class=\"line\">      --&gt;</span><br><span class=\"line\">      &lt;resource&gt;  </span><br><span class=\"line\">        &lt;!-- 指定资源文件目录 --&gt;</span><br><span class=\"line\">        &lt;directory&gt;src/main/resources&lt;/directory&gt;  </span><br><span class=\"line\">        &lt;!--</span><br><span class=\"line\">          开启资源过滤 ：（默认false）</span><br><span class=\"line\">            filtering：作用是用环境变量，pom文件里定义的属性和指定文件里的属性替换属性文件的占位符。</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\">        &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class=\"line\">        &lt;!-- includes之中的也会被过滤 --&gt;  </span><br><span class=\"line\">        &lt;includes&gt;  </span><br><span class=\"line\">          &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class=\"line\">        &lt;/includes&gt;</span><br><span class=\"line\">      &lt;/resource&gt;</span><br><span class=\"line\">      &lt;resource&gt;</span><br><span class=\"line\">        &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class=\"line\">        &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class=\"line\">        &lt;!-- excludes之外的不会被过滤 --&gt;</span><br><span class=\"line\">        &lt;excludes&gt;</span><br><span class=\"line\">          &lt;exclude&gt;**/*.xml&lt;/exclude&gt;  </span><br><span class=\"line\">        &lt;/excludes&gt;  </span><br><span class=\"line\">      &lt;/resource&gt;  </span><br><span class=\"line\">      ...  </span><br><span class=\"line\">    &lt;/resources&gt;  </span><br><span class=\"line\">    ...  </span><br><span class=\"line\">  &lt;/build&gt;  </span><br><span class=\"line\">  ...  </span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mybatis逆向工程插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.3.7&lt;/version&gt;</span><br><span class=\"line\">\t&lt;configuration&gt;</span><br><span class=\"line\">\t\t&lt;configurationFile&gt;$&#123;basedir&#125;/src/main/resources/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class=\"line\">\t\t&lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class=\"line\">\t&lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">goal：mybatis-generator:generate</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Maven中的属性\"><a href=\"#Maven中的属性\" class=\"headerlink\" title=\"Maven中的属性\"></a>Maven中的属性</h3><ul>\n<li>内置属性：<ol>\n<li><code>${basedir}</code>：项目的根目录(包含pom.xml文件的目录；</li>\n<li><code>${version}</code>：项目版本；</li>\n</ol>\n</li>\n<li>POM属性：<ol>\n<li><code>${project.build.sourceDirectory}</code>：项目的主源码目录，默认为src/main/java；</li>\n<li><code>${project.build.testSourceDirectory}</code>：项目的测试源码目录，默认为src/test/java；</li>\n<li><code>${project.build.directory}</code>：项目构件输出目录，默认为target/；</li>\n<li><code>${project.outputDirectory}</code>：项目主代码编译输出目录，默认为target/classes/；</li>\n<li><code>${project.testOutputDirectory}</code>：项目测试代码编译输出目录，默认为target/test-classes/；</li>\n<li><code>${project.groupId}</code>：项目的groupId；</li>\n<li><code>${project.artifactId}</code>：项目的artifactId；</li>\n<li><code>${project.version}</code>：项目的version，与${version}等价；</li>\n<li><code>${project.build.fianlName}</code>：项目打包输出文件的名称，默认为${project.artifactId}-${project.version}；</li>\n</ol>\n</li>\n<li>自定义属性：用户可以在POM的<properties>元素下自定义Maven属性；</properties></li>\n<li>Settings属性：用户使用settings.开头的属性引用settings.xml文件中XML元素的值；</li>\n<li>Java系统属性：所有Java系统属性都可以使用Maven属性引用；</li>\n<li>环境变量属性：所有环境变量都可以使用以env.开头的Maven属性引用；</li>\n</ul>\n<h3 id=\"聚合工程\"><a href=\"#聚合工程\" class=\"headerlink\" title=\"聚合工程\"></a>聚合工程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0</span><br><span class=\"line\">                      http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;app&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;modules&gt;</span><br><span class=\"line\">    &lt;module&gt;my-app&lt;/module&gt;</span><br><span class=\"line\">    &lt;module&gt;my-webapp&lt;/module&gt;</span><br><span class=\"line\">  &lt;/modules&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0</span><br><span class=\"line\">                      http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">  &lt;parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;app&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">  &lt;/parent&gt;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ul>\n<li><a href=\"https://maven.apache.org/guides/getting-started/index.html\" target=\"_blank\" rel=\"noopener\">Apache官方-快速入门</a></li>\n<li><a href=\"https://www.cnblogs.com/forerver-elf/p/6257395.html\" target=\"_blank\" rel=\"noopener\">博客园-Maven属性、profile和资源过滤</a></li>\n<li><a href=\"https://www.cnblogs.com/wkrbky/p/6352188.html\" target=\"_blank\" rel=\"noopener\">博客园-Maven常用命令</a></li>\n<li><a href=\"https://blog.csdn.net/benhuo931115/article/details/80674760\" target=\"_blank\" rel=\"noopener\">CSDN-30个常用的 Maven 命令</a></li>\n<li><a href=\"https://blog.csdn.net/en_joker/article/details/84067071\" target=\"_blank\" rel=\"noopener\">CSDN-maven-surefire-plugin简介</a></li>\n</ul>\n"},{"title":"Linux命令","date":"2019-08-29T06:32:09.000Z","_content":"### 命令格式\n> 命令名 [选项] [参数]\n- 中括号“[]”代表可选。\n- 选项可以使以减号“-”开头的缩写，还可以是以双减号“--”开头的英文全称，可以多个选项联合使用。\n- 参数可以使0个、1个、多个。\n\n### 常用命令   \n##### 帮助   \n> `man 命令名`：用来查看指定命令名的帮助，该命令也可以查看配置文件的帮助。\n\n> `命令名 --help`：用来查看命令选项的帮助。\n\n> `whereis 命令名`：可以查找命令的所在目录及该命令帮助的所在目录。\n\n##### 清屏\n> `ctrl+l`或者`clear`：清屏。   \n> `ctrl+u`和`ctrl+y`：剪切和粘贴命令\n\n##### vi/vim编辑器\n> `vi 文件`：创建或打开一个文件。\n\n> 命令行模式（一般模式）：使用vi刚刚打开文件的模式。   \n> 常用命令\n- `gg`、`G`、`nG`、`0`、`$`：移动光标都第一行、最后一行、第n行、当前行行首、当前行行尾。\n- `x`、`D`、`dd`、`ndd`、`dG`：删除当前光标处、剪切光标到行尾、当前行、当前行开始的n行、当前行到最后一行的内容。\n- `yy`、`nyy`、`p`、`P`、`r`、`R`、：复制当前行、当前行开始的n行、粘贴到光标下一行、上一行、替换当前光标的字符、光标出开始替换直到ESC结束。\n- `u`：撤销上一次操作。\n- `ZZ`：退出vi。\n\n> 插入模式（编辑模式）：从命令行模式输入`aioAIO`中任意一个进入的模式，使用`ESC`退出。\n\n> 底行模式（冒号模式）：从命令行模式输入`:`进入模式。   \n> 常用命令\n- `set nu(set nonu)`：设置显示或取消行号。\n- `linenumber`：移动光标到指定的linenumber行。\n- `/keyword（？keyword）`：按关键词从光标处向下查找或向上查找。\n- `set ic(set noic)`：设置忽略或区分大小写。\n- `n1,n2d`：删除n1行到n2行之间的内容。\n- `%s/old/new/g`：使用新串全文替换旧串。\n- `n1,n2s/old/new/g`：使用新串在指定行间进行替换旧串。\n- `w`、`w 目录`、`wq`、`q!`、`wq!`：保存、另存、保存退出、不保存退出、强制保存退出。\n\n> 小技巧\n- `:map 快捷键 操作`：自定义快捷键，如 :map ^p I#<ESC> 。\n- `:ab 缩写 原意 `：为全称定义一个缩写名字，然后使用缩写名字+空格即可完成全名的输入。\n- `~/.vimrc`：可以在此文件中定义底行模式的命令使其永久生效。\n\n##### 定义别名\n- `alias 别名 命令`：为命令定义一个临时别名。\n- `~/.bashrc`：编辑该文件可以永久定义别名。\n\n##### 目录与文件命令\n> `ls [选项] [目录或者文件]`：查看目录或文件的内容或属性。   \n> 常用选项-alh\n- -a：显示隐藏文件。\n- -l：长列表显示。\n- -h：人性化显示。\n- -i：显示i节点信息。\n- 可以使用通配符(\\*、?)或者正则匹配([]、[-]、[^]...)。\n\n> `tree [目录]`：列出指定目录的树状结构并统计目录和文件数量。\n\n> `pwd`；查看当前工作目录的绝对路径。\n\n> `cd [目录]`：切换目录。   \n- cd ~或者cd：切换到家目录。\n- cd ..：切换到上一级目录。\n\n> `mkdir [选项] 目录`：创建目录。    \n> 常用选项-pm\n- -p：创建多级目录。\n- -m: 使用数字表示法指定目录的权限。\n\n> `cp [选项] 目录或文件 目标目录`：复制目录或文件到已存在的目标目录或。\n> 常用选项-ri\n- -r：递归复制目录内容。\n- -i：如果遇到同名文件会提示是否覆盖。\n\n> `mv [选项] 目录或文件 目标目录`：剪切目录或文件到已存在的目标目录或者执行改名操作。   \n> 常用选项-if\n- -f：如果遇到同名文件不会提示是否覆盖。\n- -i：--interactive。如果遇到同名文件会提示是否覆盖.\n\n> `rm [选项] 目录或者文件`：删除一个目录或者文件。    \n> 常用选项-rf\n- -r：递归删除目录及目录下的所有内容。\n- -f：--force，不在有提示信息强制删除。\n\n> `touch 文件`：创建一个新的空白文件或者是更新一下已存在文件的修改时间。\n\n> `ln -s 目录或文件 软链接文件`：为一个文件或目录创建一个软链接，类似于快捷方式，软连接文件的权限是777.\n\n##### 查看文件内容命令\n> `cat [选项] 文件`：使用与浏览内容较少的文件。   \n> 常用选项-bn\n- -b：--number-nonblank，行号只标记有效行(即非空白行)。\n- -n：--number，带行号显示，不挑剔。\n\n> `more 文件`：可以分页查看文件内容。  \n> 辅助命令f、b、enter、q\n- b：上一页。\n- f：下一页，也可以使用空格键。\n- enter：下一行。\n- q：退出。\n\n> `less [选项] 文件`：同样是分页查看文件内容，但是可以带行号，还能搜索。    \n> 常用选项MN\n- -M：使用后类似于more的百分比。\n- -N：带行号显示。\n- 辅助命令同more，可以使用“/keyword”进行搜索。\n\n> `head [-n 数字] 文件`；显示到指定行号的文件内容，默认显示前10行。\n\n> `tail [选项] 文件`；从尾部开始显示文件内容，默认显示后10行。    \n> 常用选项-nf\n- -n 数字：显示指定的后几行。\n- -f：--follow，跟踪显示文件的变化，常用来查看日志。\n\n##### 输出重定向与管道命令、历史命令\n> `> 文件`:将一个到终端的输出重定向到文件中，即向文件中覆盖内容。   \n> `>> 文件`：同样是重定向到终端的输出，追加到文件的末尾。\n> `&>> 文件`：将错误和正确结果都追加到文件末尾。\n\n> `命令A | 命令B`：将命令A的输出结果通过管道符作为命令B的输入参数，可以通过管道符“|”执行多个命令。\n\n> `ehco 字符串`：输入指定内容到终端，相当于编程语言中的打印。\n\n> `history [数量]`：可以查看历史命令列表或者查看指定数量的历史命令列表，之后可以使用“!历史命令编号”来执行指定命令。    \n> `~/.bash_history`：历史命令保存在该文件中，默认保存上限可以在profile中修改。\n\n##### 查找命令\n> `find 目录 搜索条件`：在指定目录范围内根据指定条件查找指定的内容。    \n> 常用选项\n- -name：按名称查找，可以使用通配符或者正则。\n- -size：按大小查找，如-size +200K（大于200K的）、size -10M（小于10M的）。\n- -user：按用户名查找。\n- -type：按文件类型查找。如-type \"d\"、-type \"-\"。\n- -mtime：按文件的最后修改时间查找，该时间单位是天，如-mtime +10（最后修改时间距现在10天以上的）。\n- 可以使用“-a”或者“-o”进行条件的拼接，前者表示and，后者表示or。\n- 可以使用“-exec”选项来对查找的结果进行处理，如find /etc -name init -exec ls -l `{} \\;`,着重部分是固定格式。\n\n> `locate [-i] 要查找的内容`：快速查找或者忽略大小写查找。    \n> 说明\n- 可能系统为安装该命令，需要执行yum -y install mlocate。\n- 每次使用前最好执行updatedb命令更新locate检索库。\n\n> `grep [选项] 字串 文件或者是命令的输出结果`：从指定的文件或者一个命令输出结果中过滤查找需要的内容。   \n> 常用选项-ivn\n- -i：忽略大小写查找。\n- -v：排除指定字串查找。\n- -n:查找结果带行号显示。\n- 字串可以使用通配符或者正则，如*、？、^、$。\n\n##### 时间日期命令\n> `date [-s] [+时间格式`：按指定格式设置或显示系统时间。   \n> 格式说明：%Y表示年份、%m表示月份、%d表示天、%H表示0-23的小时、%M表示分钟、%S表示秒。\n\n> `cal [年份]`：查看当前时间的日历或者查看指定年份的日历。\n\n> `ntpq -p`：与NTP服务器进行时间同步，CentOS7请使用`chronyc sources`命令。\n\n> `/etc/sysconfig/clock`：配置时区，CentOS7使用`tiemdatectl set-timezone Asia/Shanghai`命令。\n\n> `/etc/sysconfig/i18n`：配置语言环境，CentOS7使用`localectl set-locale LANG=zh_CN.UTF-8`命令。\n\n##### 文件压缩和解压缩命令\n> `gzip 文件`和`gunzip 文件`：以gzip格式压缩和解压文件，只能压缩文件且不会保留原文件。\n\n> `zip [-r] 文件或目录 压缩后的文件 要压缩的文件`：以zip格式压缩目录或文件。   \n> `unzip [-d 目录] 要解压的文件`：以zip格式解压文件到当前目录或指定目录。\n\n> `tar [-zcvf] 要压缩打包的目录或文件`：以gzip压缩并使用tar进行打包指定文件。   \n> `tar [-zxvf] 要解压的文件 [-C 目标目录]`：解压.tar.bz2文件到当前目录或指定的已存在的目录。\n\n> `tar [-jcvf] 要压缩打包的目录或文件`：以bzip2压缩并打包指定文件。   \n> `tar [-jxvf] 要解压的文件 [-C 目标目录]`：解压.tar.bz2文件到当前目录或指定目录。\n##### 网络与服务命令\n> `ipconfig`或者`ip addr`：查看网卡信息，后者是CentOS7上或者Ubuntu18上使用。\n\n> `ping IP地址`：测试与目标IP地址的连通性。\n\n> `netstat -rn`：可以查看路由列表。   \n> `netstat -tulnp`或者`netstat -anp`：查看进程的网络连接状态。   \n> 选项说明：r表示路由、n表示IP地址和端口号、t表示tcp连接、u表示udp连接、l表示监听状态、p表示PID和应用、a表示全部。\n\n> 如何配置静态IP地址\n- CentOS中配置方式：修改 /etc/sysconfig/network-scripts/ifcfg-eth0(或者ens33)配置文件，修改内容类似下面。\n\n```\n# 修改部分\nBOOTPROTO=\"static\" # 设置使用静态IP协议\nONBOOT=\"yes\"  # 设置开机启动网络服务\n# 添加部分\nDNS1=\"114.114.114.114\" #设置DNS1\nDNS2=\"8.8.8.8\"\nGATEWAY=\"192.168.124.2\" # 设置网关\nIPADDR=\"192.168.124.124\"  # 设置IP地址\nNETMASK=\"255.255.255.0\"  # 设置子网掩码\n\n# 重启网络服务CentOS6.x：network，CentOS7.x:NetworkManager\n```\n\n- Ubuntu18中配置方式：修改/etc/netplan/01-network-manager-all.yaml配置文件，修改内容类似下面。\n\n```\nnetwork:\n　version: 2\n    renderer: NetworkManager\n    ethernets:\n　　ens33:\n　　dhcp4: no #关闭动态主机配置协议\n　　addresses: [192.168.124.125/24] #设置IP地址，24表示24位的子网掩码(即255.255.255.0)\n　　gateway4: 192.168.124.2 #设置网关\n　　nameservers:\n　　　　addresses: [8.8.8.8, 114.114.114.114] #设置DNS\n\n# Ubuntu18中重启方式：sudo netplan apply\n```\n-\n\n> `ls /etc/init.d`：可以系统中通过rpm安装的独立服务列表。\n\n> 服务管理\n- `/etc/init.d/服务名 stop|start|restart|status`:对某个服务停止、启动、重启，查看状态。\n- `service 服务名 stop|start|restart|status`。\n- `systemctl stop|start|restart|reload|status 服务名`。（CentOS7的管理方式）\n- `service --status-all`；查看所有的服务状态。CentIS7使用`systemctl list-units`。\n\n> 自启动管理\n- `chkconfig --list [| grep xxx]` : 查看所有服务或者具体服务在各个运行级别的状态。    \n- `chkconfig [--level runlevel] 服务名 on/off`：设置服务在所有级别或指定级别的开启自启与关闭。   \n- `systemctl enable/disable xxx.service`：同样可以设置开机自启与关闭，使用于CentOS7.\n- `systemctl list-unit-files`：查看所有的自启动状态。\n\n> 防火墙管理\n- `/etc/init.d/iptables`：配置该文件可放开端口。\n- `firewall-cmd --zone=public [--remove-port|--query-port|--add-port]=80/tcp --permanent `：CentOS7的方式。\n- `firewall-cmd --reload`：重启防火墙。\n- `firewall-cmd --zone=public --list-ports`：查看防火墙列表。\n\n##### 系统运行级别管理命令\n> 系统运行级别分为六大类（括号内的表示在CentOS7中的标识）。\n- 0：表示关机。 （poweroff.target）。\n- 1：表示单用户模式 （emergency.target）。\n- 2：表示多用户无网络模式 （rescure.target）。\n- 3：表示多用户有网络模式 （multi-user.target）。\n- 4：表示保留级别，未被使用。（无）\n- 5：表示图形界面模式 （graphical.target）。\n- 6：表示重启 （reboot.target）。\n- CentOS7中的这些名称可以通过`ll /lib/systemd/system/runlevel*`查到。\n\n> `runlevel`：能够查看系统之前和当前的运行级别。    \n> `vi /etc/inittab`；通过该配置文件也可以查到系统运行级别。    \n> `systemctl get-default`；在CentOS7中可以通过该命令查看当前运行级别。\n\n> `init 级别ID`；可以切换运行级别。   \n> `vi /etc/inittab`：在该文件中配置默认运行级别。     \n> `systemctl set-default xxx.target`：CentOS7的配置默认运行级别的方式。\n\n##### 进程管理命令\n> `ps aux`与`ps au`：查看当前系统进程的详细信息，一般使用后者即可，表示只显示终端上的进程。   \n> `ps -ef`：同样能查看当前系统进程信息，还能查到父进程的PID。     \n> `pstree [选项]`：查看系统进程树。   \n> 常用选项：\n- -p：查看指定PID的进程。\n- -u：查看指定用户名的进程。    \n\n> `top`：动态实时的显示系统进程并排序，还可以监控系统的健康状态。\n\n> `kill -1 PID`：重启指定PID的进程。    \n> `kill [-9] PID`：结束或强制结束指定PID的进程。   \n> `killall 进程名`：结束与指定进程相关的所有进程。    \n> `pkill` : 可以用来踢出指定终端的用户\n\n##### 用户和组管理命令\n> 相关配置文件分别是`/etc/passwd`、`/etc/shadow`、`/etc/group`、`/etc/gshadow`。\n- /etc/passwd：分别表示用户名、标识口令、UID、初始GID、备注、家目录、登录Shell。\n- /etc/shadow：分别表示用户名、加密口令、最新修改日期、下次可修改间隔、有效期限、提前警告天数、过期可用天数、截止日期、保留。\n- /etc/group：分别表示组名称、标识口令、组ID、组用户列表。\n- /etc/gshadow：分别表示组名称、加密口令、组管理者列表、组用户列表。\n\n> `useradd [选项] 用户名`：添加新用户。    \n> 常用选项\n- -g：添加到初始组，一个用户只能有一个初始组（也称之为主组）。\n- -G：添加到附加组，一个用户可以有多个附加组（也就是组配置文件中用户列表中所对应的组）。\n- -d：指定家目录的位置。\n- -u：指定UID，普通用户的UID都是500之后的数字，超级用户的UID是0。\n- -s：设置使用的登录shell类型\n- -r：--system ，创建一个系统账号，这样的账号不会再/home下创建家目录。\n- -m：--creat-home，设置要在/home下创建家目录。\n- -M：--no-create-home ，设置不创用户的家目录。\n\n> `passwd 用户名`：为指定用户设置口令。\n\n> `userdel [-r] 用户名`：删除指定用户或者同时删除家目录。   \n> `usermod [选项] 用户名`：可以修改用户信息，选项同新增用户选项。\n\n> `id [用户名]`；查看用户的UID和GID信息。   \n> `who`或者`w`；查看所有登录用户的详细信息。\n> `whoami`：查看当前用户名称。\n\n> `su [-] 用户名`：切换到指定目录。   \n> 可以不用切换root用户，而使用`sudo`来管理系统。\n\n> `groupadd 组名`、`groupdel 组名`、`groupmod 组名`。\n\n##### 文件权限管理命令\n> 使用`ls -l`可以查看文件或目录的详细信息。     \n- 这些信息分别表示文件类型和ugo权限、硬链接数(可访问方式的数量)、所有者、所属组、文件大小、最后修改时间、文件名（即basename）。\n- 文件的rwx：表示可查看、修改文件内容、可执行该文件。\n- 目录的rwx：表示可查看、在目录中创建目录文件或修改目录内容、可进入该目录。\n\n> `chmod [-R] {[ugoa]+/-/=[rwx]} 目录或文件`：修改(添加、减少、设置)所有者或所属组或其他用户或所有用户对指定目录或文件的读写执行权限。   \n> `chmod [-R] [rwx=421] 目录或文件`：使用数字表示法设置目录或文件的权限，如chmod 755 temp.sh。\n\n> `chown [-R] 用户名  目录或文件`：变更目录或文件的所有者为指定用户。    \n> `chgrp [-R] 组名 目录或文件`： 变变目录或文件的所属组为指定组。      \n> `chown [-R] 用户名:组名 目录或文件`：同时变更目录或文件的所有者和所属组。\n\n##### 磁盘管理命令\n> `lsblk [-f]`：查看分区和挂载信息,-f,--fs。   使用`fdisk -l`也能查看。\n> `df [-lha]`：查看整个磁盘的使用情况,-l,--local。   \n> `du [-ach --max-depth=0开始的数字]  [目录或文件]`：查看指定目录或目录所有内容的磁盘使用情况并统计，还能灵活的指定目深度。    \n> `du -sh 目录`\n\n> `mount`：查看系统中挂载哪些分区。\n> `mount /dev/sr0 /mnt/cdrom`：挂载光驱设备到/mnt/cdrom。      \n> `mount -t vfat /dev/sdb1 /mnt/usb`：挂载一个fat32格式的U盘，U盘的设备名称也是以“sd”开头的。   \n> Linux默认不支持NTFS格式的U盘，需要安装ntfs-3g软件包才能正常使用。    \n\n> 如何为系统添加一块新硬盘(以第二块硬盘sdb为例)。\n- 分区分为MBR(主引导记录)和GPT(GUID分区表)两大类，前者主分区最多4个，支持硬盘容量有限；后者主分区无上限，支持容量达18EB，可能受操作系统限制。\n- 对于SCSI(小型机系统接口)或SATA(串行高级技术附件)硬盘在Linux文件系统中都是保存在/dev下的以'sd'开头的目录中。\n- 准备好要添加的硬盘。\n- `fdisk /dev/sdb`：为sdb硬盘进行分区。\n- `mkfs /dev/sdb`：格式化sdb硬盘，根据提示进行，格式化进行将文件系统写入硬盘。\n- `mkdir /mnt/newdisk`：创建挂载点。\n- `mount /dev/sdb /mnt/newdisk`：执行临时挂载操作，当然也可通过`unount`进行卸载。\n- `vi /etc/fstab`：修改配置文件以便使挂载永久生效。\n- `mount -a`：根据/etc/fstab的配置重新进行挂载。\n\n##### 定时调度命令\n> `crontab -e`：打开定时调度配置文件进行编辑\n- 从左到右五个时间符号分别表示：分钟、小时、日、月、星期。\n- “\\*”表示任意时间，“\\*/n”表示每隔多长时间，“-”表示一段时间，“，”表示几个时间点。    \n\n> `crontab -l`：查看有定时任务列表。    \n> `crontab -r`：删除所有定时任务。\n\n##### 软件包管理命令\n> rpm管理   \n- `rpm -qa 包名`：查询指定rpm包的安装情况。   \n- `rpm -ql 包名`:查询指定rpm包的安装位置。    \n- `rpm -qR 包名`:查询指定rpm包的依赖信息。   \n- `rpm -qf 目录`：查询指定目录下安装的rpm包列表。\n- `rpm -ivh 包全名`；安装指定rpm包，显示安装详情和安装进度。\n- `rpm -e [--nodeps] 包名`：卸载或者强制卸载指定rpm包。\n- `rpm -Uvh 包名`：升级安装包。\n\n> yum管理\n- `yum [-y] list`：查询安装列表。\n- `yum [-y] install 包名`：安装。\n- `yum [-y] remove 包名` ：卸载。\n- `yum [-y] update 包名`：升级。\n- `yum [-y] grouplist`：查询软件组列表。\n- `yum [-y] groupinstall 软件组名`、`yum [-y] removegroup软件组名`。\n- 可以更新yum源：位置在`/etc/yum.repos.d/`目录下。\n\n> Ubuntu apt管理\n- `sudo apt-get update`：修改软件源之后可以使用该命令重新加载软件源。\n- 源更新方式可以去tuna上找：<https://mirrors.tuna.tsinghua.edu.cn/> 。\n- `sudo apt-get install 包名`：安装包。\n- `sudo apt-get remove 包名`：卸载包。\n- `sudo apt-get upgrade 包名`：更新已安装的包。\n- `sudo apt-cache show 包名`：获取包的相关信息。\n- `sudo apt-get source 包名`：下载该包的源代码。\n\n##### 关机和重启命令\n> `shutdown -r time `：指定时间重启，默认是1分钟。`shutdown -r now`等价于`reboot`。    \n> `shutdown -h time` ：指定时间关机。`shutdown -h now`等价于`halt`。   \n> `shutdown -c`；取消上一个shutdown命令。\n> `sync`：同步命令，同步数据到磁盘。\n\n##### 其他命令\n> `hostname`：查看主机名。    \n> `uname -a`：查看内核版本详情。   \n> `/proc/cpuinfo`；查看cpu信息。   \n> `free -m`：以MB单位查看内存信息。   \n> `/etc/issue`：查看查看发行版本。   \n\n### SSH\n> windows上使用公私密钥对登录  \n- 创建一组密钥对并保存好私钥。\n- 将公钥内容导入到指定用户的家目录的.ssh目录下的authorized_keys文件中。\n- 禁用密码登录 vi /etc/ssh/sshd_config 设置密码认证为no。\n- service sshd restart\n- 禁用root登录：vi /etc/ssh/sshd_config -> PermitRootLogin no\n- 改掉ssh端口：vi /etc/ssh/sshd_config -> Port=xxx\n\n> Linux上使用ssh\n- ssh -p username@IP\n- ssh-sshgen -t rsa -b 2048\n- ssh-copy-id username@IP\n\n##### SCP\n- scp -P user@服务器IP:绝对路径 客户机文件    \n\n##### SFTP\n- sftp -oPort user@IP\n- 使用help查看使用\n\n","source":"_posts/Linux命令.md","raw":"---\ntitle: Linux命令\ndate: 2019-08-29 14:32:09\ntags: linux\ncategories: 学习笔记\n---\n### 命令格式\n> 命令名 [选项] [参数]\n- 中括号“[]”代表可选。\n- 选项可以使以减号“-”开头的缩写，还可以是以双减号“--”开头的英文全称，可以多个选项联合使用。\n- 参数可以使0个、1个、多个。\n\n### 常用命令   \n##### 帮助   \n> `man 命令名`：用来查看指定命令名的帮助，该命令也可以查看配置文件的帮助。\n\n> `命令名 --help`：用来查看命令选项的帮助。\n\n> `whereis 命令名`：可以查找命令的所在目录及该命令帮助的所在目录。\n\n##### 清屏\n> `ctrl+l`或者`clear`：清屏。   \n> `ctrl+u`和`ctrl+y`：剪切和粘贴命令\n\n##### vi/vim编辑器\n> `vi 文件`：创建或打开一个文件。\n\n> 命令行模式（一般模式）：使用vi刚刚打开文件的模式。   \n> 常用命令\n- `gg`、`G`、`nG`、`0`、`$`：移动光标都第一行、最后一行、第n行、当前行行首、当前行行尾。\n- `x`、`D`、`dd`、`ndd`、`dG`：删除当前光标处、剪切光标到行尾、当前行、当前行开始的n行、当前行到最后一行的内容。\n- `yy`、`nyy`、`p`、`P`、`r`、`R`、：复制当前行、当前行开始的n行、粘贴到光标下一行、上一行、替换当前光标的字符、光标出开始替换直到ESC结束。\n- `u`：撤销上一次操作。\n- `ZZ`：退出vi。\n\n> 插入模式（编辑模式）：从命令行模式输入`aioAIO`中任意一个进入的模式，使用`ESC`退出。\n\n> 底行模式（冒号模式）：从命令行模式输入`:`进入模式。   \n> 常用命令\n- `set nu(set nonu)`：设置显示或取消行号。\n- `linenumber`：移动光标到指定的linenumber行。\n- `/keyword（？keyword）`：按关键词从光标处向下查找或向上查找。\n- `set ic(set noic)`：设置忽略或区分大小写。\n- `n1,n2d`：删除n1行到n2行之间的内容。\n- `%s/old/new/g`：使用新串全文替换旧串。\n- `n1,n2s/old/new/g`：使用新串在指定行间进行替换旧串。\n- `w`、`w 目录`、`wq`、`q!`、`wq!`：保存、另存、保存退出、不保存退出、强制保存退出。\n\n> 小技巧\n- `:map 快捷键 操作`：自定义快捷键，如 :map ^p I#<ESC> 。\n- `:ab 缩写 原意 `：为全称定义一个缩写名字，然后使用缩写名字+空格即可完成全名的输入。\n- `~/.vimrc`：可以在此文件中定义底行模式的命令使其永久生效。\n\n##### 定义别名\n- `alias 别名 命令`：为命令定义一个临时别名。\n- `~/.bashrc`：编辑该文件可以永久定义别名。\n\n##### 目录与文件命令\n> `ls [选项] [目录或者文件]`：查看目录或文件的内容或属性。   \n> 常用选项-alh\n- -a：显示隐藏文件。\n- -l：长列表显示。\n- -h：人性化显示。\n- -i：显示i节点信息。\n- 可以使用通配符(\\*、?)或者正则匹配([]、[-]、[^]...)。\n\n> `tree [目录]`：列出指定目录的树状结构并统计目录和文件数量。\n\n> `pwd`；查看当前工作目录的绝对路径。\n\n> `cd [目录]`：切换目录。   \n- cd ~或者cd：切换到家目录。\n- cd ..：切换到上一级目录。\n\n> `mkdir [选项] 目录`：创建目录。    \n> 常用选项-pm\n- -p：创建多级目录。\n- -m: 使用数字表示法指定目录的权限。\n\n> `cp [选项] 目录或文件 目标目录`：复制目录或文件到已存在的目标目录或。\n> 常用选项-ri\n- -r：递归复制目录内容。\n- -i：如果遇到同名文件会提示是否覆盖。\n\n> `mv [选项] 目录或文件 目标目录`：剪切目录或文件到已存在的目标目录或者执行改名操作。   \n> 常用选项-if\n- -f：如果遇到同名文件不会提示是否覆盖。\n- -i：--interactive。如果遇到同名文件会提示是否覆盖.\n\n> `rm [选项] 目录或者文件`：删除一个目录或者文件。    \n> 常用选项-rf\n- -r：递归删除目录及目录下的所有内容。\n- -f：--force，不在有提示信息强制删除。\n\n> `touch 文件`：创建一个新的空白文件或者是更新一下已存在文件的修改时间。\n\n> `ln -s 目录或文件 软链接文件`：为一个文件或目录创建一个软链接，类似于快捷方式，软连接文件的权限是777.\n\n##### 查看文件内容命令\n> `cat [选项] 文件`：使用与浏览内容较少的文件。   \n> 常用选项-bn\n- -b：--number-nonblank，行号只标记有效行(即非空白行)。\n- -n：--number，带行号显示，不挑剔。\n\n> `more 文件`：可以分页查看文件内容。  \n> 辅助命令f、b、enter、q\n- b：上一页。\n- f：下一页，也可以使用空格键。\n- enter：下一行。\n- q：退出。\n\n> `less [选项] 文件`：同样是分页查看文件内容，但是可以带行号，还能搜索。    \n> 常用选项MN\n- -M：使用后类似于more的百分比。\n- -N：带行号显示。\n- 辅助命令同more，可以使用“/keyword”进行搜索。\n\n> `head [-n 数字] 文件`；显示到指定行号的文件内容，默认显示前10行。\n\n> `tail [选项] 文件`；从尾部开始显示文件内容，默认显示后10行。    \n> 常用选项-nf\n- -n 数字：显示指定的后几行。\n- -f：--follow，跟踪显示文件的变化，常用来查看日志。\n\n##### 输出重定向与管道命令、历史命令\n> `> 文件`:将一个到终端的输出重定向到文件中，即向文件中覆盖内容。   \n> `>> 文件`：同样是重定向到终端的输出，追加到文件的末尾。\n> `&>> 文件`：将错误和正确结果都追加到文件末尾。\n\n> `命令A | 命令B`：将命令A的输出结果通过管道符作为命令B的输入参数，可以通过管道符“|”执行多个命令。\n\n> `ehco 字符串`：输入指定内容到终端，相当于编程语言中的打印。\n\n> `history [数量]`：可以查看历史命令列表或者查看指定数量的历史命令列表，之后可以使用“!历史命令编号”来执行指定命令。    \n> `~/.bash_history`：历史命令保存在该文件中，默认保存上限可以在profile中修改。\n\n##### 查找命令\n> `find 目录 搜索条件`：在指定目录范围内根据指定条件查找指定的内容。    \n> 常用选项\n- -name：按名称查找，可以使用通配符或者正则。\n- -size：按大小查找，如-size +200K（大于200K的）、size -10M（小于10M的）。\n- -user：按用户名查找。\n- -type：按文件类型查找。如-type \"d\"、-type \"-\"。\n- -mtime：按文件的最后修改时间查找，该时间单位是天，如-mtime +10（最后修改时间距现在10天以上的）。\n- 可以使用“-a”或者“-o”进行条件的拼接，前者表示and，后者表示or。\n- 可以使用“-exec”选项来对查找的结果进行处理，如find /etc -name init -exec ls -l `{} \\;`,着重部分是固定格式。\n\n> `locate [-i] 要查找的内容`：快速查找或者忽略大小写查找。    \n> 说明\n- 可能系统为安装该命令，需要执行yum -y install mlocate。\n- 每次使用前最好执行updatedb命令更新locate检索库。\n\n> `grep [选项] 字串 文件或者是命令的输出结果`：从指定的文件或者一个命令输出结果中过滤查找需要的内容。   \n> 常用选项-ivn\n- -i：忽略大小写查找。\n- -v：排除指定字串查找。\n- -n:查找结果带行号显示。\n- 字串可以使用通配符或者正则，如*、？、^、$。\n\n##### 时间日期命令\n> `date [-s] [+时间格式`：按指定格式设置或显示系统时间。   \n> 格式说明：%Y表示年份、%m表示月份、%d表示天、%H表示0-23的小时、%M表示分钟、%S表示秒。\n\n> `cal [年份]`：查看当前时间的日历或者查看指定年份的日历。\n\n> `ntpq -p`：与NTP服务器进行时间同步，CentOS7请使用`chronyc sources`命令。\n\n> `/etc/sysconfig/clock`：配置时区，CentOS7使用`tiemdatectl set-timezone Asia/Shanghai`命令。\n\n> `/etc/sysconfig/i18n`：配置语言环境，CentOS7使用`localectl set-locale LANG=zh_CN.UTF-8`命令。\n\n##### 文件压缩和解压缩命令\n> `gzip 文件`和`gunzip 文件`：以gzip格式压缩和解压文件，只能压缩文件且不会保留原文件。\n\n> `zip [-r] 文件或目录 压缩后的文件 要压缩的文件`：以zip格式压缩目录或文件。   \n> `unzip [-d 目录] 要解压的文件`：以zip格式解压文件到当前目录或指定目录。\n\n> `tar [-zcvf] 要压缩打包的目录或文件`：以gzip压缩并使用tar进行打包指定文件。   \n> `tar [-zxvf] 要解压的文件 [-C 目标目录]`：解压.tar.bz2文件到当前目录或指定的已存在的目录。\n\n> `tar [-jcvf] 要压缩打包的目录或文件`：以bzip2压缩并打包指定文件。   \n> `tar [-jxvf] 要解压的文件 [-C 目标目录]`：解压.tar.bz2文件到当前目录或指定目录。\n##### 网络与服务命令\n> `ipconfig`或者`ip addr`：查看网卡信息，后者是CentOS7上或者Ubuntu18上使用。\n\n> `ping IP地址`：测试与目标IP地址的连通性。\n\n> `netstat -rn`：可以查看路由列表。   \n> `netstat -tulnp`或者`netstat -anp`：查看进程的网络连接状态。   \n> 选项说明：r表示路由、n表示IP地址和端口号、t表示tcp连接、u表示udp连接、l表示监听状态、p表示PID和应用、a表示全部。\n\n> 如何配置静态IP地址\n- CentOS中配置方式：修改 /etc/sysconfig/network-scripts/ifcfg-eth0(或者ens33)配置文件，修改内容类似下面。\n\n```\n# 修改部分\nBOOTPROTO=\"static\" # 设置使用静态IP协议\nONBOOT=\"yes\"  # 设置开机启动网络服务\n# 添加部分\nDNS1=\"114.114.114.114\" #设置DNS1\nDNS2=\"8.8.8.8\"\nGATEWAY=\"192.168.124.2\" # 设置网关\nIPADDR=\"192.168.124.124\"  # 设置IP地址\nNETMASK=\"255.255.255.0\"  # 设置子网掩码\n\n# 重启网络服务CentOS6.x：network，CentOS7.x:NetworkManager\n```\n\n- Ubuntu18中配置方式：修改/etc/netplan/01-network-manager-all.yaml配置文件，修改内容类似下面。\n\n```\nnetwork:\n　version: 2\n    renderer: NetworkManager\n    ethernets:\n　　ens33:\n　　dhcp4: no #关闭动态主机配置协议\n　　addresses: [192.168.124.125/24] #设置IP地址，24表示24位的子网掩码(即255.255.255.0)\n　　gateway4: 192.168.124.2 #设置网关\n　　nameservers:\n　　　　addresses: [8.8.8.8, 114.114.114.114] #设置DNS\n\n# Ubuntu18中重启方式：sudo netplan apply\n```\n-\n\n> `ls /etc/init.d`：可以系统中通过rpm安装的独立服务列表。\n\n> 服务管理\n- `/etc/init.d/服务名 stop|start|restart|status`:对某个服务停止、启动、重启，查看状态。\n- `service 服务名 stop|start|restart|status`。\n- `systemctl stop|start|restart|reload|status 服务名`。（CentOS7的管理方式）\n- `service --status-all`；查看所有的服务状态。CentIS7使用`systemctl list-units`。\n\n> 自启动管理\n- `chkconfig --list [| grep xxx]` : 查看所有服务或者具体服务在各个运行级别的状态。    \n- `chkconfig [--level runlevel] 服务名 on/off`：设置服务在所有级别或指定级别的开启自启与关闭。   \n- `systemctl enable/disable xxx.service`：同样可以设置开机自启与关闭，使用于CentOS7.\n- `systemctl list-unit-files`：查看所有的自启动状态。\n\n> 防火墙管理\n- `/etc/init.d/iptables`：配置该文件可放开端口。\n- `firewall-cmd --zone=public [--remove-port|--query-port|--add-port]=80/tcp --permanent `：CentOS7的方式。\n- `firewall-cmd --reload`：重启防火墙。\n- `firewall-cmd --zone=public --list-ports`：查看防火墙列表。\n\n##### 系统运行级别管理命令\n> 系统运行级别分为六大类（括号内的表示在CentOS7中的标识）。\n- 0：表示关机。 （poweroff.target）。\n- 1：表示单用户模式 （emergency.target）。\n- 2：表示多用户无网络模式 （rescure.target）。\n- 3：表示多用户有网络模式 （multi-user.target）。\n- 4：表示保留级别，未被使用。（无）\n- 5：表示图形界面模式 （graphical.target）。\n- 6：表示重启 （reboot.target）。\n- CentOS7中的这些名称可以通过`ll /lib/systemd/system/runlevel*`查到。\n\n> `runlevel`：能够查看系统之前和当前的运行级别。    \n> `vi /etc/inittab`；通过该配置文件也可以查到系统运行级别。    \n> `systemctl get-default`；在CentOS7中可以通过该命令查看当前运行级别。\n\n> `init 级别ID`；可以切换运行级别。   \n> `vi /etc/inittab`：在该文件中配置默认运行级别。     \n> `systemctl set-default xxx.target`：CentOS7的配置默认运行级别的方式。\n\n##### 进程管理命令\n> `ps aux`与`ps au`：查看当前系统进程的详细信息，一般使用后者即可，表示只显示终端上的进程。   \n> `ps -ef`：同样能查看当前系统进程信息，还能查到父进程的PID。     \n> `pstree [选项]`：查看系统进程树。   \n> 常用选项：\n- -p：查看指定PID的进程。\n- -u：查看指定用户名的进程。    \n\n> `top`：动态实时的显示系统进程并排序，还可以监控系统的健康状态。\n\n> `kill -1 PID`：重启指定PID的进程。    \n> `kill [-9] PID`：结束或强制结束指定PID的进程。   \n> `killall 进程名`：结束与指定进程相关的所有进程。    \n> `pkill` : 可以用来踢出指定终端的用户\n\n##### 用户和组管理命令\n> 相关配置文件分别是`/etc/passwd`、`/etc/shadow`、`/etc/group`、`/etc/gshadow`。\n- /etc/passwd：分别表示用户名、标识口令、UID、初始GID、备注、家目录、登录Shell。\n- /etc/shadow：分别表示用户名、加密口令、最新修改日期、下次可修改间隔、有效期限、提前警告天数、过期可用天数、截止日期、保留。\n- /etc/group：分别表示组名称、标识口令、组ID、组用户列表。\n- /etc/gshadow：分别表示组名称、加密口令、组管理者列表、组用户列表。\n\n> `useradd [选项] 用户名`：添加新用户。    \n> 常用选项\n- -g：添加到初始组，一个用户只能有一个初始组（也称之为主组）。\n- -G：添加到附加组，一个用户可以有多个附加组（也就是组配置文件中用户列表中所对应的组）。\n- -d：指定家目录的位置。\n- -u：指定UID，普通用户的UID都是500之后的数字，超级用户的UID是0。\n- -s：设置使用的登录shell类型\n- -r：--system ，创建一个系统账号，这样的账号不会再/home下创建家目录。\n- -m：--creat-home，设置要在/home下创建家目录。\n- -M：--no-create-home ，设置不创用户的家目录。\n\n> `passwd 用户名`：为指定用户设置口令。\n\n> `userdel [-r] 用户名`：删除指定用户或者同时删除家目录。   \n> `usermod [选项] 用户名`：可以修改用户信息，选项同新增用户选项。\n\n> `id [用户名]`；查看用户的UID和GID信息。   \n> `who`或者`w`；查看所有登录用户的详细信息。\n> `whoami`：查看当前用户名称。\n\n> `su [-] 用户名`：切换到指定目录。   \n> 可以不用切换root用户，而使用`sudo`来管理系统。\n\n> `groupadd 组名`、`groupdel 组名`、`groupmod 组名`。\n\n##### 文件权限管理命令\n> 使用`ls -l`可以查看文件或目录的详细信息。     \n- 这些信息分别表示文件类型和ugo权限、硬链接数(可访问方式的数量)、所有者、所属组、文件大小、最后修改时间、文件名（即basename）。\n- 文件的rwx：表示可查看、修改文件内容、可执行该文件。\n- 目录的rwx：表示可查看、在目录中创建目录文件或修改目录内容、可进入该目录。\n\n> `chmod [-R] {[ugoa]+/-/=[rwx]} 目录或文件`：修改(添加、减少、设置)所有者或所属组或其他用户或所有用户对指定目录或文件的读写执行权限。   \n> `chmod [-R] [rwx=421] 目录或文件`：使用数字表示法设置目录或文件的权限，如chmod 755 temp.sh。\n\n> `chown [-R] 用户名  目录或文件`：变更目录或文件的所有者为指定用户。    \n> `chgrp [-R] 组名 目录或文件`： 变变目录或文件的所属组为指定组。      \n> `chown [-R] 用户名:组名 目录或文件`：同时变更目录或文件的所有者和所属组。\n\n##### 磁盘管理命令\n> `lsblk [-f]`：查看分区和挂载信息,-f,--fs。   使用`fdisk -l`也能查看。\n> `df [-lha]`：查看整个磁盘的使用情况,-l,--local。   \n> `du [-ach --max-depth=0开始的数字]  [目录或文件]`：查看指定目录或目录所有内容的磁盘使用情况并统计，还能灵活的指定目深度。    \n> `du -sh 目录`\n\n> `mount`：查看系统中挂载哪些分区。\n> `mount /dev/sr0 /mnt/cdrom`：挂载光驱设备到/mnt/cdrom。      \n> `mount -t vfat /dev/sdb1 /mnt/usb`：挂载一个fat32格式的U盘，U盘的设备名称也是以“sd”开头的。   \n> Linux默认不支持NTFS格式的U盘，需要安装ntfs-3g软件包才能正常使用。    \n\n> 如何为系统添加一块新硬盘(以第二块硬盘sdb为例)。\n- 分区分为MBR(主引导记录)和GPT(GUID分区表)两大类，前者主分区最多4个，支持硬盘容量有限；后者主分区无上限，支持容量达18EB，可能受操作系统限制。\n- 对于SCSI(小型机系统接口)或SATA(串行高级技术附件)硬盘在Linux文件系统中都是保存在/dev下的以'sd'开头的目录中。\n- 准备好要添加的硬盘。\n- `fdisk /dev/sdb`：为sdb硬盘进行分区。\n- `mkfs /dev/sdb`：格式化sdb硬盘，根据提示进行，格式化进行将文件系统写入硬盘。\n- `mkdir /mnt/newdisk`：创建挂载点。\n- `mount /dev/sdb /mnt/newdisk`：执行临时挂载操作，当然也可通过`unount`进行卸载。\n- `vi /etc/fstab`：修改配置文件以便使挂载永久生效。\n- `mount -a`：根据/etc/fstab的配置重新进行挂载。\n\n##### 定时调度命令\n> `crontab -e`：打开定时调度配置文件进行编辑\n- 从左到右五个时间符号分别表示：分钟、小时、日、月、星期。\n- “\\*”表示任意时间，“\\*/n”表示每隔多长时间，“-”表示一段时间，“，”表示几个时间点。    \n\n> `crontab -l`：查看有定时任务列表。    \n> `crontab -r`：删除所有定时任务。\n\n##### 软件包管理命令\n> rpm管理   \n- `rpm -qa 包名`：查询指定rpm包的安装情况。   \n- `rpm -ql 包名`:查询指定rpm包的安装位置。    \n- `rpm -qR 包名`:查询指定rpm包的依赖信息。   \n- `rpm -qf 目录`：查询指定目录下安装的rpm包列表。\n- `rpm -ivh 包全名`；安装指定rpm包，显示安装详情和安装进度。\n- `rpm -e [--nodeps] 包名`：卸载或者强制卸载指定rpm包。\n- `rpm -Uvh 包名`：升级安装包。\n\n> yum管理\n- `yum [-y] list`：查询安装列表。\n- `yum [-y] install 包名`：安装。\n- `yum [-y] remove 包名` ：卸载。\n- `yum [-y] update 包名`：升级。\n- `yum [-y] grouplist`：查询软件组列表。\n- `yum [-y] groupinstall 软件组名`、`yum [-y] removegroup软件组名`。\n- 可以更新yum源：位置在`/etc/yum.repos.d/`目录下。\n\n> Ubuntu apt管理\n- `sudo apt-get update`：修改软件源之后可以使用该命令重新加载软件源。\n- 源更新方式可以去tuna上找：<https://mirrors.tuna.tsinghua.edu.cn/> 。\n- `sudo apt-get install 包名`：安装包。\n- `sudo apt-get remove 包名`：卸载包。\n- `sudo apt-get upgrade 包名`：更新已安装的包。\n- `sudo apt-cache show 包名`：获取包的相关信息。\n- `sudo apt-get source 包名`：下载该包的源代码。\n\n##### 关机和重启命令\n> `shutdown -r time `：指定时间重启，默认是1分钟。`shutdown -r now`等价于`reboot`。    \n> `shutdown -h time` ：指定时间关机。`shutdown -h now`等价于`halt`。   \n> `shutdown -c`；取消上一个shutdown命令。\n> `sync`：同步命令，同步数据到磁盘。\n\n##### 其他命令\n> `hostname`：查看主机名。    \n> `uname -a`：查看内核版本详情。   \n> `/proc/cpuinfo`；查看cpu信息。   \n> `free -m`：以MB单位查看内存信息。   \n> `/etc/issue`：查看查看发行版本。   \n\n### SSH\n> windows上使用公私密钥对登录  \n- 创建一组密钥对并保存好私钥。\n- 将公钥内容导入到指定用户的家目录的.ssh目录下的authorized_keys文件中。\n- 禁用密码登录 vi /etc/ssh/sshd_config 设置密码认证为no。\n- service sshd restart\n- 禁用root登录：vi /etc/ssh/sshd_config -> PermitRootLogin no\n- 改掉ssh端口：vi /etc/ssh/sshd_config -> Port=xxx\n\n> Linux上使用ssh\n- ssh -p username@IP\n- ssh-sshgen -t rsa -b 2048\n- ssh-copy-id username@IP\n\n##### SCP\n- scp -P user@服务器IP:绝对路径 客户机文件    \n\n##### SFTP\n- sftp -oPort user@IP\n- 使用help查看使用\n\n","slug":"Linux命令","published":1,"updated":"2019-08-29T06:34:51.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzxd8pt6002fagtn4cuzcwjd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><blockquote>\n<p>命令名 [选项] [参数]</p>\n</blockquote>\n<ul>\n<li>中括号“[]”代表可选。</li>\n<li>选项可以使以减号“-”开头的缩写，还可以是以双减号“–”开头的英文全称，可以多个选项联合使用。</li>\n<li>参数可以使0个、1个、多个。</li>\n</ul>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><h5 id=\"帮助\"><a href=\"#帮助\" class=\"headerlink\" title=\"帮助\"></a>帮助</h5><blockquote>\n<p><code>man 命令名</code>：用来查看指定命令名的帮助，该命令也可以查看配置文件的帮助。</p>\n</blockquote>\n<blockquote>\n<p><code>命令名 --help</code>：用来查看命令选项的帮助。</p>\n</blockquote>\n<blockquote>\n<p><code>whereis 命令名</code>：可以查找命令的所在目录及该命令帮助的所在目录。</p>\n</blockquote>\n<h5 id=\"清屏\"><a href=\"#清屏\" class=\"headerlink\" title=\"清屏\"></a>清屏</h5><blockquote>\n<p><code>ctrl+l</code>或者<code>clear</code>：清屏。<br><code>ctrl+u</code>和<code>ctrl+y</code>：剪切和粘贴命令</p>\n</blockquote>\n<h5 id=\"vi-vim编辑器\"><a href=\"#vi-vim编辑器\" class=\"headerlink\" title=\"vi/vim编辑器\"></a>vi/vim编辑器</h5><blockquote>\n<p><code>vi 文件</code>：创建或打开一个文件。</p>\n</blockquote>\n<blockquote>\n<p>命令行模式（一般模式）：使用vi刚刚打开文件的模式。<br>常用命令</p>\n</blockquote>\n<ul>\n<li><code>gg</code>、<code>G</code>、<code>nG</code>、<code>0</code>、<code>$</code>：移动光标都第一行、最后一行、第n行、当前行行首、当前行行尾。</li>\n<li><code>x</code>、<code>D</code>、<code>dd</code>、<code>ndd</code>、<code>dG</code>：删除当前光标处、剪切光标到行尾、当前行、当前行开始的n行、当前行到最后一行的内容。</li>\n<li><code>yy</code>、<code>nyy</code>、<code>p</code>、<code>P</code>、<code>r</code>、<code>R</code>、：复制当前行、当前行开始的n行、粘贴到光标下一行、上一行、替换当前光标的字符、光标出开始替换直到ESC结束。</li>\n<li><code>u</code>：撤销上一次操作。</li>\n<li><code>ZZ</code>：退出vi。</li>\n</ul>\n<blockquote>\n<p>插入模式（编辑模式）：从命令行模式输入<code>aioAIO</code>中任意一个进入的模式，使用<code>ESC</code>退出。</p>\n</blockquote>\n<blockquote>\n<p>底行模式（冒号模式）：从命令行模式输入<code>:</code>进入模式。<br>常用命令</p>\n</blockquote>\n<ul>\n<li><code>set nu(set nonu)</code>：设置显示或取消行号。</li>\n<li><code>linenumber</code>：移动光标到指定的linenumber行。</li>\n<li><code>/keyword（？keyword）</code>：按关键词从光标处向下查找或向上查找。</li>\n<li><code>set ic(set noic)</code>：设置忽略或区分大小写。</li>\n<li><code>n1,n2d</code>：删除n1行到n2行之间的内容。</li>\n<li><code>%s/old/new/g</code>：使用新串全文替换旧串。</li>\n<li><code>n1,n2s/old/new/g</code>：使用新串在指定行间进行替换旧串。</li>\n<li><code>w</code>、<code>w 目录</code>、<code>wq</code>、<code>q!</code>、<code>wq!</code>：保存、另存、保存退出、不保存退出、强制保存退出。</li>\n</ul>\n<blockquote>\n<p>小技巧</p>\n</blockquote>\n<ul>\n<li><code>:map 快捷键 操作</code>：自定义快捷键，如 :map ^p I#<esc> 。</esc></li>\n<li><code>:ab 缩写 原意</code>：为全称定义一个缩写名字，然后使用缩写名字+空格即可完成全名的输入。</li>\n<li><code>~/.vimrc</code>：可以在此文件中定义底行模式的命令使其永久生效。</li>\n</ul>\n<h5 id=\"定义别名\"><a href=\"#定义别名\" class=\"headerlink\" title=\"定义别名\"></a>定义别名</h5><ul>\n<li><code>alias 别名 命令</code>：为命令定义一个临时别名。</li>\n<li><code>~/.bashrc</code>：编辑该文件可以永久定义别名。</li>\n</ul>\n<h5 id=\"目录与文件命令\"><a href=\"#目录与文件命令\" class=\"headerlink\" title=\"目录与文件命令\"></a>目录与文件命令</h5><blockquote>\n<p><code>ls [选项] [目录或者文件]</code>：查看目录或文件的内容或属性。<br>常用选项-alh</p>\n</blockquote>\n<ul>\n<li>-a：显示隐藏文件。</li>\n<li>-l：长列表显示。</li>\n<li>-h：人性化显示。</li>\n<li>-i：显示i节点信息。</li>\n<li>可以使用通配符(*、?)或者正则匹配([]、[-]、[^]…)。</li>\n</ul>\n<blockquote>\n<p><code>tree [目录]</code>：列出指定目录的树状结构并统计目录和文件数量。</p>\n</blockquote>\n<blockquote>\n<p><code>pwd</code>；查看当前工作目录的绝对路径。</p>\n</blockquote>\n<blockquote>\n<p><code>cd [目录]</code>：切换目录。   </p>\n</blockquote>\n<ul>\n<li>cd ~或者cd：切换到家目录。</li>\n<li>cd ..：切换到上一级目录。</li>\n</ul>\n<blockquote>\n<p><code>mkdir [选项] 目录</code>：创建目录。<br>常用选项-pm</p>\n</blockquote>\n<ul>\n<li>-p：创建多级目录。</li>\n<li>-m: 使用数字表示法指定目录的权限。</li>\n</ul>\n<blockquote>\n<p><code>cp [选项] 目录或文件 目标目录</code>：复制目录或文件到已存在的目标目录或。<br>常用选项-ri</p>\n</blockquote>\n<ul>\n<li>-r：递归复制目录内容。</li>\n<li>-i：如果遇到同名文件会提示是否覆盖。</li>\n</ul>\n<blockquote>\n<p><code>mv [选项] 目录或文件 目标目录</code>：剪切目录或文件到已存在的目标目录或者执行改名操作。<br>常用选项-if</p>\n</blockquote>\n<ul>\n<li>-f：如果遇到同名文件不会提示是否覆盖。</li>\n<li>-i：–interactive。如果遇到同名文件会提示是否覆盖.</li>\n</ul>\n<blockquote>\n<p><code>rm [选项] 目录或者文件</code>：删除一个目录或者文件。<br>常用选项-rf</p>\n</blockquote>\n<ul>\n<li>-r：递归删除目录及目录下的所有内容。</li>\n<li>-f：–force，不在有提示信息强制删除。</li>\n</ul>\n<blockquote>\n<p><code>touch 文件</code>：创建一个新的空白文件或者是更新一下已存在文件的修改时间。</p>\n</blockquote>\n<blockquote>\n<p><code>ln -s 目录或文件 软链接文件</code>：为一个文件或目录创建一个软链接，类似于快捷方式，软连接文件的权限是777.</p>\n</blockquote>\n<h5 id=\"查看文件内容命令\"><a href=\"#查看文件内容命令\" class=\"headerlink\" title=\"查看文件内容命令\"></a>查看文件内容命令</h5><blockquote>\n<p><code>cat [选项] 文件</code>：使用与浏览内容较少的文件。<br>常用选项-bn</p>\n</blockquote>\n<ul>\n<li>-b：–number-nonblank，行号只标记有效行(即非空白行)。</li>\n<li>-n：–number，带行号显示，不挑剔。</li>\n</ul>\n<blockquote>\n<p><code>more 文件</code>：可以分页查看文件内容。<br>辅助命令f、b、enter、q</p>\n</blockquote>\n<ul>\n<li>b：上一页。</li>\n<li>f：下一页，也可以使用空格键。</li>\n<li>enter：下一行。</li>\n<li>q：退出。</li>\n</ul>\n<blockquote>\n<p><code>less [选项] 文件</code>：同样是分页查看文件内容，但是可以带行号，还能搜索。<br>常用选项MN</p>\n</blockquote>\n<ul>\n<li>-M：使用后类似于more的百分比。</li>\n<li>-N：带行号显示。</li>\n<li>辅助命令同more，可以使用“/keyword”进行搜索。</li>\n</ul>\n<blockquote>\n<p><code>head [-n 数字] 文件</code>；显示到指定行号的文件内容，默认显示前10行。</p>\n</blockquote>\n<blockquote>\n<p><code>tail [选项] 文件</code>；从尾部开始显示文件内容，默认显示后10行。<br>常用选项-nf</p>\n</blockquote>\n<ul>\n<li>-n 数字：显示指定的后几行。</li>\n<li>-f：–follow，跟踪显示文件的变化，常用来查看日志。</li>\n</ul>\n<h5 id=\"输出重定向与管道命令、历史命令\"><a href=\"#输出重定向与管道命令、历史命令\" class=\"headerlink\" title=\"输出重定向与管道命令、历史命令\"></a>输出重定向与管道命令、历史命令</h5><blockquote>\n<p><code>&gt; 文件</code>:将一个到终端的输出重定向到文件中，即向文件中覆盖内容。<br><code>&gt;&gt; 文件</code>：同样是重定向到终端的输出，追加到文件的末尾。<br><code>&amp;&gt;&gt; 文件</code>：将错误和正确结果都追加到文件末尾。</p>\n</blockquote>\n<blockquote>\n<p><code>命令A | 命令B</code>：将命令A的输出结果通过管道符作为命令B的输入参数，可以通过管道符“|”执行多个命令。</p>\n</blockquote>\n<blockquote>\n<p><code>ehco 字符串</code>：输入指定内容到终端，相当于编程语言中的打印。</p>\n</blockquote>\n<blockquote>\n<p><code>history [数量]</code>：可以查看历史命令列表或者查看指定数量的历史命令列表，之后可以使用“!历史命令编号”来执行指定命令。<br><code>~/.bash_history</code>：历史命令保存在该文件中，默认保存上限可以在profile中修改。</p>\n</blockquote>\n<h5 id=\"查找命令\"><a href=\"#查找命令\" class=\"headerlink\" title=\"查找命令\"></a>查找命令</h5><blockquote>\n<p><code>find 目录 搜索条件</code>：在指定目录范围内根据指定条件查找指定的内容。<br>常用选项</p>\n</blockquote>\n<ul>\n<li>-name：按名称查找，可以使用通配符或者正则。</li>\n<li>-size：按大小查找，如-size +200K（大于200K的）、size -10M（小于10M的）。</li>\n<li>-user：按用户名查找。</li>\n<li>-type：按文件类型查找。如-type “d”、-type “-“。</li>\n<li>-mtime：按文件的最后修改时间查找，该时间单位是天，如-mtime +10（最后修改时间距现在10天以上的）。</li>\n<li>可以使用“-a”或者“-o”进行条件的拼接，前者表示and，后者表示or。</li>\n<li>可以使用“-exec”选项来对查找的结果进行处理，如find /etc -name init -exec ls -l <code>{} \\;</code>,着重部分是固定格式。</li>\n</ul>\n<blockquote>\n<p><code>locate [-i] 要查找的内容</code>：快速查找或者忽略大小写查找。<br>说明</p>\n</blockquote>\n<ul>\n<li>可能系统为安装该命令，需要执行yum -y install mlocate。</li>\n<li>每次使用前最好执行updatedb命令更新locate检索库。</li>\n</ul>\n<blockquote>\n<p><code>grep [选项] 字串 文件或者是命令的输出结果</code>：从指定的文件或者一个命令输出结果中过滤查找需要的内容。<br>常用选项-ivn</p>\n</blockquote>\n<ul>\n<li>-i：忽略大小写查找。</li>\n<li>-v：排除指定字串查找。</li>\n<li>-n:查找结果带行号显示。</li>\n<li>字串可以使用通配符或者正则，如*、？、^、$。</li>\n</ul>\n<h5 id=\"时间日期命令\"><a href=\"#时间日期命令\" class=\"headerlink\" title=\"时间日期命令\"></a>时间日期命令</h5><blockquote>\n<p><code>date [-s] [+时间格式</code>：按指定格式设置或显示系统时间。<br>格式说明：%Y表示年份、%m表示月份、%d表示天、%H表示0-23的小时、%M表示分钟、%S表示秒。</p>\n</blockquote>\n<blockquote>\n<p><code>cal [年份]</code>：查看当前时间的日历或者查看指定年份的日历。</p>\n</blockquote>\n<blockquote>\n<p><code>ntpq -p</code>：与NTP服务器进行时间同步，CentOS7请使用<code>chronyc sources</code>命令。</p>\n</blockquote>\n<blockquote>\n<p><code>/etc/sysconfig/clock</code>：配置时区，CentOS7使用<code>tiemdatectl set-timezone Asia/Shanghai</code>命令。</p>\n</blockquote>\n<blockquote>\n<p><code>/etc/sysconfig/i18n</code>：配置语言环境，CentOS7使用<code>localectl set-locale LANG=zh_CN.UTF-8</code>命令。</p>\n</blockquote>\n<h5 id=\"文件压缩和解压缩命令\"><a href=\"#文件压缩和解压缩命令\" class=\"headerlink\" title=\"文件压缩和解压缩命令\"></a>文件压缩和解压缩命令</h5><blockquote>\n<p><code>gzip 文件</code>和<code>gunzip 文件</code>：以gzip格式压缩和解压文件，只能压缩文件且不会保留原文件。</p>\n</blockquote>\n<blockquote>\n<p><code>zip [-r] 文件或目录 压缩后的文件 要压缩的文件</code>：以zip格式压缩目录或文件。<br><code>unzip [-d 目录] 要解压的文件</code>：以zip格式解压文件到当前目录或指定目录。</p>\n</blockquote>\n<blockquote>\n<p><code>tar [-zcvf] 要压缩打包的目录或文件</code>：以gzip压缩并使用tar进行打包指定文件。<br><code>tar [-zxvf] 要解压的文件 [-C 目标目录]</code>：解压.tar.bz2文件到当前目录或指定的已存在的目录。</p>\n</blockquote>\n<blockquote>\n<p><code>tar [-jcvf] 要压缩打包的目录或文件</code>：以bzip2压缩并打包指定文件。<br><code>tar [-jxvf] 要解压的文件 [-C 目标目录]</code>：解压.tar.bz2文件到当前目录或指定目录。</p>\n</blockquote>\n<h5 id=\"网络与服务命令\"><a href=\"#网络与服务命令\" class=\"headerlink\" title=\"网络与服务命令\"></a>网络与服务命令</h5><blockquote>\n<p><code>ipconfig</code>或者<code>ip addr</code>：查看网卡信息，后者是CentOS7上或者Ubuntu18上使用。</p>\n</blockquote>\n<blockquote>\n<p><code>ping IP地址</code>：测试与目标IP地址的连通性。</p>\n</blockquote>\n<blockquote>\n<p><code>netstat -rn</code>：可以查看路由列表。<br><code>netstat -tulnp</code>或者<code>netstat -anp</code>：查看进程的网络连接状态。<br>选项说明：r表示路由、n表示IP地址和端口号、t表示tcp连接、u表示udp连接、l表示监听状态、p表示PID和应用、a表示全部。</p>\n</blockquote>\n<blockquote>\n<p>如何配置静态IP地址</p>\n</blockquote>\n<ul>\n<li>CentOS中配置方式：修改 /etc/sysconfig/network-scripts/ifcfg-eth0(或者ens33)配置文件，修改内容类似下面。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改部分</span><br><span class=\"line\">BOOTPROTO=&quot;static&quot; # 设置使用静态IP协议</span><br><span class=\"line\">ONBOOT=&quot;yes&quot;  # 设置开机启动网络服务</span><br><span class=\"line\"># 添加部分</span><br><span class=\"line\">DNS1=&quot;114.114.114.114&quot; #设置DNS1</span><br><span class=\"line\">DNS2=&quot;8.8.8.8&quot;</span><br><span class=\"line\">GATEWAY=&quot;192.168.124.2&quot; # 设置网关</span><br><span class=\"line\">IPADDR=&quot;192.168.124.124&quot;  # 设置IP地址</span><br><span class=\"line\">NETMASK=&quot;255.255.255.0&quot;  # 设置子网掩码</span><br><span class=\"line\"></span><br><span class=\"line\"># 重启网络服务CentOS6.x：network，CentOS7.x:NetworkManager</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Ubuntu18中配置方式：修改/etc/netplan/01-network-manager-all.yaml配置文件，修改内容类似下面。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">network:</span><br><span class=\"line\">　version: 2</span><br><span class=\"line\">    renderer: NetworkManager</span><br><span class=\"line\">    ethernets:</span><br><span class=\"line\">　　ens33:</span><br><span class=\"line\">　　dhcp4: no #关闭动态主机配置协议</span><br><span class=\"line\">　　addresses: [192.168.124.125/24] #设置IP地址，24表示24位的子网掩码(即255.255.255.0)</span><br><span class=\"line\">　　gateway4: 192.168.124.2 #设置网关</span><br><span class=\"line\">　　nameservers:</span><br><span class=\"line\">　　　　addresses: [8.8.8.8, 114.114.114.114] #设置DNS</span><br><span class=\"line\"></span><br><span class=\"line\"># Ubuntu18中重启方式：sudo netplan apply</span><br></pre></td></tr></table></figure>\n\n<p>-</p>\n<blockquote>\n<p><code>ls /etc/init.d</code>：可以系统中通过rpm安装的独立服务列表。</p>\n</blockquote>\n<blockquote>\n<p>服务管理</p>\n</blockquote>\n<ul>\n<li><code>/etc/init.d/服务名 stop|start|restart|status</code>:对某个服务停止、启动、重启，查看状态。</li>\n<li><code>service 服务名 stop|start|restart|status</code>。</li>\n<li><code>systemctl stop|start|restart|reload|status 服务名</code>。（CentOS7的管理方式）</li>\n<li><code>service --status-all</code>；查看所有的服务状态。CentIS7使用<code>systemctl list-units</code>。</li>\n</ul>\n<blockquote>\n<p>自启动管理</p>\n</blockquote>\n<ul>\n<li><code>chkconfig --list [| grep xxx]</code> : 查看所有服务或者具体服务在各个运行级别的状态。    </li>\n<li><code>chkconfig [--level runlevel] 服务名 on/off</code>：设置服务在所有级别或指定级别的开启自启与关闭。   </li>\n<li><code>systemctl enable/disable xxx.service</code>：同样可以设置开机自启与关闭，使用于CentOS7.</li>\n<li><code>systemctl list-unit-files</code>：查看所有的自启动状态。</li>\n</ul>\n<blockquote>\n<p>防火墙管理</p>\n</blockquote>\n<ul>\n<li><code>/etc/init.d/iptables</code>：配置该文件可放开端口。</li>\n<li><code>firewall-cmd --zone=public [--remove-port|--query-port|--add-port]=80/tcp --permanent</code>：CentOS7的方式。</li>\n<li><code>firewall-cmd --reload</code>：重启防火墙。</li>\n<li><code>firewall-cmd --zone=public --list-ports</code>：查看防火墙列表。</li>\n</ul>\n<h5 id=\"系统运行级别管理命令\"><a href=\"#系统运行级别管理命令\" class=\"headerlink\" title=\"系统运行级别管理命令\"></a>系统运行级别管理命令</h5><blockquote>\n<p>系统运行级别分为六大类（括号内的表示在CentOS7中的标识）。</p>\n</blockquote>\n<ul>\n<li>0：表示关机。 （poweroff.target）。</li>\n<li>1：表示单用户模式 （emergency.target）。</li>\n<li>2：表示多用户无网络模式 （rescure.target）。</li>\n<li>3：表示多用户有网络模式 （multi-user.target）。</li>\n<li>4：表示保留级别，未被使用。（无）</li>\n<li>5：表示图形界面模式 （graphical.target）。</li>\n<li>6：表示重启 （reboot.target）。</li>\n<li>CentOS7中的这些名称可以通过<code>ll /lib/systemd/system/runlevel*</code>查到。</li>\n</ul>\n<blockquote>\n<p><code>runlevel</code>：能够查看系统之前和当前的运行级别。<br><code>vi /etc/inittab</code>；通过该配置文件也可以查到系统运行级别。<br><code>systemctl get-default</code>；在CentOS7中可以通过该命令查看当前运行级别。</p>\n</blockquote>\n<blockquote>\n<p><code>init 级别ID</code>；可以切换运行级别。<br><code>vi /etc/inittab</code>：在该文件中配置默认运行级别。<br><code>systemctl set-default xxx.target</code>：CentOS7的配置默认运行级别的方式。</p>\n</blockquote>\n<h5 id=\"进程管理命令\"><a href=\"#进程管理命令\" class=\"headerlink\" title=\"进程管理命令\"></a>进程管理命令</h5><blockquote>\n<p><code>ps aux</code>与<code>ps au</code>：查看当前系统进程的详细信息，一般使用后者即可，表示只显示终端上的进程。<br><code>ps -ef</code>：同样能查看当前系统进程信息，还能查到父进程的PID。<br><code>pstree [选项]</code>：查看系统进程树。<br>常用选项：</p>\n</blockquote>\n<ul>\n<li>-p：查看指定PID的进程。</li>\n<li>-u：查看指定用户名的进程。    </li>\n</ul>\n<blockquote>\n<p><code>top</code>：动态实时的显示系统进程并排序，还可以监控系统的健康状态。</p>\n</blockquote>\n<blockquote>\n<p><code>kill -1 PID</code>：重启指定PID的进程。<br><code>kill [-9] PID</code>：结束或强制结束指定PID的进程。<br><code>killall 进程名</code>：结束与指定进程相关的所有进程。<br><code>pkill</code> : 可以用来踢出指定终端的用户</p>\n</blockquote>\n<h5 id=\"用户和组管理命令\"><a href=\"#用户和组管理命令\" class=\"headerlink\" title=\"用户和组管理命令\"></a>用户和组管理命令</h5><blockquote>\n<p>相关配置文件分别是<code>/etc/passwd</code>、<code>/etc/shadow</code>、<code>/etc/group</code>、<code>/etc/gshadow</code>。</p>\n</blockquote>\n<ul>\n<li>/etc/passwd：分别表示用户名、标识口令、UID、初始GID、备注、家目录、登录Shell。</li>\n<li>/etc/shadow：分别表示用户名、加密口令、最新修改日期、下次可修改间隔、有效期限、提前警告天数、过期可用天数、截止日期、保留。</li>\n<li>/etc/group：分别表示组名称、标识口令、组ID、组用户列表。</li>\n<li>/etc/gshadow：分别表示组名称、加密口令、组管理者列表、组用户列表。</li>\n</ul>\n<blockquote>\n<p><code>useradd [选项] 用户名</code>：添加新用户。<br>常用选项</p>\n</blockquote>\n<ul>\n<li>-g：添加到初始组，一个用户只能有一个初始组（也称之为主组）。</li>\n<li>-G：添加到附加组，一个用户可以有多个附加组（也就是组配置文件中用户列表中所对应的组）。</li>\n<li>-d：指定家目录的位置。</li>\n<li>-u：指定UID，普通用户的UID都是500之后的数字，超级用户的UID是0。</li>\n<li>-s：设置使用的登录shell类型</li>\n<li>-r：–system ，创建一个系统账号，这样的账号不会再/home下创建家目录。</li>\n<li>-m：–creat-home，设置要在/home下创建家目录。</li>\n<li>-M：–no-create-home ，设置不创用户的家目录。</li>\n</ul>\n<blockquote>\n<p><code>passwd 用户名</code>：为指定用户设置口令。</p>\n</blockquote>\n<blockquote>\n<p><code>userdel [-r] 用户名</code>：删除指定用户或者同时删除家目录。<br><code>usermod [选项] 用户名</code>：可以修改用户信息，选项同新增用户选项。</p>\n</blockquote>\n<blockquote>\n<p><code>id [用户名]</code>；查看用户的UID和GID信息。<br><code>who</code>或者<code>w</code>；查看所有登录用户的详细信息。<br><code>whoami</code>：查看当前用户名称。</p>\n</blockquote>\n<blockquote>\n<p><code>su [-] 用户名</code>：切换到指定目录。<br>可以不用切换root用户，而使用<code>sudo</code>来管理系统。</p>\n</blockquote>\n<blockquote>\n<p><code>groupadd 组名</code>、<code>groupdel 组名</code>、<code>groupmod 组名</code>。</p>\n</blockquote>\n<h5 id=\"文件权限管理命令\"><a href=\"#文件权限管理命令\" class=\"headerlink\" title=\"文件权限管理命令\"></a>文件权限管理命令</h5><blockquote>\n<p>使用<code>ls -l</code>可以查看文件或目录的详细信息。     </p>\n</blockquote>\n<ul>\n<li>这些信息分别表示文件类型和ugo权限、硬链接数(可访问方式的数量)、所有者、所属组、文件大小、最后修改时间、文件名（即basename）。</li>\n<li>文件的rwx：表示可查看、修改文件内容、可执行该文件。</li>\n<li>目录的rwx：表示可查看、在目录中创建目录文件或修改目录内容、可进入该目录。</li>\n</ul>\n<blockquote>\n<p><code>chmod [-R] {[ugoa]+/-/=[rwx]} 目录或文件</code>：修改(添加、减少、设置)所有者或所属组或其他用户或所有用户对指定目录或文件的读写执行权限。<br><code>chmod [-R] [rwx=421] 目录或文件</code>：使用数字表示法设置目录或文件的权限，如chmod 755 temp.sh。</p>\n</blockquote>\n<blockquote>\n<p><code>chown [-R] 用户名  目录或文件</code>：变更目录或文件的所有者为指定用户。<br><code>chgrp [-R] 组名 目录或文件</code>： 变变目录或文件的所属组为指定组。<br><code>chown [-R] 用户名:组名 目录或文件</code>：同时变更目录或文件的所有者和所属组。</p>\n</blockquote>\n<h5 id=\"磁盘管理命令\"><a href=\"#磁盘管理命令\" class=\"headerlink\" title=\"磁盘管理命令\"></a>磁盘管理命令</h5><blockquote>\n<p><code>lsblk [-f]</code>：查看分区和挂载信息,-f,–fs。   使用<code>fdisk -l</code>也能查看。<br><code>df [-lha]</code>：查看整个磁盘的使用情况,-l,–local。<br><code>du [-ach --max-depth=0开始的数字]  [目录或文件]</code>：查看指定目录或目录所有内容的磁盘使用情况并统计，还能灵活的指定目深度。<br><code>du -sh 目录</code></p>\n</blockquote>\n<blockquote>\n<p><code>mount</code>：查看系统中挂载哪些分区。<br><code>mount /dev/sr0 /mnt/cdrom</code>：挂载光驱设备到/mnt/cdrom。<br><code>mount -t vfat /dev/sdb1 /mnt/usb</code>：挂载一个fat32格式的U盘，U盘的设备名称也是以“sd”开头的。<br>Linux默认不支持NTFS格式的U盘，需要安装ntfs-3g软件包才能正常使用。    </p>\n</blockquote>\n<blockquote>\n<p>如何为系统添加一块新硬盘(以第二块硬盘sdb为例)。</p>\n</blockquote>\n<ul>\n<li>分区分为MBR(主引导记录)和GPT(GUID分区表)两大类，前者主分区最多4个，支持硬盘容量有限；后者主分区无上限，支持容量达18EB，可能受操作系统限制。</li>\n<li>对于SCSI(小型机系统接口)或SATA(串行高级技术附件)硬盘在Linux文件系统中都是保存在/dev下的以’sd’开头的目录中。</li>\n<li>准备好要添加的硬盘。</li>\n<li><code>fdisk /dev/sdb</code>：为sdb硬盘进行分区。</li>\n<li><code>mkfs /dev/sdb</code>：格式化sdb硬盘，根据提示进行，格式化进行将文件系统写入硬盘。</li>\n<li><code>mkdir /mnt/newdisk</code>：创建挂载点。</li>\n<li><code>mount /dev/sdb /mnt/newdisk</code>：执行临时挂载操作，当然也可通过<code>unount</code>进行卸载。</li>\n<li><code>vi /etc/fstab</code>：修改配置文件以便使挂载永久生效。</li>\n<li><code>mount -a</code>：根据/etc/fstab的配置重新进行挂载。</li>\n</ul>\n<h5 id=\"定时调度命令\"><a href=\"#定时调度命令\" class=\"headerlink\" title=\"定时调度命令\"></a>定时调度命令</h5><blockquote>\n<p><code>crontab -e</code>：打开定时调度配置文件进行编辑</p>\n</blockquote>\n<ul>\n<li>从左到右五个时间符号分别表示：分钟、小时、日、月、星期。</li>\n<li>“*”表示任意时间，“*/n”表示每隔多长时间，“-”表示一段时间，“，”表示几个时间点。    </li>\n</ul>\n<blockquote>\n<p><code>crontab -l</code>：查看有定时任务列表。<br><code>crontab -r</code>：删除所有定时任务。</p>\n</blockquote>\n<h5 id=\"软件包管理命令\"><a href=\"#软件包管理命令\" class=\"headerlink\" title=\"软件包管理命令\"></a>软件包管理命令</h5><blockquote>\n<p>rpm管理   </p>\n</blockquote>\n<ul>\n<li><code>rpm -qa 包名</code>：查询指定rpm包的安装情况。   </li>\n<li><code>rpm -ql 包名</code>:查询指定rpm包的安装位置。    </li>\n<li><code>rpm -qR 包名</code>:查询指定rpm包的依赖信息。   </li>\n<li><code>rpm -qf 目录</code>：查询指定目录下安装的rpm包列表。</li>\n<li><code>rpm -ivh 包全名</code>；安装指定rpm包，显示安装详情和安装进度。</li>\n<li><code>rpm -e [--nodeps] 包名</code>：卸载或者强制卸载指定rpm包。</li>\n<li><code>rpm -Uvh 包名</code>：升级安装包。</li>\n</ul>\n<blockquote>\n<p>yum管理</p>\n</blockquote>\n<ul>\n<li><code>yum [-y] list</code>：查询安装列表。</li>\n<li><code>yum [-y] install 包名</code>：安装。</li>\n<li><code>yum [-y] remove 包名</code> ：卸载。</li>\n<li><code>yum [-y] update 包名</code>：升级。</li>\n<li><code>yum [-y] grouplist</code>：查询软件组列表。</li>\n<li><code>yum [-y] groupinstall 软件组名</code>、<code>yum [-y] removegroup软件组名</code>。</li>\n<li>可以更新yum源：位置在<code>/etc/yum.repos.d/</code>目录下。</li>\n</ul>\n<blockquote>\n<p>Ubuntu apt管理</p>\n</blockquote>\n<ul>\n<li><code>sudo apt-get update</code>：修改软件源之后可以使用该命令重新加载软件源。</li>\n<li>源更新方式可以去tuna上找：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/</a> 。</li>\n<li><code>sudo apt-get install 包名</code>：安装包。</li>\n<li><code>sudo apt-get remove 包名</code>：卸载包。</li>\n<li><code>sudo apt-get upgrade 包名</code>：更新已安装的包。</li>\n<li><code>sudo apt-cache show 包名</code>：获取包的相关信息。</li>\n<li><code>sudo apt-get source 包名</code>：下载该包的源代码。</li>\n</ul>\n<h5 id=\"关机和重启命令\"><a href=\"#关机和重启命令\" class=\"headerlink\" title=\"关机和重启命令\"></a>关机和重启命令</h5><blockquote>\n<p><code>shutdown -r time</code>：指定时间重启，默认是1分钟。<code>shutdown -r now</code>等价于<code>reboot</code>。<br><code>shutdown -h time</code> ：指定时间关机。<code>shutdown -h now</code>等价于<code>halt</code>。<br><code>shutdown -c</code>；取消上一个shutdown命令。<br><code>sync</code>：同步命令，同步数据到磁盘。</p>\n</blockquote>\n<h5 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h5><blockquote>\n<p><code>hostname</code>：查看主机名。<br><code>uname -a</code>：查看内核版本详情。<br><code>/proc/cpuinfo</code>；查看cpu信息。<br><code>free -m</code>：以MB单位查看内存信息。<br><code>/etc/issue</code>：查看查看发行版本。   </p>\n</blockquote>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><blockquote>\n<p>windows上使用公私密钥对登录  </p>\n</blockquote>\n<ul>\n<li>创建一组密钥对并保存好私钥。</li>\n<li>将公钥内容导入到指定用户的家目录的.ssh目录下的authorized_keys文件中。</li>\n<li>禁用密码登录 vi /etc/ssh/sshd_config 设置密码认证为no。</li>\n<li>service sshd restart</li>\n<li>禁用root登录：vi /etc/ssh/sshd_config -&gt; PermitRootLogin no</li>\n<li>改掉ssh端口：vi /etc/ssh/sshd_config -&gt; Port=xxx</li>\n</ul>\n<blockquote>\n<p>Linux上使用ssh</p>\n</blockquote>\n<ul>\n<li>ssh -p username@IP</li>\n<li>ssh-sshgen -t rsa -b 2048</li>\n<li>ssh-copy-id username@IP</li>\n</ul>\n<h5 id=\"SCP\"><a href=\"#SCP\" class=\"headerlink\" title=\"SCP\"></a>SCP</h5><ul>\n<li>scp -P user@服务器IP:绝对路径 客户机文件    </li>\n</ul>\n<h5 id=\"SFTP\"><a href=\"#SFTP\" class=\"headerlink\" title=\"SFTP\"></a>SFTP</h5><ul>\n<li>sftp -oPort user@IP</li>\n<li>使用help查看使用</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><blockquote>\n<p>命令名 [选项] [参数]</p>\n</blockquote>\n<ul>\n<li>中括号“[]”代表可选。</li>\n<li>选项可以使以减号“-”开头的缩写，还可以是以双减号“–”开头的英文全称，可以多个选项联合使用。</li>\n<li>参数可以使0个、1个、多个。</li>\n</ul>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><h5 id=\"帮助\"><a href=\"#帮助\" class=\"headerlink\" title=\"帮助\"></a>帮助</h5><blockquote>\n<p><code>man 命令名</code>：用来查看指定命令名的帮助，该命令也可以查看配置文件的帮助。</p>\n</blockquote>\n<blockquote>\n<p><code>命令名 --help</code>：用来查看命令选项的帮助。</p>\n</blockquote>\n<blockquote>\n<p><code>whereis 命令名</code>：可以查找命令的所在目录及该命令帮助的所在目录。</p>\n</blockquote>\n<h5 id=\"清屏\"><a href=\"#清屏\" class=\"headerlink\" title=\"清屏\"></a>清屏</h5><blockquote>\n<p><code>ctrl+l</code>或者<code>clear</code>：清屏。<br><code>ctrl+u</code>和<code>ctrl+y</code>：剪切和粘贴命令</p>\n</blockquote>\n<h5 id=\"vi-vim编辑器\"><a href=\"#vi-vim编辑器\" class=\"headerlink\" title=\"vi/vim编辑器\"></a>vi/vim编辑器</h5><blockquote>\n<p><code>vi 文件</code>：创建或打开一个文件。</p>\n</blockquote>\n<blockquote>\n<p>命令行模式（一般模式）：使用vi刚刚打开文件的模式。<br>常用命令</p>\n</blockquote>\n<ul>\n<li><code>gg</code>、<code>G</code>、<code>nG</code>、<code>0</code>、<code>$</code>：移动光标都第一行、最后一行、第n行、当前行行首、当前行行尾。</li>\n<li><code>x</code>、<code>D</code>、<code>dd</code>、<code>ndd</code>、<code>dG</code>：删除当前光标处、剪切光标到行尾、当前行、当前行开始的n行、当前行到最后一行的内容。</li>\n<li><code>yy</code>、<code>nyy</code>、<code>p</code>、<code>P</code>、<code>r</code>、<code>R</code>、：复制当前行、当前行开始的n行、粘贴到光标下一行、上一行、替换当前光标的字符、光标出开始替换直到ESC结束。</li>\n<li><code>u</code>：撤销上一次操作。</li>\n<li><code>ZZ</code>：退出vi。</li>\n</ul>\n<blockquote>\n<p>插入模式（编辑模式）：从命令行模式输入<code>aioAIO</code>中任意一个进入的模式，使用<code>ESC</code>退出。</p>\n</blockquote>\n<blockquote>\n<p>底行模式（冒号模式）：从命令行模式输入<code>:</code>进入模式。<br>常用命令</p>\n</blockquote>\n<ul>\n<li><code>set nu(set nonu)</code>：设置显示或取消行号。</li>\n<li><code>linenumber</code>：移动光标到指定的linenumber行。</li>\n<li><code>/keyword（？keyword）</code>：按关键词从光标处向下查找或向上查找。</li>\n<li><code>set ic(set noic)</code>：设置忽略或区分大小写。</li>\n<li><code>n1,n2d</code>：删除n1行到n2行之间的内容。</li>\n<li><code>%s/old/new/g</code>：使用新串全文替换旧串。</li>\n<li><code>n1,n2s/old/new/g</code>：使用新串在指定行间进行替换旧串。</li>\n<li><code>w</code>、<code>w 目录</code>、<code>wq</code>、<code>q!</code>、<code>wq!</code>：保存、另存、保存退出、不保存退出、强制保存退出。</li>\n</ul>\n<blockquote>\n<p>小技巧</p>\n</blockquote>\n<ul>\n<li><code>:map 快捷键 操作</code>：自定义快捷键，如 :map ^p I#<esc> 。</esc></li>\n<li><code>:ab 缩写 原意</code>：为全称定义一个缩写名字，然后使用缩写名字+空格即可完成全名的输入。</li>\n<li><code>~/.vimrc</code>：可以在此文件中定义底行模式的命令使其永久生效。</li>\n</ul>\n<h5 id=\"定义别名\"><a href=\"#定义别名\" class=\"headerlink\" title=\"定义别名\"></a>定义别名</h5><ul>\n<li><code>alias 别名 命令</code>：为命令定义一个临时别名。</li>\n<li><code>~/.bashrc</code>：编辑该文件可以永久定义别名。</li>\n</ul>\n<h5 id=\"目录与文件命令\"><a href=\"#目录与文件命令\" class=\"headerlink\" title=\"目录与文件命令\"></a>目录与文件命令</h5><blockquote>\n<p><code>ls [选项] [目录或者文件]</code>：查看目录或文件的内容或属性。<br>常用选项-alh</p>\n</blockquote>\n<ul>\n<li>-a：显示隐藏文件。</li>\n<li>-l：长列表显示。</li>\n<li>-h：人性化显示。</li>\n<li>-i：显示i节点信息。</li>\n<li>可以使用通配符(*、?)或者正则匹配([]、[-]、[^]…)。</li>\n</ul>\n<blockquote>\n<p><code>tree [目录]</code>：列出指定目录的树状结构并统计目录和文件数量。</p>\n</blockquote>\n<blockquote>\n<p><code>pwd</code>；查看当前工作目录的绝对路径。</p>\n</blockquote>\n<blockquote>\n<p><code>cd [目录]</code>：切换目录。   </p>\n</blockquote>\n<ul>\n<li>cd ~或者cd：切换到家目录。</li>\n<li>cd ..：切换到上一级目录。</li>\n</ul>\n<blockquote>\n<p><code>mkdir [选项] 目录</code>：创建目录。<br>常用选项-pm</p>\n</blockquote>\n<ul>\n<li>-p：创建多级目录。</li>\n<li>-m: 使用数字表示法指定目录的权限。</li>\n</ul>\n<blockquote>\n<p><code>cp [选项] 目录或文件 目标目录</code>：复制目录或文件到已存在的目标目录或。<br>常用选项-ri</p>\n</blockquote>\n<ul>\n<li>-r：递归复制目录内容。</li>\n<li>-i：如果遇到同名文件会提示是否覆盖。</li>\n</ul>\n<blockquote>\n<p><code>mv [选项] 目录或文件 目标目录</code>：剪切目录或文件到已存在的目标目录或者执行改名操作。<br>常用选项-if</p>\n</blockquote>\n<ul>\n<li>-f：如果遇到同名文件不会提示是否覆盖。</li>\n<li>-i：–interactive。如果遇到同名文件会提示是否覆盖.</li>\n</ul>\n<blockquote>\n<p><code>rm [选项] 目录或者文件</code>：删除一个目录或者文件。<br>常用选项-rf</p>\n</blockquote>\n<ul>\n<li>-r：递归删除目录及目录下的所有内容。</li>\n<li>-f：–force，不在有提示信息强制删除。</li>\n</ul>\n<blockquote>\n<p><code>touch 文件</code>：创建一个新的空白文件或者是更新一下已存在文件的修改时间。</p>\n</blockquote>\n<blockquote>\n<p><code>ln -s 目录或文件 软链接文件</code>：为一个文件或目录创建一个软链接，类似于快捷方式，软连接文件的权限是777.</p>\n</blockquote>\n<h5 id=\"查看文件内容命令\"><a href=\"#查看文件内容命令\" class=\"headerlink\" title=\"查看文件内容命令\"></a>查看文件内容命令</h5><blockquote>\n<p><code>cat [选项] 文件</code>：使用与浏览内容较少的文件。<br>常用选项-bn</p>\n</blockquote>\n<ul>\n<li>-b：–number-nonblank，行号只标记有效行(即非空白行)。</li>\n<li>-n：–number，带行号显示，不挑剔。</li>\n</ul>\n<blockquote>\n<p><code>more 文件</code>：可以分页查看文件内容。<br>辅助命令f、b、enter、q</p>\n</blockquote>\n<ul>\n<li>b：上一页。</li>\n<li>f：下一页，也可以使用空格键。</li>\n<li>enter：下一行。</li>\n<li>q：退出。</li>\n</ul>\n<blockquote>\n<p><code>less [选项] 文件</code>：同样是分页查看文件内容，但是可以带行号，还能搜索。<br>常用选项MN</p>\n</blockquote>\n<ul>\n<li>-M：使用后类似于more的百分比。</li>\n<li>-N：带行号显示。</li>\n<li>辅助命令同more，可以使用“/keyword”进行搜索。</li>\n</ul>\n<blockquote>\n<p><code>head [-n 数字] 文件</code>；显示到指定行号的文件内容，默认显示前10行。</p>\n</blockquote>\n<blockquote>\n<p><code>tail [选项] 文件</code>；从尾部开始显示文件内容，默认显示后10行。<br>常用选项-nf</p>\n</blockquote>\n<ul>\n<li>-n 数字：显示指定的后几行。</li>\n<li>-f：–follow，跟踪显示文件的变化，常用来查看日志。</li>\n</ul>\n<h5 id=\"输出重定向与管道命令、历史命令\"><a href=\"#输出重定向与管道命令、历史命令\" class=\"headerlink\" title=\"输出重定向与管道命令、历史命令\"></a>输出重定向与管道命令、历史命令</h5><blockquote>\n<p><code>&gt; 文件</code>:将一个到终端的输出重定向到文件中，即向文件中覆盖内容。<br><code>&gt;&gt; 文件</code>：同样是重定向到终端的输出，追加到文件的末尾。<br><code>&amp;&gt;&gt; 文件</code>：将错误和正确结果都追加到文件末尾。</p>\n</blockquote>\n<blockquote>\n<p><code>命令A | 命令B</code>：将命令A的输出结果通过管道符作为命令B的输入参数，可以通过管道符“|”执行多个命令。</p>\n</blockquote>\n<blockquote>\n<p><code>ehco 字符串</code>：输入指定内容到终端，相当于编程语言中的打印。</p>\n</blockquote>\n<blockquote>\n<p><code>history [数量]</code>：可以查看历史命令列表或者查看指定数量的历史命令列表，之后可以使用“!历史命令编号”来执行指定命令。<br><code>~/.bash_history</code>：历史命令保存在该文件中，默认保存上限可以在profile中修改。</p>\n</blockquote>\n<h5 id=\"查找命令\"><a href=\"#查找命令\" class=\"headerlink\" title=\"查找命令\"></a>查找命令</h5><blockquote>\n<p><code>find 目录 搜索条件</code>：在指定目录范围内根据指定条件查找指定的内容。<br>常用选项</p>\n</blockquote>\n<ul>\n<li>-name：按名称查找，可以使用通配符或者正则。</li>\n<li>-size：按大小查找，如-size +200K（大于200K的）、size -10M（小于10M的）。</li>\n<li>-user：按用户名查找。</li>\n<li>-type：按文件类型查找。如-type “d”、-type “-“。</li>\n<li>-mtime：按文件的最后修改时间查找，该时间单位是天，如-mtime +10（最后修改时间距现在10天以上的）。</li>\n<li>可以使用“-a”或者“-o”进行条件的拼接，前者表示and，后者表示or。</li>\n<li>可以使用“-exec”选项来对查找的结果进行处理，如find /etc -name init -exec ls -l <code>{} \\;</code>,着重部分是固定格式。</li>\n</ul>\n<blockquote>\n<p><code>locate [-i] 要查找的内容</code>：快速查找或者忽略大小写查找。<br>说明</p>\n</blockquote>\n<ul>\n<li>可能系统为安装该命令，需要执行yum -y install mlocate。</li>\n<li>每次使用前最好执行updatedb命令更新locate检索库。</li>\n</ul>\n<blockquote>\n<p><code>grep [选项] 字串 文件或者是命令的输出结果</code>：从指定的文件或者一个命令输出结果中过滤查找需要的内容。<br>常用选项-ivn</p>\n</blockquote>\n<ul>\n<li>-i：忽略大小写查找。</li>\n<li>-v：排除指定字串查找。</li>\n<li>-n:查找结果带行号显示。</li>\n<li>字串可以使用通配符或者正则，如*、？、^、$。</li>\n</ul>\n<h5 id=\"时间日期命令\"><a href=\"#时间日期命令\" class=\"headerlink\" title=\"时间日期命令\"></a>时间日期命令</h5><blockquote>\n<p><code>date [-s] [+时间格式</code>：按指定格式设置或显示系统时间。<br>格式说明：%Y表示年份、%m表示月份、%d表示天、%H表示0-23的小时、%M表示分钟、%S表示秒。</p>\n</blockquote>\n<blockquote>\n<p><code>cal [年份]</code>：查看当前时间的日历或者查看指定年份的日历。</p>\n</blockquote>\n<blockquote>\n<p><code>ntpq -p</code>：与NTP服务器进行时间同步，CentOS7请使用<code>chronyc sources</code>命令。</p>\n</blockquote>\n<blockquote>\n<p><code>/etc/sysconfig/clock</code>：配置时区，CentOS7使用<code>tiemdatectl set-timezone Asia/Shanghai</code>命令。</p>\n</blockquote>\n<blockquote>\n<p><code>/etc/sysconfig/i18n</code>：配置语言环境，CentOS7使用<code>localectl set-locale LANG=zh_CN.UTF-8</code>命令。</p>\n</blockquote>\n<h5 id=\"文件压缩和解压缩命令\"><a href=\"#文件压缩和解压缩命令\" class=\"headerlink\" title=\"文件压缩和解压缩命令\"></a>文件压缩和解压缩命令</h5><blockquote>\n<p><code>gzip 文件</code>和<code>gunzip 文件</code>：以gzip格式压缩和解压文件，只能压缩文件且不会保留原文件。</p>\n</blockquote>\n<blockquote>\n<p><code>zip [-r] 文件或目录 压缩后的文件 要压缩的文件</code>：以zip格式压缩目录或文件。<br><code>unzip [-d 目录] 要解压的文件</code>：以zip格式解压文件到当前目录或指定目录。</p>\n</blockquote>\n<blockquote>\n<p><code>tar [-zcvf] 要压缩打包的目录或文件</code>：以gzip压缩并使用tar进行打包指定文件。<br><code>tar [-zxvf] 要解压的文件 [-C 目标目录]</code>：解压.tar.bz2文件到当前目录或指定的已存在的目录。</p>\n</blockquote>\n<blockquote>\n<p><code>tar [-jcvf] 要压缩打包的目录或文件</code>：以bzip2压缩并打包指定文件。<br><code>tar [-jxvf] 要解压的文件 [-C 目标目录]</code>：解压.tar.bz2文件到当前目录或指定目录。</p>\n</blockquote>\n<h5 id=\"网络与服务命令\"><a href=\"#网络与服务命令\" class=\"headerlink\" title=\"网络与服务命令\"></a>网络与服务命令</h5><blockquote>\n<p><code>ipconfig</code>或者<code>ip addr</code>：查看网卡信息，后者是CentOS7上或者Ubuntu18上使用。</p>\n</blockquote>\n<blockquote>\n<p><code>ping IP地址</code>：测试与目标IP地址的连通性。</p>\n</blockquote>\n<blockquote>\n<p><code>netstat -rn</code>：可以查看路由列表。<br><code>netstat -tulnp</code>或者<code>netstat -anp</code>：查看进程的网络连接状态。<br>选项说明：r表示路由、n表示IP地址和端口号、t表示tcp连接、u表示udp连接、l表示监听状态、p表示PID和应用、a表示全部。</p>\n</blockquote>\n<blockquote>\n<p>如何配置静态IP地址</p>\n</blockquote>\n<ul>\n<li>CentOS中配置方式：修改 /etc/sysconfig/network-scripts/ifcfg-eth0(或者ens33)配置文件，修改内容类似下面。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改部分</span><br><span class=\"line\">BOOTPROTO=&quot;static&quot; # 设置使用静态IP协议</span><br><span class=\"line\">ONBOOT=&quot;yes&quot;  # 设置开机启动网络服务</span><br><span class=\"line\"># 添加部分</span><br><span class=\"line\">DNS1=&quot;114.114.114.114&quot; #设置DNS1</span><br><span class=\"line\">DNS2=&quot;8.8.8.8&quot;</span><br><span class=\"line\">GATEWAY=&quot;192.168.124.2&quot; # 设置网关</span><br><span class=\"line\">IPADDR=&quot;192.168.124.124&quot;  # 设置IP地址</span><br><span class=\"line\">NETMASK=&quot;255.255.255.0&quot;  # 设置子网掩码</span><br><span class=\"line\"></span><br><span class=\"line\"># 重启网络服务CentOS6.x：network，CentOS7.x:NetworkManager</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Ubuntu18中配置方式：修改/etc/netplan/01-network-manager-all.yaml配置文件，修改内容类似下面。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">network:</span><br><span class=\"line\">　version: 2</span><br><span class=\"line\">    renderer: NetworkManager</span><br><span class=\"line\">    ethernets:</span><br><span class=\"line\">　　ens33:</span><br><span class=\"line\">　　dhcp4: no #关闭动态主机配置协议</span><br><span class=\"line\">　　addresses: [192.168.124.125/24] #设置IP地址，24表示24位的子网掩码(即255.255.255.0)</span><br><span class=\"line\">　　gateway4: 192.168.124.2 #设置网关</span><br><span class=\"line\">　　nameservers:</span><br><span class=\"line\">　　　　addresses: [8.8.8.8, 114.114.114.114] #设置DNS</span><br><span class=\"line\"></span><br><span class=\"line\"># Ubuntu18中重启方式：sudo netplan apply</span><br></pre></td></tr></table></figure>\n\n<p>-</p>\n<blockquote>\n<p><code>ls /etc/init.d</code>：可以系统中通过rpm安装的独立服务列表。</p>\n</blockquote>\n<blockquote>\n<p>服务管理</p>\n</blockquote>\n<ul>\n<li><code>/etc/init.d/服务名 stop|start|restart|status</code>:对某个服务停止、启动、重启，查看状态。</li>\n<li><code>service 服务名 stop|start|restart|status</code>。</li>\n<li><code>systemctl stop|start|restart|reload|status 服务名</code>。（CentOS7的管理方式）</li>\n<li><code>service --status-all</code>；查看所有的服务状态。CentIS7使用<code>systemctl list-units</code>。</li>\n</ul>\n<blockquote>\n<p>自启动管理</p>\n</blockquote>\n<ul>\n<li><code>chkconfig --list [| grep xxx]</code> : 查看所有服务或者具体服务在各个运行级别的状态。    </li>\n<li><code>chkconfig [--level runlevel] 服务名 on/off</code>：设置服务在所有级别或指定级别的开启自启与关闭。   </li>\n<li><code>systemctl enable/disable xxx.service</code>：同样可以设置开机自启与关闭，使用于CentOS7.</li>\n<li><code>systemctl list-unit-files</code>：查看所有的自启动状态。</li>\n</ul>\n<blockquote>\n<p>防火墙管理</p>\n</blockquote>\n<ul>\n<li><code>/etc/init.d/iptables</code>：配置该文件可放开端口。</li>\n<li><code>firewall-cmd --zone=public [--remove-port|--query-port|--add-port]=80/tcp --permanent</code>：CentOS7的方式。</li>\n<li><code>firewall-cmd --reload</code>：重启防火墙。</li>\n<li><code>firewall-cmd --zone=public --list-ports</code>：查看防火墙列表。</li>\n</ul>\n<h5 id=\"系统运行级别管理命令\"><a href=\"#系统运行级别管理命令\" class=\"headerlink\" title=\"系统运行级别管理命令\"></a>系统运行级别管理命令</h5><blockquote>\n<p>系统运行级别分为六大类（括号内的表示在CentOS7中的标识）。</p>\n</blockquote>\n<ul>\n<li>0：表示关机。 （poweroff.target）。</li>\n<li>1：表示单用户模式 （emergency.target）。</li>\n<li>2：表示多用户无网络模式 （rescure.target）。</li>\n<li>3：表示多用户有网络模式 （multi-user.target）。</li>\n<li>4：表示保留级别，未被使用。（无）</li>\n<li>5：表示图形界面模式 （graphical.target）。</li>\n<li>6：表示重启 （reboot.target）。</li>\n<li>CentOS7中的这些名称可以通过<code>ll /lib/systemd/system/runlevel*</code>查到。</li>\n</ul>\n<blockquote>\n<p><code>runlevel</code>：能够查看系统之前和当前的运行级别。<br><code>vi /etc/inittab</code>；通过该配置文件也可以查到系统运行级别。<br><code>systemctl get-default</code>；在CentOS7中可以通过该命令查看当前运行级别。</p>\n</blockquote>\n<blockquote>\n<p><code>init 级别ID</code>；可以切换运行级别。<br><code>vi /etc/inittab</code>：在该文件中配置默认运行级别。<br><code>systemctl set-default xxx.target</code>：CentOS7的配置默认运行级别的方式。</p>\n</blockquote>\n<h5 id=\"进程管理命令\"><a href=\"#进程管理命令\" class=\"headerlink\" title=\"进程管理命令\"></a>进程管理命令</h5><blockquote>\n<p><code>ps aux</code>与<code>ps au</code>：查看当前系统进程的详细信息，一般使用后者即可，表示只显示终端上的进程。<br><code>ps -ef</code>：同样能查看当前系统进程信息，还能查到父进程的PID。<br><code>pstree [选项]</code>：查看系统进程树。<br>常用选项：</p>\n</blockquote>\n<ul>\n<li>-p：查看指定PID的进程。</li>\n<li>-u：查看指定用户名的进程。    </li>\n</ul>\n<blockquote>\n<p><code>top</code>：动态实时的显示系统进程并排序，还可以监控系统的健康状态。</p>\n</blockquote>\n<blockquote>\n<p><code>kill -1 PID</code>：重启指定PID的进程。<br><code>kill [-9] PID</code>：结束或强制结束指定PID的进程。<br><code>killall 进程名</code>：结束与指定进程相关的所有进程。<br><code>pkill</code> : 可以用来踢出指定终端的用户</p>\n</blockquote>\n<h5 id=\"用户和组管理命令\"><a href=\"#用户和组管理命令\" class=\"headerlink\" title=\"用户和组管理命令\"></a>用户和组管理命令</h5><blockquote>\n<p>相关配置文件分别是<code>/etc/passwd</code>、<code>/etc/shadow</code>、<code>/etc/group</code>、<code>/etc/gshadow</code>。</p>\n</blockquote>\n<ul>\n<li>/etc/passwd：分别表示用户名、标识口令、UID、初始GID、备注、家目录、登录Shell。</li>\n<li>/etc/shadow：分别表示用户名、加密口令、最新修改日期、下次可修改间隔、有效期限、提前警告天数、过期可用天数、截止日期、保留。</li>\n<li>/etc/group：分别表示组名称、标识口令、组ID、组用户列表。</li>\n<li>/etc/gshadow：分别表示组名称、加密口令、组管理者列表、组用户列表。</li>\n</ul>\n<blockquote>\n<p><code>useradd [选项] 用户名</code>：添加新用户。<br>常用选项</p>\n</blockquote>\n<ul>\n<li>-g：添加到初始组，一个用户只能有一个初始组（也称之为主组）。</li>\n<li>-G：添加到附加组，一个用户可以有多个附加组（也就是组配置文件中用户列表中所对应的组）。</li>\n<li>-d：指定家目录的位置。</li>\n<li>-u：指定UID，普通用户的UID都是500之后的数字，超级用户的UID是0。</li>\n<li>-s：设置使用的登录shell类型</li>\n<li>-r：–system ，创建一个系统账号，这样的账号不会再/home下创建家目录。</li>\n<li>-m：–creat-home，设置要在/home下创建家目录。</li>\n<li>-M：–no-create-home ，设置不创用户的家目录。</li>\n</ul>\n<blockquote>\n<p><code>passwd 用户名</code>：为指定用户设置口令。</p>\n</blockquote>\n<blockquote>\n<p><code>userdel [-r] 用户名</code>：删除指定用户或者同时删除家目录。<br><code>usermod [选项] 用户名</code>：可以修改用户信息，选项同新增用户选项。</p>\n</blockquote>\n<blockquote>\n<p><code>id [用户名]</code>；查看用户的UID和GID信息。<br><code>who</code>或者<code>w</code>；查看所有登录用户的详细信息。<br><code>whoami</code>：查看当前用户名称。</p>\n</blockquote>\n<blockquote>\n<p><code>su [-] 用户名</code>：切换到指定目录。<br>可以不用切换root用户，而使用<code>sudo</code>来管理系统。</p>\n</blockquote>\n<blockquote>\n<p><code>groupadd 组名</code>、<code>groupdel 组名</code>、<code>groupmod 组名</code>。</p>\n</blockquote>\n<h5 id=\"文件权限管理命令\"><a href=\"#文件权限管理命令\" class=\"headerlink\" title=\"文件权限管理命令\"></a>文件权限管理命令</h5><blockquote>\n<p>使用<code>ls -l</code>可以查看文件或目录的详细信息。     </p>\n</blockquote>\n<ul>\n<li>这些信息分别表示文件类型和ugo权限、硬链接数(可访问方式的数量)、所有者、所属组、文件大小、最后修改时间、文件名（即basename）。</li>\n<li>文件的rwx：表示可查看、修改文件内容、可执行该文件。</li>\n<li>目录的rwx：表示可查看、在目录中创建目录文件或修改目录内容、可进入该目录。</li>\n</ul>\n<blockquote>\n<p><code>chmod [-R] {[ugoa]+/-/=[rwx]} 目录或文件</code>：修改(添加、减少、设置)所有者或所属组或其他用户或所有用户对指定目录或文件的读写执行权限。<br><code>chmod [-R] [rwx=421] 目录或文件</code>：使用数字表示法设置目录或文件的权限，如chmod 755 temp.sh。</p>\n</blockquote>\n<blockquote>\n<p><code>chown [-R] 用户名  目录或文件</code>：变更目录或文件的所有者为指定用户。<br><code>chgrp [-R] 组名 目录或文件</code>： 变变目录或文件的所属组为指定组。<br><code>chown [-R] 用户名:组名 目录或文件</code>：同时变更目录或文件的所有者和所属组。</p>\n</blockquote>\n<h5 id=\"磁盘管理命令\"><a href=\"#磁盘管理命令\" class=\"headerlink\" title=\"磁盘管理命令\"></a>磁盘管理命令</h5><blockquote>\n<p><code>lsblk [-f]</code>：查看分区和挂载信息,-f,–fs。   使用<code>fdisk -l</code>也能查看。<br><code>df [-lha]</code>：查看整个磁盘的使用情况,-l,–local。<br><code>du [-ach --max-depth=0开始的数字]  [目录或文件]</code>：查看指定目录或目录所有内容的磁盘使用情况并统计，还能灵活的指定目深度。<br><code>du -sh 目录</code></p>\n</blockquote>\n<blockquote>\n<p><code>mount</code>：查看系统中挂载哪些分区。<br><code>mount /dev/sr0 /mnt/cdrom</code>：挂载光驱设备到/mnt/cdrom。<br><code>mount -t vfat /dev/sdb1 /mnt/usb</code>：挂载一个fat32格式的U盘，U盘的设备名称也是以“sd”开头的。<br>Linux默认不支持NTFS格式的U盘，需要安装ntfs-3g软件包才能正常使用。    </p>\n</blockquote>\n<blockquote>\n<p>如何为系统添加一块新硬盘(以第二块硬盘sdb为例)。</p>\n</blockquote>\n<ul>\n<li>分区分为MBR(主引导记录)和GPT(GUID分区表)两大类，前者主分区最多4个，支持硬盘容量有限；后者主分区无上限，支持容量达18EB，可能受操作系统限制。</li>\n<li>对于SCSI(小型机系统接口)或SATA(串行高级技术附件)硬盘在Linux文件系统中都是保存在/dev下的以’sd’开头的目录中。</li>\n<li>准备好要添加的硬盘。</li>\n<li><code>fdisk /dev/sdb</code>：为sdb硬盘进行分区。</li>\n<li><code>mkfs /dev/sdb</code>：格式化sdb硬盘，根据提示进行，格式化进行将文件系统写入硬盘。</li>\n<li><code>mkdir /mnt/newdisk</code>：创建挂载点。</li>\n<li><code>mount /dev/sdb /mnt/newdisk</code>：执行临时挂载操作，当然也可通过<code>unount</code>进行卸载。</li>\n<li><code>vi /etc/fstab</code>：修改配置文件以便使挂载永久生效。</li>\n<li><code>mount -a</code>：根据/etc/fstab的配置重新进行挂载。</li>\n</ul>\n<h5 id=\"定时调度命令\"><a href=\"#定时调度命令\" class=\"headerlink\" title=\"定时调度命令\"></a>定时调度命令</h5><blockquote>\n<p><code>crontab -e</code>：打开定时调度配置文件进行编辑</p>\n</blockquote>\n<ul>\n<li>从左到右五个时间符号分别表示：分钟、小时、日、月、星期。</li>\n<li>“*”表示任意时间，“*/n”表示每隔多长时间，“-”表示一段时间，“，”表示几个时间点。    </li>\n</ul>\n<blockquote>\n<p><code>crontab -l</code>：查看有定时任务列表。<br><code>crontab -r</code>：删除所有定时任务。</p>\n</blockquote>\n<h5 id=\"软件包管理命令\"><a href=\"#软件包管理命令\" class=\"headerlink\" title=\"软件包管理命令\"></a>软件包管理命令</h5><blockquote>\n<p>rpm管理   </p>\n</blockquote>\n<ul>\n<li><code>rpm -qa 包名</code>：查询指定rpm包的安装情况。   </li>\n<li><code>rpm -ql 包名</code>:查询指定rpm包的安装位置。    </li>\n<li><code>rpm -qR 包名</code>:查询指定rpm包的依赖信息。   </li>\n<li><code>rpm -qf 目录</code>：查询指定目录下安装的rpm包列表。</li>\n<li><code>rpm -ivh 包全名</code>；安装指定rpm包，显示安装详情和安装进度。</li>\n<li><code>rpm -e [--nodeps] 包名</code>：卸载或者强制卸载指定rpm包。</li>\n<li><code>rpm -Uvh 包名</code>：升级安装包。</li>\n</ul>\n<blockquote>\n<p>yum管理</p>\n</blockquote>\n<ul>\n<li><code>yum [-y] list</code>：查询安装列表。</li>\n<li><code>yum [-y] install 包名</code>：安装。</li>\n<li><code>yum [-y] remove 包名</code> ：卸载。</li>\n<li><code>yum [-y] update 包名</code>：升级。</li>\n<li><code>yum [-y] grouplist</code>：查询软件组列表。</li>\n<li><code>yum [-y] groupinstall 软件组名</code>、<code>yum [-y] removegroup软件组名</code>。</li>\n<li>可以更新yum源：位置在<code>/etc/yum.repos.d/</code>目录下。</li>\n</ul>\n<blockquote>\n<p>Ubuntu apt管理</p>\n</blockquote>\n<ul>\n<li><code>sudo apt-get update</code>：修改软件源之后可以使用该命令重新加载软件源。</li>\n<li>源更新方式可以去tuna上找：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/</a> 。</li>\n<li><code>sudo apt-get install 包名</code>：安装包。</li>\n<li><code>sudo apt-get remove 包名</code>：卸载包。</li>\n<li><code>sudo apt-get upgrade 包名</code>：更新已安装的包。</li>\n<li><code>sudo apt-cache show 包名</code>：获取包的相关信息。</li>\n<li><code>sudo apt-get source 包名</code>：下载该包的源代码。</li>\n</ul>\n<h5 id=\"关机和重启命令\"><a href=\"#关机和重启命令\" class=\"headerlink\" title=\"关机和重启命令\"></a>关机和重启命令</h5><blockquote>\n<p><code>shutdown -r time</code>：指定时间重启，默认是1分钟。<code>shutdown -r now</code>等价于<code>reboot</code>。<br><code>shutdown -h time</code> ：指定时间关机。<code>shutdown -h now</code>等价于<code>halt</code>。<br><code>shutdown -c</code>；取消上一个shutdown命令。<br><code>sync</code>：同步命令，同步数据到磁盘。</p>\n</blockquote>\n<h5 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h5><blockquote>\n<p><code>hostname</code>：查看主机名。<br><code>uname -a</code>：查看内核版本详情。<br><code>/proc/cpuinfo</code>；查看cpu信息。<br><code>free -m</code>：以MB单位查看内存信息。<br><code>/etc/issue</code>：查看查看发行版本。   </p>\n</blockquote>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><blockquote>\n<p>windows上使用公私密钥对登录  </p>\n</blockquote>\n<ul>\n<li>创建一组密钥对并保存好私钥。</li>\n<li>将公钥内容导入到指定用户的家目录的.ssh目录下的authorized_keys文件中。</li>\n<li>禁用密码登录 vi /etc/ssh/sshd_config 设置密码认证为no。</li>\n<li>service sshd restart</li>\n<li>禁用root登录：vi /etc/ssh/sshd_config -&gt; PermitRootLogin no</li>\n<li>改掉ssh端口：vi /etc/ssh/sshd_config -&gt; Port=xxx</li>\n</ul>\n<blockquote>\n<p>Linux上使用ssh</p>\n</blockquote>\n<ul>\n<li>ssh -p username@IP</li>\n<li>ssh-sshgen -t rsa -b 2048</li>\n<li>ssh-copy-id username@IP</li>\n</ul>\n<h5 id=\"SCP\"><a href=\"#SCP\" class=\"headerlink\" title=\"SCP\"></a>SCP</h5><ul>\n<li>scp -P user@服务器IP:绝对路径 客户机文件    </li>\n</ul>\n<h5 id=\"SFTP\"><a href=\"#SFTP\" class=\"headerlink\" title=\"SFTP\"></a>SFTP</h5><ul>\n<li>sftp -oPort user@IP</li>\n<li>使用help查看使用</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/JVM初识/classloader.png","slug":"classloader.png","post":"cjzxd8os7000dagtn5oin3uoo","modified":0,"renderable":0},{"_id":"source/_posts/JVM初识/heap.png","slug":"heap.png","post":"cjzxd8os7000dagtn5oin3uoo","modified":0,"renderable":0},{"_id":"source/_posts/JVM初识/jvm.png","slug":"jvm.png","post":"cjzxd8os7000dagtn5oin3uoo","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjzxd8ors0007agtng0lxby31","category_id":"cjzxd8orm0004agtn8dp2hy4z","_id":"cjzxd8os9000eagtngqushi2o"},{"post_id":"cjzxd8or40000agtnuwlxvlxb","category_id":"cjzxd8orm0004agtn8dp2hy4z","_id":"cjzxd8ose000iagtnps1wck2v"},{"post_id":"cjzxd8orv0008agtnl1vu2svf","category_id":"cjzxd8orm0004agtn8dp2hy4z","_id":"cjzxd8osg000lagtn6g9oume5"},{"post_id":"cjzxd8os4000cagtn39jvfasy","category_id":"cjzxd8orm0004agtn8dp2hy4z","_id":"cjzxd8osj000oagtnetjq461j"},{"post_id":"cjzxd8orh0002agtnrrevwkzb","category_id":"cjzxd8orm0004agtn8dp2hy4z","_id":"cjzxd8osm000ragtngyensab9"},{"post_id":"cjzxd8os7000dagtn5oin3uoo","category_id":"cjzxd8orm0004agtn8dp2hy4z","_id":"cjzxd8osq000vagtnp88y2qtm"},{"post_id":"cjzxd8osc000hagtnh7r97tka","category_id":"cjzxd8orm0004agtn8dp2hy4z","_id":"cjzxd8oss000yagtnxz81yikl"},{"post_id":"cjzxd8orq0006agtn47axcbo2","category_id":"cjzxd8os9000fagtnwt7ho5e2","_id":"cjzxd8osv0011agtn0o7n1d52"},{"post_id":"cjzxd8osf000kagtnanzu8ho6","category_id":"cjzxd8orm0004agtn8dp2hy4z","_id":"cjzxd8osy0015agtnf44uawhs"},{"post_id":"cjzxd8osr000xagtnd7clc4qo","category_id":"cjzxd8orm0004agtn8dp2hy4z","_id":"cjzxd8ot10018agtnisv74axm"},{"post_id":"cjzxd8osi000nagtn1imj5y57","category_id":"cjzxd8osn000sagtn73segl6i","_id":"cjzxd8ot3001bagtnq7czqf4e"},{"post_id":"cjzxd8ost000zagtngqh2j2cw","category_id":"cjzxd8osn000sagtn73segl6i","_id":"cjzxd8ot4001dagtn68vr6z2a"},{"post_id":"cjzxd8osx0014agtnl7xlsmdr","category_id":"cjzxd8orm0004agtn8dp2hy4z","_id":"cjzxd8ot5001fagtnowr503ts"},{"post_id":"cjzxd8osk000qagtnvltz3o9n","category_id":"cjzxd8osn000sagtn73segl6i","_id":"cjzxd8ot6001hagtnr0kgru08"},{"post_id":"cjzxd8osz0016agtn3ld2h1lj","category_id":"cjzxd8osn000sagtn73segl6i","_id":"cjzxd8ot7001jagtn9yvuiw0f"},{"post_id":"cjzxd8oso000uagtnrpg35rgc","category_id":"cjzxd8osn000sagtn73segl6i","_id":"cjzxd8ot8001lagtn6lincaax"},{"post_id":"cjzxd8psa001zagtnb1chu8z3","category_id":"cjzxd8orm0004agtn8dp2hy4z","_id":"cjzxd8psh0024agtnk3rfnw6t"},{"post_id":"cjzxd8psc0020agtnwpbagi51","category_id":"cjzxd8osn000sagtn73segl6i","_id":"cjzxd8psi0025agtn03zm0jhr"},{"post_id":"cjzxd8psf0022agtnt2jgwlg6","category_id":"cjzxd8osn000sagtn73segl6i","_id":"cjzxd8psm0028agtnpcuxx32v"},{"post_id":"cjzxd8psg0023agtnaggdm5kj","category_id":"cjzxd8orm0004agtn8dp2hy4z","_id":"cjzxd8psn0029agtnbmago0l3"},{"post_id":"cjzxd8pt6002fagtn4cuzcwjd","category_id":"cjzxd8orm0004agtn8dp2hy4z","_id":"cjzxd8pta002hagtn67j0ci5q"}],"PostTag":[{"post_id":"cjzxd8or40000agtnuwlxvlxb","tag_id":"cjzxd8oro0005agtnreeewdto","_id":"cjzxd8os3000bagtnp1skfn0w"},{"post_id":"cjzxd8orh0002agtnrrevwkzb","tag_id":"cjzxd8os0000aagtnb82vsdvx","_id":"cjzxd8ose000jagtnurtn0hal"},{"post_id":"cjzxd8orq0006agtn47axcbo2","tag_id":"cjzxd8osb000gagtngiknk9i1","_id":"cjzxd8osj000pagtnlep3vali"},{"post_id":"cjzxd8ors0007agtng0lxby31","tag_id":"cjzxd8osh000magtnnuecuxiv","_id":"cjzxd8osr000wagtn2nvdvshq"},{"post_id":"cjzxd8orv0008agtnl1vu2svf","tag_id":"cjzxd8oso000tagtnsh4wpubx","_id":"cjzxd8osw0013agtnjmk93wnu"},{"post_id":"cjzxd8osx0014agtnl7xlsmdr","tag_id":"cjzxd8oso000tagtnsh4wpubx","_id":"cjzxd8ot2001aagtnoc0j0euf"},{"post_id":"cjzxd8os4000cagtn39jvfasy","tag_id":"cjzxd8osv0012agtne82dmss1","_id":"cjzxd8ot4001cagtnl2a9seb9"},{"post_id":"cjzxd8os7000dagtn5oin3uoo","tag_id":"cjzxd8ot20019agtnhwm0rv4l","_id":"cjzxd8ot6001gagtnxbzslsrx"},{"post_id":"cjzxd8osc000hagtnh7r97tka","tag_id":"cjzxd8ot5001eagtno5x8r7as","_id":"cjzxd8ot8001kagtn416k1tc3"},{"post_id":"cjzxd8osf000kagtnanzu8ho6","tag_id":"cjzxd8ot5001eagtno5x8r7as","_id":"cjzxd8ot9001nagtnbu4e20s6"},{"post_id":"cjzxd8osi000nagtn1imj5y57","tag_id":"cjzxd8ot8001magtn72saj12m","_id":"cjzxd8ota001pagtn8v46rhr0"},{"post_id":"cjzxd8osk000qagtnvltz3o9n","tag_id":"cjzxd8ota001oagtn27phq0c8","_id":"cjzxd8otb001ragtncrix9dme"},{"post_id":"cjzxd8oso000uagtnrpg35rgc","tag_id":"cjzxd8ota001oagtn27phq0c8","_id":"cjzxd8otd001tagtneb0oygg3"},{"post_id":"cjzxd8osr000xagtnd7clc4qo","tag_id":"cjzxd8otc001sagtnvmsesi1f","_id":"cjzxd8ote001vagtnij3ck4ti"},{"post_id":"cjzxd8ost000zagtngqh2j2cw","tag_id":"cjzxd8otc001sagtnvmsesi1f","_id":"cjzxd8otf001xagtny8d0mwe0"},{"post_id":"cjzxd8osz0016agtn3ld2h1lj","tag_id":"cjzxd8ote001wagtnca4mt8qv","_id":"cjzxd8otg001yagtnu91bitqt"},{"post_id":"cjzxd8psa001zagtnb1chu8z3","tag_id":"cjzxd8pse0021agtnfts7ybif","_id":"cjzxd8psl0027agtnorrxi451"},{"post_id":"cjzxd8psc0020agtnwpbagi51","tag_id":"cjzxd8psj0026agtnozbt0fbb","_id":"cjzxd8pso002bagtnbhkppvrc"},{"post_id":"cjzxd8psf0022agtnt2jgwlg6","tag_id":"cjzxd8psn002aagtn7ilwbytm","_id":"cjzxd8psr002dagtncwlsm39v"},{"post_id":"cjzxd8psg0023agtnaggdm5kj","tag_id":"cjzxd8psq002cagtnx72u96zl","_id":"cjzxd8pss002eagtn2ef60kxq"},{"post_id":"cjzxd8pt6002fagtn4cuzcwjd","tag_id":"cjzxd8ot5001eagtno5x8r7as","_id":"cjzxd8pt9002gagtnckdqxb6c"}],"Tag":[{"name":"docker","_id":"cjzxd8oro0005agtnreeewdto"},{"name":"dos","_id":"cjzxd8os0000aagtnb82vsdvx"},{"name":"eclipse","_id":"cjzxd8osb000gagtngiknk9i1"},{"name":"git","_id":"cjzxd8osh000magtnnuecuxiv"},{"name":"hexo","_id":"cjzxd8oso000tagtnsh4wpubx"},{"name":"html","_id":"cjzxd8osv0012agtne82dmss1"},{"name":"jvm","_id":"cjzxd8ot20019agtnhwm0rv4l"},{"name":"linux","_id":"cjzxd8ot5001eagtno5x8r7as"},{"name":"mysql","_id":"cjzxd8ot8001magtn72saj12m"},{"name":"mybatis","_id":"cjzxd8ota001oagtn27phq0c8"},{"name":"redis","_id":"cjzxd8otc001sagtnvmsesi1f"},{"name":"database","_id":"cjzxd8ote001wagtnca4mt8qv"},{"name":"java","_id":"cjzxd8pse0021agtnfts7ybif"},{"name":"log4j","_id":"cjzxd8psj0026agtnozbt0fbb"},{"name":"logback","_id":"cjzxd8psn002aagtn7ilwbytm"},{"name":"maven","_id":"cjzxd8psq002cagtnx72u96zl"}]}}